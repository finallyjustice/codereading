From 0f63c46f3bb3115fe384ad09f58bc06e1aa5c081 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Tue, 11 Jun 2019 21:48:24 +0800
Subject: [PATCH 1/1] linux-net-for-4.14.113

Signed-off-by: Dongli Zhang <dongli.zhangi0129@gmail.com>
---
 include/linux/netdevice.h | 10 ++++++++++
 net/sched/sch_generic.c   | 32 ++++++++++++++++++++++++++++++++
 2 files changed, 42 insertions(+)

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 40b830d..937cfbf 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -532,7 +532,17 @@ enum netdev_queue_state_t {
 #define QUEUE_STATE_STACK_XOFF	(1 << __QUEUE_STATE_STACK_XOFF)
 #define QUEUE_STATE_FROZEN	(1 << __QUEUE_STATE_FROZEN)
 
+/*
+ * 在以下使用:
+ *   - include/linux/netdevice.h|536| <<QUEUE_STATE_ANY_XOFF_OR_FROZEN>> #define QUEUE_STATE_ANY_XOFF_OR_FROZEN (QUEUE_STATE_ANY_XOFF | \
+ *   - include/linux/netdevice.h|2923| <<netif_xmit_stopped>> return dev_queue->state & QUEUE_STATE_ANY_XOFF;
+ *   - net/core/dev.c|2484| <<netif_schedule_queue>> if (!(txq->state & QUEUE_STATE_ANY_XOFF)) {
+ */
 #define QUEUE_STATE_ANY_XOFF	(QUEUE_STATE_DRV_XOFF | QUEUE_STATE_STACK_XOFF)
+/*
+ * 在以下使用:
+ *   - include/linux/netdevice.h|2929| <<netif_xmit_frozen_or_stopped>> return dev_queue->state & QUEUE_STATE_ANY_XOFF_OR_FROZEN;
+ */
 #define QUEUE_STATE_ANY_XOFF_OR_FROZEN (QUEUE_STATE_ANY_XOFF | \
 					QUEUE_STATE_FROZEN)
 #define QUEUE_STATE_DRV_XOFF_OR_FROZEN (QUEUE_STATE_DRV_XOFF | \
diff --git a/net/sched/sch_generic.c b/net/sched/sch_generic.c
index 79549ba..7242f90 100644
--- a/net/sched/sch_generic.c
+++ b/net/sched/sch_generic.c
@@ -288,6 +288,17 @@ unsigned long dev_trans_start(struct net_device *dev)
 }
 EXPORT_SYMBOL(dev_trans_start);
 
+/*
+ * used by:
+ *   - net/sched/sch_generic.c|973| <<dev_init_scheduler>> setup_timer(&dev->watchdog_timer, dev_watchdog, (unsigned long )dev);
+ *
+ * 似乎主要在以下使用:
+ *   - net/sched/sch_generic.c|323| <<dev_watchdog>> if (!mod_timer(&dev->watchdog_timer,
+ *   - net/sched/sch_generic.c|339| <<__netdev_watchdog_up>> if (!mod_timer(&dev->watchdog_timer,
+ *   - net/sched/sch_generic.c|353| <<dev_watchdog_down>> if (del_timer(&dev->watchdog_timer))
+ *   - net/sched/sch_generic.c|973| <<dev_init_scheduler>> setup_timer(&dev->watchdog_timer, dev_watchdog, (unsigned long )dev);
+ *   - net/sched/sch_generic.c|999| <<dev_shutdown>> WARN_ON(timer_pending(&dev->watchdog_timer));
+ */
 static void dev_watchdog(unsigned long arg)
 {
 	struct net_device *dev = (struct net_device *)arg;
@@ -306,6 +317,13 @@ static void dev_watchdog(unsigned long arg)
 
 				txq = netdev_get_tx_queue(dev, i);
 				trans_start = txq->trans_start;
+				/*
+				 * igb设置net_device->watchdog_timeo的例子:
+				 *   - drivers/net/ethernet/intel/igb/igb_main.c|2389| <<igb_probe>> netdev->watchdog_timeo = 5 * HZ;
+				 *   - drivers/net/ethernet/intel/igbvf/netdev.c|2813| <<igbvf_probe>> netdev->watchdog_timeo = 5 * HZ;
+				 *
+				 * netif_tx_stop_queue()和netif_stop_queue()不知道有没有关系
+				 */
 				if (netif_xmit_stopped(txq) &&
 				    time_after(jiffies, (trans_start +
 							 dev->watchdog_timeo))) {
@@ -315,9 +333,19 @@ static void dev_watchdog(unsigned long arg)
 				}
 			}
 
+			/*
+			 * some_queue_timedout只在上面一处更新
+			 */
 			if (some_queue_timedout) {
 				WARN_ONCE(1, KERN_INFO "NETDEV WATCHDOG: %s (%s): transmit queue %u timed out\n",
 				       dev->name, netdev_drivername(dev), i);
+				/*
+				 * 几个ndo_tx_timeout的例子:
+				 *   - drivers/net/ethernet/intel/e1000/e1000_main.c|857| <<global>> .ndo_tx_timeout = e1000_tx_timeout,
+				 *   - drivers/net/ethernet/intel/e1000e/netdev.c|7017| <<global>> .ndo_tx_timeout = e1000_tx_timeout,
+				 *   - drivers/net/ethernet/intel/igb/igb_main.c|2162| <<global>> .ndo_tx_timeout = igb_tx_timeout,
+				 *   - drivers/net/ethernet/intel/igbvf/netdev.c|2710| <<global>> .ndo_tx_timeout = igbvf_tx_timeout,
+				 */
 				dev->netdev_ops->ndo_tx_timeout(dev);
 			}
 			if (!mod_timer(&dev->watchdog_timer,
@@ -963,6 +991,10 @@ static void dev_init_scheduler_queue(struct net_device *dev,
 	dev_queue->qdisc_sleeping = qdisc;
 }
 
+/*
+ * called by:
+ *   - net/core/dev.c|7681| <<register_netdevice>> dev_init_scheduler(dev);
+ */
 void dev_init_scheduler(struct net_device *dev)
 {
 	dev->qdisc = &noop_qdisc;
-- 
2.7.4

