From d8b128e3507a0a861f783d08e34d292f6f606066 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Sat, 27 Jul 2019 02:12:30 +0800
Subject: [PATCH 1/1] linux-xen-interface-for-linux-5.2

xen specific interface v5.2

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/include/asm/smp.h       |   4 ++
 arch/x86/kernel/cpu/hypervisor.c |   4 ++
 arch/x86/mm/init.c               |   4 ++
 arch/x86/xen/enlighten.c         | 103 +++++++++++++++++++++++++++++++++++++++
 arch/x86/xen/enlighten_hvm.c     |  76 +++++++++++++++++++++++++++++
 arch/x86/xen/enlighten_pv.c      |   5 ++
 arch/x86/xen/mmu_hvm.c           |   8 +++
 arch/x86/xen/smp_hvm.c           |   7 +++
 arch/x86/xen/time.c              |  41 ++++++++++++++++
 include/xen/xen-ops.h            |  14 ++++++
 init/main.c                      |   4 ++
 kernel/cpu.c                     |   5 ++
 12 files changed, 275 insertions(+)

diff --git a/arch/x86/include/asm/smp.h b/arch/x86/include/asm/smp.h
index da545df..ed58f72 100644
--- a/arch/x86/include/asm/smp.h
+++ b/arch/x86/include/asm/smp.h
@@ -76,6 +76,10 @@ static inline void stop_other_cpus(void)
 	smp_ops.stop_other_cpus(1);
 }
 
+/*
+ * called by:
+ *   - init/main.c|577| <<start_kernel>> smp_prepare_boot_cpu();
+ */
 static inline void smp_prepare_boot_cpu(void)
 {
 	smp_ops.smp_prepare_boot_cpu();
diff --git a/arch/x86/kernel/cpu/hypervisor.c b/arch/x86/kernel/cpu/hypervisor.c
index 479ca47..27ae7b6 100644
--- a/arch/x86/kernel/cpu/hypervisor.c
+++ b/arch/x86/kernel/cpu/hypervisor.c
@@ -85,6 +85,10 @@ static void __init copy_array(const void *src, void *target, unsigned int size)
 			to[i] = from[i];
 }
 
+/*
+ * called by:
+ *   - arch/x86/kernel/setup.c|1021| <<setup_arch>> init_hypervisor_platform();
+ */
 void __init init_hypervisor_platform(void)
 {
 	const struct hypervisor_x86 *h;
diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index fd10d91..080b2b5 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -646,6 +646,10 @@ static void __init memory_map_bottom_up(unsigned long map_start,
 	}
 }
 
+/*
+ * called by:
+ *   - arch/x86/kernel/setup.c|1139| <<setup_arch>> init_mem_mapping();
+ */
 void __init init_mem_mapping(void)
 {
 	unsigned long end;
diff --git a/arch/x86/xen/enlighten.c b/arch/x86/xen/enlighten.c
index 750f46a..e5b5e0e 100644
--- a/arch/x86/xen/enlighten.c
+++ b/arch/x86/xen/enlighten.c
@@ -38,6 +38,31 @@ EXPORT_SYMBOL_GPL(hypercall_page);
  * hypercall.
  *
  */
+/*
+ * used by:
+ *   - arch/x86/xen/enlighten.c|202| <<xen_vcpu_info_reset>> per_cpu(xen_vcpu, cpu) =
+ *   - arch/x86/xen/enlighten.c|206| <<xen_vcpu_info_reset>> per_cpu(xen_vcpu, cpu) = NULL;
+ *   - arch/x86/xen/enlighten.c|230| <<xen_vcpu_setup>> if (per_cpu(xen_vcpu, cpu) == &per_cpu(xen_vcpu_info, cpu))
+ *   - arch/x86/xen/enlighten.c|261| <<xen_vcpu_setup>> per_cpu(xen_vcpu, cpu) = vcpup;
+ *   - arch/x86/xen/enlighten.c|268| <<xen_vcpu_setup>> return ((per_cpu(xen_vcpu, cpu) == NULL) ? -ENODEV : 0);
+ *   - arch/x86/xen/enlighten_pv.c|1421| <<xen_cpu_up_prepare_pv>> if (per_cpu(xen_vcpu, cpu) == NULL)
+ *   - arch/x86/xen/irq.c|32| <<xen_save_fl>> vcpu = this_cpu_read(xen_vcpu);
+ *   - arch/x86/xen/irq.c|54| <<xen_restore_fl>> vcpu = this_cpu_read(xen_vcpu);
+ *   - arch/x86/xen/irq.c|73| <<xen_irq_disable>> this_cpu_read(xen_vcpu)->evtchn_upcall_mask = 1;
+ *   - arch/x86/xen/irq.c|89| <<xen_irq_enable>> vcpu = this_cpu_read(xen_vcpu);
+ *   - arch/x86/xen/mmu_pv.c|1307| <<xen_write_cr2>> this_cpu_read(xen_vcpu)->arch.cr2 = cr2;
+ *   - arch/x86/xen/mmu_pv.c|1312| <<xen_read_cr2>> return this_cpu_read(xen_vcpu)->arch.cr2;
+ *   - arch/x86/xen/smp_pv.c|379| <<xen_pv_cpu_up>> per_cpu(xen_vcpu, cpu)->evtchn_upcall_mask = 1;
+ *   - arch/x86/xen/time.c|51| <<xen_clocksource_read>> src = &__this_cpu_read(xen_vcpu)->time;
+ *   - arch/x86/xen/time.c|73| <<xen_read_wallclock>> vcpu_time = &get_cpu_var(xen_vcpu)->time;
+ *   - arch/x86/xen/time.c|75| <<xen_read_wallclock>> put_cpu_var(xen_vcpu);
+ *   - arch/x86/xen/time.c|503| <<xen_time_init>> pvti = &__this_cpu_read(xen_vcpu)->time;
+ *   - drivers/xen/events/events_2l.c|121| <<evtchn_2l_unmask>> struct vcpu_info *vcpu_info = __this_cpu_read(xen_vcpu);
+ *   - drivers/xen/events/events_2l.c|171| <<evtchn_2l_handle_events>> struct vcpu_info *vcpu_info = __this_cpu_read(xen_vcpu);
+ *   - drivers/xen/events/events_2l.c|281| <<xen_debug_interrupt>> v = per_cpu(xen_vcpu, i);
+ *   - drivers/xen/events/events_2l.c|290| <<xen_debug_interrupt>> v = per_cpu(xen_vcpu, cpu);
+ *   - drivers/xen/events/events_base.c|1220| <<__xen_evtchn_do_upcall>> struct vcpu_info *vcpu_info = __this_cpu_read(xen_vcpu);
+ */
 DEFINE_PER_CPU(struct vcpu_info *, xen_vcpu);
 
 /*
@@ -45,9 +70,29 @@ DEFINE_PER_CPU(struct vcpu_info *, xen_vcpu);
  * hypercall. This can be used both in PV and PVHVM mode. The structure
  * overrides the default per_cpu(xen_vcpu, cpu) value.
  */
+/*
+ * used by:
+ *   - arch/x86/xen/enlighten.c|230| <<xen_vcpu_setup>> if (per_cpu(xen_vcpu, cpu) == &per_cpu(xen_vcpu_info, cpu))
+ *   - arch/x86/xen/enlighten.c|235| <<xen_vcpu_setup>> vcpup = &per_cpu(xen_vcpu_info, cpu);
+ *   - arch/x86/xen/mmu_pv.c|1317| <<xen_read_cr2_direct>> return this_cpu_read(xen_vcpu_info.arch.cr2);
+ *
+ * 在x86下除了特殊的xen_read_cr2_direct(), 只在xen_vcpu_setup()被用到
+ * 其他通过上面的percpu的xen_vcpu指针引用
+ */
 DEFINE_PER_CPU(struct vcpu_info, xen_vcpu_info);
 
 /* Linux <-> Xen vCPU id mapping */
+/*
+ * used by:
+ *   - arch/x86/xen/enlighten_hvm.c|116| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, ebx);
+ *   - arch/x86/xen/enlighten_hvm.c|118| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, smp_processor_id());
+ *   - arch/x86/xen/enlighten_hvm.c|150| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
+ *   - arch/x86/xen/enlighten_hvm.c|152| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu;
+ *   - arch/x86/xen/enlighten_pv.c|976| <<xen_setup_vcpu_info_placement>> per_cpu(xen_vcpu_id, cpu) = cpu;
+ *   - arch/x86/xen/enlighten_pv.c|1264| <<xen_start_kernel>> per_cpu(xen_vcpu_id, 0) = 0;
+ *   - arch/x86/xen/smp_hvm.c|44| <<xen_hvm_smp_prepare_cpus>> per_cpu(xen_vcpu_id, cpu) = XEN_VCPU_ID_INVALID;
+ *   - include/xen/xen-ops.h|17| <<xen_vcpu_nr>> return per_cpu(xen_vcpu_id, cpu);
+ */
 DEFINE_PER_CPU(uint32_t, xen_vcpu_id);
 EXPORT_PER_CPU_SYMBOL(xen_vcpu_id);
 
@@ -93,6 +138,15 @@ struct shared_info *HYPERVISOR_shared_info = &xen_dummy_shared_info;
  *
  * 0: not available, 1: available
  */
+/*
+ * 使用xen_have_vcpu_info_placement的地方:
+ *   - arch/x86/xen/enlighten.c|141| <<global>> int xen_have_vcpu_info_placement = 1;
+ *   - arch/x86/xen/enlighten.c|296| <<xen_vcpu_setup>> if (xen_have_vcpu_info_placement) {
+ *   - arch/x86/xen/enlighten.c|317| <<xen_vcpu_setup>> xen_have_vcpu_info_placement = 0;
+ *   - arch/x86/xen/enlighten.c|327| <<xen_vcpu_setup>> if (!xen_have_vcpu_info_placement)
+ *   - arch/x86/xen/enlighten_pv.c|998| <<xen_setup_vcpu_info_placement>> if (xen_have_vcpu_info_placement) {
+ *   - arch/x86/xen/smp.c|128| <<xen_smp_cpus_done>> if (xen_have_vcpu_info_placement)
+ */
 int xen_have_vcpu_info_placement = 1;
 
 static int xen_cpu_up_online(unsigned int cpu)
@@ -120,6 +174,10 @@ int xen_cpuhp_setup(int (*cpu_up_prepare_cb)(unsigned int),
 	return rc >= 0 ? 0 : rc;
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten.c|214| <<xen_vcpu_restore>> rc = xen_vcpu_setup_restore(cpu);
+ */
 static int xen_vcpu_setup_restore(int cpu)
 {
 	int rc = 0;
@@ -185,6 +243,16 @@ void xen_vcpu_restore(void)
 	}
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten.c|173| <<xen_vcpu_setup_restore>> xen_vcpu_info_reset(cpu);
+ *   - arch/x86/xen/enlighten.c|307| <<xen_vcpu_setup>> xen_vcpu_info_reset(cpu);
+ *   - arch/x86/xen/enlighten_hvm.c|82| <<xen_hvm_init_mem_mapping>> xen_vcpu_info_reset(0);
+ *   - arch/x86/xen/enlighten_hvm.c|196| <<xen_hvm_guest_init>> xen_vcpu_info_reset(0);
+ *   - arch/x86/xen/enlighten_pv.c|130| <<xen_pv_init_platform>> xen_vcpu_info_reset(0);
+ *   - arch/x86/xen/enlighten_pv.c|1219| <<xen_start_kernel>> xen_vcpu_info_reset(0);
+ *   - arch/x86/xen/smp.c|141| <<xen_smp_cpus_done>> xen_vcpu_info_reset(cpu);
+ */
 void xen_vcpu_info_reset(int cpu)
 {
 	if (xen_vcpu_nr(cpu) < MAX_VIRT_CPUS) {
@@ -196,12 +264,44 @@ void xen_vcpu_info_reset(int cpu)
 	}
 }
 
+/*
+ * 在optiplex上测试, 4个vcpu的hvm, 开机的时候调用4次
+ *
+ * 第0次 (cpu = 0):
+ * [0] xen_vcpu_setup
+ * [0] start_kernel
+ * [0] secondary_startup_64
+ *
+ * 第1-3次 (cpu = 1-3):
+ * [0] xen_vcpu_setup+
+ * [0] xen_cpu_up_prepare_hvm
+ * [0] cpuhp_invoke_callback
+ * [0] _cpu_up
+ * [0] do_cpu_up
+ * [0] smp_init
+ * [0] kernel_init_freeable
+ * [0] kernel_init
+ * [0] ret_from_fork
+ *
+ * called by:
+ *   - arch/x86/xen/enlighten.c|147| <<xen_vcpu_setup_restore>> rc = xen_vcpu_setup(cpu);
+ *   - arch/x86/xen/enlighten_hvm.c|153| <<xen_cpu_up_prepare_hvm>> rc = xen_vcpu_setup(cpu);
+ *   - arch/x86/xen/enlighten_pv.c|986| <<xen_setup_vcpu_info_placement>> (void ) xen_vcpu_setup(cpu);
+ *   - arch/x86/xen/smp_hvm.c|19| <<xen_hvm_smp_prepare_boot_cpu>> xen_vcpu_setup(0);
+ */
 int xen_vcpu_setup(int cpu)
 {
 	struct vcpu_register_vcpu_info info;
 	int err;
 	struct vcpu_info *vcpup;
 
+	/*
+	 * kdump从30来panic时, 这里参数cpu=0, 但是xen_vcpu_nr(0)=30!!
+	 * [0] xen_vcpu_setup
+	 * [0] start_kernel
+	 * [0] secondary_startup_64
+	 */
+
 	BUG_ON(HYPERVISOR_shared_info == &xen_dummy_shared_info);
 
 	/*
@@ -235,6 +335,9 @@ int xen_vcpu_setup(int cpu)
 		 * hypercall does not allow to over-write info.mfn and
 		 * info.offset.
 		 */
+		/*
+		 * xen那一端的实现会把之前的vcpu_info拷贝过来
+		 */
 		err = HYPERVISOR_vcpu_op(VCPUOP_register_vcpu_info,
 					 xen_vcpu_nr(cpu), &info);
 
diff --git a/arch/x86/xen/enlighten_hvm.c b/arch/x86/xen/enlighten_hvm.c
index 0e75642..c237269 100644
--- a/arch/x86/xen/enlighten_hvm.c
+++ b/arch/x86/xen/enlighten_hvm.c
@@ -25,6 +25,20 @@
 #include "mmu.h"
 #include "smp.h"
 
+/*
+ * start_kernel()
+ *  -> setup_arch()
+ *      -> init_hypervisor_platform()
+ *          -> x86_init.hyper.init_platform = xen_hvm_guest_init()
+ * 	        -> init_hvm_pv_info()
+ * 	        -> xen_hvm_init_shared_info()
+ * 	        -> xen_vcpu_info_reset(0)
+ * 	        -> xen_hvm_init_time_ops()
+ *  -> smp_prepare_boot_cpu()
+ *      -> smp_ops.smp_prepare_boot_cpu = xen_hvm_smp_prepare_boot_cpu()
+ * 	 -> xen_vcpu_setup(0)
+ */
+
 static unsigned long shared_info_pfn;
 
 void xen_hvm_init_shared_info(void)
@@ -63,6 +77,12 @@ static void __init reserve_shared_info(void)
 	HYPERVISOR_shared_info = early_memremap(pa, PAGE_SIZE);
 }
 
+/*
+ * called by:
+ *   - arch/x86/mm/init.c|701| <<init_mem_mapping>> x86_init.hyper.init_mem_mapping();
+ *
+ * struct hypervisor_x86 x86_hyper_xen_hvm.init.init_mem_mapping = xen_hvm_init_mem_mapping()
+ */
 static void __init xen_hvm_init_mem_mapping(void)
 {
 	early_memunmap(HYPERVISOR_shared_info, PAGE_SIZE);
@@ -82,6 +102,10 @@ static void __init xen_hvm_init_mem_mapping(void)
 	xen_vcpu_info_reset(0);
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten_hvm.c|186| <<xen_hvm_guest_init>> init_hvm_pv_info();
+ */
 static void __init init_hvm_pv_info(void)
 {
 	int major, minor;
@@ -111,6 +135,17 @@ static void __init init_hvm_pv_info(void)
 
 	xen_setup_features();
 
+	/*
+	 * used by:
+	 *   - arch/x86/xen/enlighten_hvm.c|116| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, ebx);
+	 *   - arch/x86/xen/enlighten_hvm.c|118| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, smp_processor_id());
+	 *   - arch/x86/xen/enlighten_hvm.c|150| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
+	 *   - arch/x86/xen/enlighten_hvm.c|152| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|976| <<xen_setup_vcpu_info_placement>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|1264| <<xen_start_kernel>> per_cpu(xen_vcpu_id, 0) = 0;
+	 *   - arch/x86/xen/smp_hvm.c|44| <<xen_hvm_smp_prepare_cpus>> per_cpu(xen_vcpu_id, cpu) = XEN_VCPU_ID_INVALID;
+	 *   - include/xen/xen-ops.h|17| <<xen_vcpu_nr>> return per_cpu(xen_vcpu_id, cpu);
+	 */
 	cpuid(base + 4, &eax, &ebx, &ecx, &edx);
 	if (eax & XEN_HVM_CPUID_VCPU_ID_PRESENT)
 		this_cpu_write(xen_vcpu_id, ebx);
@@ -133,6 +168,10 @@ static void xen_hvm_crash_shutdown(struct pt_regs *regs)
 }
 #endif
 
+/*
+ * used by only:
+ *   - arch/x86/xen/enlighten_hvm.c|208| <<xen_hvm_guest_init>> WARN_ON(xen_cpuhp_setup(xen_cpu_up_prepare_hvm, xen_cpu_dead_hvm));
+ */
 static int xen_cpu_up_prepare_hvm(unsigned int cpu)
 {
 	int rc = 0;
@@ -146,6 +185,17 @@ static int xen_cpu_up_prepare_hvm(unsigned int cpu)
 		xen_uninit_lock_cpu(cpu);
 	}
 
+	/*
+	 * 使用percpu的xen_vcpu_id的地方:
+	 *   - arch/x86/xen/enlighten_hvm.c|116| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, ebx);
+	 *   - arch/x86/xen/enlighten_hvm.c|118| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, smp_processor_id());
+	 *   - arch/x86/xen/enlighten_hvm.c|150| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
+	 *   - arch/x86/xen/enlighten_hvm.c|152| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|976| <<xen_setup_vcpu_info_placement>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|1264| <<xen_start_kernel>> per_cpu(xen_vcpu_id, 0) = 0;
+	 *   - arch/x86/xen/smp_hvm.c|44| <<xen_hvm_smp_prepare_cpus>> per_cpu(xen_vcpu_id, cpu) = XEN_VCPU_ID_INVALID;
+	 *   - include/xen/xen-ops.h|17| <<xen_vcpu_nr>> return per_cpu(xen_vcpu_id, cpu);
+	 */
 	if (cpu_acpi_id(cpu) != U32_MAX)
 		per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
 	else
@@ -175,6 +225,12 @@ static int xen_cpu_dead_hvm(unsigned int cpu)
        return 0;
 }
 
+/*
+ * called by:
+ *   - rch/x86/kernel/cpu/hypervisor.c|101| <<init_hypervisor_platform>> x86_init.hyper.init_platform();
+ *
+ * struct hypervisor_x86 x86_hyper_xen_hvm.init.init_platform = xen_hvm_guest_init()
+ */
 static void __init xen_hvm_guest_init(void)
 {
 	if (xen_pv_domain())
@@ -201,6 +257,26 @@ static void __init xen_hvm_guest_init(void)
 	WARN_ON(xen_cpuhp_setup(xen_cpu_up_prepare_hvm, xen_cpu_dead_hvm));
 	xen_unplug_emulated_devices();
 	x86_init.irqs.intr_init = xen_init_IRQ;
+
+	/*
+	 * 在oracle vm上测试的 (64个vcpu)
+	 *
+	 * 正常启动此时64个vcpu的xen_vcpu_nr(cpu)全是0
+	 * kdump启动(在cpu=51上panic)此时64个vcpu的xen_vcpu_nr(cpu)全是51
+	 *
+	 * 正常启动因为此时只有一个cpu, 对然nr_cpu_ids=64, for_each_possible_cpu()只有1个cpu
+	 * xen_vcpu_nr(0)在上面设置成了0
+	 *
+	 * kdump的时候因为设置了nr_cpus=1, 所以nr_cpu_ids=1, for_each_possible_cpu()也只有1个cpu
+	 * xen_vcpu_nr(0)在上面设置成了51
+	 */
+
+	/*
+	 * 针对普通kernel:
+	 * 在上面xen_vcpu_info_reset()的时候所有64个per_cpu(xen_vcpu_id, cpu)都是一个地址
+	 * 到了后来在每次的xen_vcpu_setup()中就不是一个地址了
+	 */
+
 	xen_hvm_init_time_ops();
 	xen_hvm_init_mmu_ops();
 
diff --git a/arch/x86/xen/enlighten_pv.c b/arch/x86/xen/enlighten_pv.c
index 4722ba2..34637d3 100644
--- a/arch/x86/xen/enlighten_pv.c
+++ b/arch/x86/xen/enlighten_pv.c
@@ -967,6 +967,11 @@ static void xen_write_msr(unsigned int msr, unsigned low, unsigned high)
 }
 
 /* This is called once we have the cpu_possible_mask */
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten_pv.c|140| <<xen_pv_guest_late_init>> xen_setup_vcpu_info_placement();
+ *   - arch/x86/xen/smp_pv.c|221| <<xen_pv_smp_prepare_boot_cpu>> xen_setup_vcpu_info_placement();
+ */
 void __init xen_setup_vcpu_info_placement(void)
 {
 	int cpu;
diff --git a/arch/x86/xen/mmu_hvm.c b/arch/x86/xen/mmu_hvm.c
index 5740937..1042cbb 100644
--- a/arch/x86/xen/mmu_hvm.c
+++ b/arch/x86/xen/mmu_hvm.c
@@ -55,6 +55,10 @@ static void xen_hvm_exit_mmap(struct mm_struct *mm)
 	WARN_ON_ONCE(rc < 0);
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/mmu_hvm.c|75| <<xen_hvm_init_mmu_ops>> if (is_pagetable_dying_supported())
+ */
 static int is_pagetable_dying_supported(void)
 {
 	struct xen_hvm_pagetable_dying a;
@@ -70,6 +74,10 @@ static int is_pagetable_dying_supported(void)
 	return 1;
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten_hvm.c|264| <<xen_hvm_guest_init>> xen_hvm_init_mmu_ops();
+ */
 void __init xen_hvm_init_mmu_ops(void)
 {
 	if (is_pagetable_dying_supported())
diff --git a/arch/x86/xen/smp_hvm.c b/arch/x86/xen/smp_hvm.c
index f8d3944..76bbf6a 100644
--- a/arch/x86/xen/smp_hvm.c
+++ b/arch/x86/xen/smp_hvm.c
@@ -7,6 +7,13 @@
 #include "smp.h"
 
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/smp.h|81| <<smp_prepare_boot_cpu>> smp_ops.smp_prepare_boot_cpu();
+ *
+ * used by:
+ *   - arch/x86/xen/smp_hvm.c|74| <<xen_hvm_smp_init>> smp_ops.smp_prepare_boot_cpu = xen_hvm_smp_prepare_boot_cpu;
+ */
 static void __init xen_hvm_smp_prepare_boot_cpu(void)
 {
 	BUG_ON(smp_processor_id() != 0);
diff --git a/arch/x86/xen/time.c b/arch/x86/xen/time.c
index befbdd8..f48a6be 100644
--- a/arch/x86/xen/time.c
+++ b/arch/x86/xen/time.c
@@ -31,6 +31,14 @@
 /* Minimum amount of time until next clock event fires */
 #define TIMER_SLOP	100000
 
+/*
+ * used by:
+ *   - arch/x86/xen/time.c|64| <<xen_sched_clock>> return xen_clocksource_read() - xen_sched_clock_offset;
+ *   - arch/x86/xen/time.c|387| <<xen_save_time_memory_area>> xen_clock_value_saved = xen_clocksource_read() - xen_sched_clock_offset;
+ *   - arch/x86/xen/time.c|429| <<xen_restore_time_memory_area>> xen_sched_clock_offset = xen_clocksource_read() - xen_clock_value_saved;
+ *   - arch/x86/xen/time.c|521| <<xen_init_time_ops>> xen_sched_clock_offset = xen_clocksource_read();
+ *   - arch/x86/xen/time.c|567| <<xen_hvm_init_time_ops>> xen_sched_clock_offset = xen_clocksource_read();
+ */
 static u64 xen_sched_clock_offset __read_mostly;
 
 /* Get the TSC speed from Xen */
@@ -42,6 +50,18 @@ static unsigned long xen_tsc_khz(void)
 	return pvclock_tsc_khz(info);
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/time.c|67| <<xen_clocksource_get_cycles>> return xen_clocksource_read();
+ *   - arch/x86/xen/time.c|72| <<xen_sched_clock>> return xen_clocksource_read() - xen_sched_clock_offset;
+ *   - arch/x86/xen/time.c|124| <<xen_pvclock_gtod_notify>> op.u.settime64.system_time = xen_clocksource_read();
+ *   - arch/x86/xen/time.c|129| <<xen_pvclock_gtod_notify>> op.u.settime32.system_time = xen_clocksource_read();
+ *   - arch/x86/xen/time.c|197| <<get_abs_timeout>> return xen_clocksource_read() + delta;
+ *   - arch/x86/xen/time.c|395| <<xen_save_time_memory_area>> xen_clock_value_saved = xen_clocksource_read() - xen_sched_clock_offset;
+ *   - arch/x86/xen/time.c|437| <<xen_restore_time_memory_area>> xen_sched_clock_offset = xen_clocksource_read() - xen_clock_value_saved;
+ *   - arch/x86/xen/time.c|529| <<xen_init_time_ops>> xen_sched_clock_offset = xen_clocksource_read();
+ *   - arch/x86/xen/time.c|575| <<xen_hvm_init_time_ops>> xen_sched_clock_offset = xen_clocksource_read();
+ */
 static u64 xen_clocksource_read(void)
 {
         struct pvclock_vcpu_time_info *src;
@@ -379,6 +399,10 @@ static const struct pv_time_ops xen_time_ops __initconst = {
 static struct pvclock_vsyscall_time_info *xen_clock __read_mostly;
 static u64 xen_clock_value_saved;
 
+/*
+ * called by:
+ *   - arch/x86/xen/suspend.c|25| <<xen_arch_pre_suspend>> xen_save_time_memory_area();
+ */
 void xen_save_time_memory_area(void)
 {
 	struct vcpu_register_time_memory_area t;
@@ -516,6 +540,10 @@ static void __init xen_time_init(void)
 		pvclock_gtod_register_notifier(&xen_pvclock_gtod_notifier);
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten_pv.c|133| <<xen_pv_init_platform>> xen_init_time_ops();
+ */
 void __init xen_init_time_ops(void)
 {
 	xen_sched_clock_offset = xen_clocksource_read();
@@ -545,6 +573,10 @@ static void xen_hvm_setup_cpu_clockevents(void)
 	xen_setup_cpu_clockevents();
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten_hvm.c|211| <<xen_hvm_guest_init>> xen_hvm_init_time_ops();
+ */
 void __init xen_hvm_init_time_ops(void)
 {
 	/*
@@ -560,6 +592,15 @@ void __init xen_hvm_init_time_ops(void)
 		return;
 	}
 
+	/*
+	 * used by:
+	 *   - arch/x86/xen/time.c|64| <<xen_sched_clock>> return xen_clocksource_read() - xen_sched_clock_offset;
+	 *   - arch/x86/xen/time.c|387| <<xen_save_time_memory_area>> xen_clock_value_saved = xen_clocksource_read() - xen_sched_clock_offset;
+	 *   - arch/x86/xen/time.c|429| <<xen_restore_time_memory_area>> xen_sched_clock_offset = xen_clocksource_read() - xen_clock_value_saved;
+	 *   - arch/x86/xen/time.c|521| <<xen_init_time_ops>> xen_sched_clock_offset = xen_clocksource_read();
+	 *   - arch/x86/xen/time.c|567| <<xen_hvm_init_time_ops>> xen_sched_clock_offset = xen_clocksource_read();
+	 *      
+	 */
 	xen_sched_clock_offset = xen_clocksource_read();
 	pv_ops.time = xen_time_ops;
 	x86_init.timers.setup_percpu_clockev = xen_time_init;
diff --git a/include/xen/xen-ops.h b/include/xen/xen-ops.h
index 4969817..b760835 100644
--- a/include/xen/xen-ops.h
+++ b/include/xen/xen-ops.h
@@ -12,8 +12,22 @@
 DECLARE_PER_CPU(struct vcpu_info *, xen_vcpu);
 
 DECLARE_PER_CPU(uint32_t, xen_vcpu_id);
+/*
+ * xen_vcpu_nr()这个函数没有设置的地方, 全是普通的调用
+ */
 static inline uint32_t xen_vcpu_nr(int cpu)
 {
+	/*
+	 * used by:
+	 *   - arch/x86/xen/enlighten_hvm.c|116| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, ebx);
+	 *   - arch/x86/xen/enlighten_hvm.c|118| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, smp_processor_id());
+	 *   - arch/x86/xen/enlighten_hvm.c|150| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
+	 *   - arch/x86/xen/enlighten_hvm.c|152| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|976| <<xen_setup_vcpu_info_placement>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|1264| <<xen_start_kernel>> per_cpu(xen_vcpu_id, 0) = 0;
+	 *   - arch/x86/xen/smp_hvm.c|44| <<xen_hvm_smp_prepare_cpus>> per_cpu(xen_vcpu_id, cpu) = XEN_VCPU_ID_INVALID;
+	 *   - include/xen/xen-ops.h|17| <<xen_vcpu_nr>> return per_cpu(xen_vcpu_id, cpu);
+	 */
 	return per_cpu(xen_vcpu_id, cpu);
 }
 
diff --git a/init/main.c b/init/main.c
index 66a196c..b2a5a14 100644
--- a/init/main.c
+++ b/init/main.c
@@ -1080,6 +1080,10 @@ void __weak free_initmem(void)
 	free_initmem_default(POISON_FREE_INITMEM);
 }
 
+/*
+ * used by:
+ *   - init/main.c|417| <<rest_init>> pid = kernel_thread(kernel_init, NULL, CLONE_FS);
+ */
 static int __ref kernel_init(void *unused)
 {
 	int ret;
diff --git a/kernel/cpu.c b/kernel/cpu.c
index ef1c565..1ab4d45 100644
--- a/kernel/cpu.c
+++ b/kernel/cpu.c
@@ -1154,6 +1154,11 @@ static int _cpu_up(unsigned int cpu, int tasks_frozen, enum cpuhp_state target)
 	return ret;
 }
 
+/*
+ * called by:
+ *   - kernel/cpu.c|1193| <<cpu_up>> return do_cpu_up(cpu, CPUHP_ONLINE);
+ *   - kernel/cpu.c|1937| <<write_cpuhp_target>> ret = do_cpu_up(dev->id, target);
+ */
 static int do_cpu_up(unsigned int cpu, enum cpuhp_state target)
 {
 	int err = 0;
-- 
2.7.4

