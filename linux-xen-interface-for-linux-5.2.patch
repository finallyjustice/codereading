From 8f14abeb0269568674fa41e992e530a0ab014cca Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Thu, 25 Jul 2019 16:07:57 +0800
Subject: [PATCH 1/1] linux-xen-interface-for-linux-5.2

xen specific interface v5.2

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/xen/enlighten.c     | 73 ++++++++++++++++++++++++++++++++++++++++++++
 arch/x86/xen/enlighten_hvm.c | 47 ++++++++++++++++++++++++++++
 arch/x86/xen/enlighten_pv.c  |  5 +++
 arch/x86/xen/time.c          | 12 ++++++++
 include/xen/xen-ops.h        | 14 +++++++++
 5 files changed, 151 insertions(+)

diff --git a/arch/x86/xen/enlighten.c b/arch/x86/xen/enlighten.c
index 750f46a..c12d46b 100644
--- a/arch/x86/xen/enlighten.c
+++ b/arch/x86/xen/enlighten.c
@@ -38,6 +38,31 @@ EXPORT_SYMBOL_GPL(hypercall_page);
  * hypercall.
  *
  */
+/*
+ * used by:
+ *   - arch/x86/xen/enlighten.c|202| <<xen_vcpu_info_reset>> per_cpu(xen_vcpu, cpu) =
+ *   - arch/x86/xen/enlighten.c|206| <<xen_vcpu_info_reset>> per_cpu(xen_vcpu, cpu) = NULL;
+ *   - arch/x86/xen/enlighten.c|230| <<xen_vcpu_setup>> if (per_cpu(xen_vcpu, cpu) == &per_cpu(xen_vcpu_info, cpu))
+ *   - arch/x86/xen/enlighten.c|261| <<xen_vcpu_setup>> per_cpu(xen_vcpu, cpu) = vcpup;
+ *   - arch/x86/xen/enlighten.c|268| <<xen_vcpu_setup>> return ((per_cpu(xen_vcpu, cpu) == NULL) ? -ENODEV : 0);
+ *   - arch/x86/xen/enlighten_pv.c|1421| <<xen_cpu_up_prepare_pv>> if (per_cpu(xen_vcpu, cpu) == NULL)
+ *   - arch/x86/xen/irq.c|32| <<xen_save_fl>> vcpu = this_cpu_read(xen_vcpu);
+ *   - arch/x86/xen/irq.c|54| <<xen_restore_fl>> vcpu = this_cpu_read(xen_vcpu);
+ *   - arch/x86/xen/irq.c|73| <<xen_irq_disable>> this_cpu_read(xen_vcpu)->evtchn_upcall_mask = 1;
+ *   - arch/x86/xen/irq.c|89| <<xen_irq_enable>> vcpu = this_cpu_read(xen_vcpu);
+ *   - arch/x86/xen/mmu_pv.c|1307| <<xen_write_cr2>> this_cpu_read(xen_vcpu)->arch.cr2 = cr2;
+ *   - arch/x86/xen/mmu_pv.c|1312| <<xen_read_cr2>> return this_cpu_read(xen_vcpu)->arch.cr2;
+ *   - arch/x86/xen/smp_pv.c|379| <<xen_pv_cpu_up>> per_cpu(xen_vcpu, cpu)->evtchn_upcall_mask = 1;
+ *   - arch/x86/xen/time.c|51| <<xen_clocksource_read>> src = &__this_cpu_read(xen_vcpu)->time;
+ *   - arch/x86/xen/time.c|73| <<xen_read_wallclock>> vcpu_time = &get_cpu_var(xen_vcpu)->time;
+ *   - arch/x86/xen/time.c|75| <<xen_read_wallclock>> put_cpu_var(xen_vcpu);
+ *   - arch/x86/xen/time.c|503| <<xen_time_init>> pvti = &__this_cpu_read(xen_vcpu)->time;
+ *   - drivers/xen/events/events_2l.c|121| <<evtchn_2l_unmask>> struct vcpu_info *vcpu_info = __this_cpu_read(xen_vcpu);
+ *   - drivers/xen/events/events_2l.c|171| <<evtchn_2l_handle_events>> struct vcpu_info *vcpu_info = __this_cpu_read(xen_vcpu);
+ *   - drivers/xen/events/events_2l.c|281| <<xen_debug_interrupt>> v = per_cpu(xen_vcpu, i);
+ *   - drivers/xen/events/events_2l.c|290| <<xen_debug_interrupt>> v = per_cpu(xen_vcpu, cpu);
+ *   - drivers/xen/events/events_base.c|1220| <<__xen_evtchn_do_upcall>> struct vcpu_info *vcpu_info = __this_cpu_read(xen_vcpu);
+ */
 DEFINE_PER_CPU(struct vcpu_info *, xen_vcpu);
 
 /*
@@ -45,9 +70,29 @@ DEFINE_PER_CPU(struct vcpu_info *, xen_vcpu);
  * hypercall. This can be used both in PV and PVHVM mode. The structure
  * overrides the default per_cpu(xen_vcpu, cpu) value.
  */
+/*
+ * used by:
+ *   - arch/x86/xen/enlighten.c|230| <<xen_vcpu_setup>> if (per_cpu(xen_vcpu, cpu) == &per_cpu(xen_vcpu_info, cpu))
+ *   - arch/x86/xen/enlighten.c|235| <<xen_vcpu_setup>> vcpup = &per_cpu(xen_vcpu_info, cpu);
+ *   - arch/x86/xen/mmu_pv.c|1317| <<xen_read_cr2_direct>> return this_cpu_read(xen_vcpu_info.arch.cr2);
+ *
+ * 在x86下除了特殊的xen_read_cr2_direct(), 只在xen_vcpu_setup()被用到
+ * 其他通过上面的percpu的xen_vcpu指针引用
+ */
 DEFINE_PER_CPU(struct vcpu_info, xen_vcpu_info);
 
 /* Linux <-> Xen vCPU id mapping */
+/*
+ * used by:
+ *   - arch/x86/xen/enlighten_hvm.c|116| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, ebx);
+ *   - arch/x86/xen/enlighten_hvm.c|118| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, smp_processor_id());
+ *   - arch/x86/xen/enlighten_hvm.c|150| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
+ *   - arch/x86/xen/enlighten_hvm.c|152| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu;
+ *   - arch/x86/xen/enlighten_pv.c|976| <<xen_setup_vcpu_info_placement>> per_cpu(xen_vcpu_id, cpu) = cpu;
+ *   - arch/x86/xen/enlighten_pv.c|1264| <<xen_start_kernel>> per_cpu(xen_vcpu_id, 0) = 0;
+ *   - arch/x86/xen/smp_hvm.c|44| <<xen_hvm_smp_prepare_cpus>> per_cpu(xen_vcpu_id, cpu) = XEN_VCPU_ID_INVALID;
+ *   - include/xen/xen-ops.h|17| <<xen_vcpu_nr>> return per_cpu(xen_vcpu_id, cpu);
+ */
 DEFINE_PER_CPU(uint32_t, xen_vcpu_id);
 EXPORT_PER_CPU_SYMBOL(xen_vcpu_id);
 
@@ -120,6 +165,10 @@ int xen_cpuhp_setup(int (*cpu_up_prepare_cb)(unsigned int),
 	return rc >= 0 ? 0 : rc;
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten.c|214| <<xen_vcpu_restore>> rc = xen_vcpu_setup_restore(cpu);
+ */
 static int xen_vcpu_setup_restore(int cpu)
 {
 	int rc = 0;
@@ -185,6 +234,16 @@ void xen_vcpu_restore(void)
 	}
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten.c|173| <<xen_vcpu_setup_restore>> xen_vcpu_info_reset(cpu);
+ *   - arch/x86/xen/enlighten.c|307| <<xen_vcpu_setup>> xen_vcpu_info_reset(cpu);
+ *   - arch/x86/xen/enlighten_hvm.c|82| <<xen_hvm_init_mem_mapping>> xen_vcpu_info_reset(0);
+ *   - arch/x86/xen/enlighten_hvm.c|196| <<xen_hvm_guest_init>> xen_vcpu_info_reset(0);
+ *   - arch/x86/xen/enlighten_pv.c|130| <<xen_pv_init_platform>> xen_vcpu_info_reset(0);
+ *   - arch/x86/xen/enlighten_pv.c|1219| <<xen_start_kernel>> xen_vcpu_info_reset(0);
+ *   - arch/x86/xen/smp.c|141| <<xen_smp_cpus_done>> xen_vcpu_info_reset(cpu);
+ */
 void xen_vcpu_info_reset(int cpu)
 {
 	if (xen_vcpu_nr(cpu) < MAX_VIRT_CPUS) {
@@ -196,12 +255,26 @@ void xen_vcpu_info_reset(int cpu)
 	}
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten.c|147| <<xen_vcpu_setup_restore>> rc = xen_vcpu_setup(cpu);
+ *   - arch/x86/xen/enlighten_hvm.c|153| <<xen_cpu_up_prepare_hvm>> rc = xen_vcpu_setup(cpu);
+ *   - arch/x86/xen/enlighten_pv.c|986| <<xen_setup_vcpu_info_placement>> (void ) xen_vcpu_setup(cpu);
+ *   - arch/x86/xen/smp_hvm.c|19| <<xen_hvm_smp_prepare_boot_cpu>> xen_vcpu_setup(0);
+ */
 int xen_vcpu_setup(int cpu)
 {
 	struct vcpu_register_vcpu_info info;
 	int err;
 	struct vcpu_info *vcpup;
 
+	/*
+	 * kdump从30来panic时, 这里参数cpu=0, 但是xen_vcpu_nr(0)=30!!
+	 * [0] xen_vcpu_setup
+	 * [0] start_kernel
+	 * [0] secondary_startup_64
+	 */
+
 	BUG_ON(HYPERVISOR_shared_info == &xen_dummy_shared_info);
 
 	/*
diff --git a/arch/x86/xen/enlighten_hvm.c b/arch/x86/xen/enlighten_hvm.c
index 0e75642..09e0394 100644
--- a/arch/x86/xen/enlighten_hvm.c
+++ b/arch/x86/xen/enlighten_hvm.c
@@ -82,6 +82,10 @@ static void __init xen_hvm_init_mem_mapping(void)
 	xen_vcpu_info_reset(0);
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten_hvm.c|186| <<xen_hvm_guest_init>> init_hvm_pv_info();
+ */
 static void __init init_hvm_pv_info(void)
 {
 	int major, minor;
@@ -111,6 +115,17 @@ static void __init init_hvm_pv_info(void)
 
 	xen_setup_features();
 
+	/*
+	 * used by:
+	 *   - arch/x86/xen/enlighten_hvm.c|116| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, ebx);
+	 *   - arch/x86/xen/enlighten_hvm.c|118| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, smp_processor_id());
+	 *   - arch/x86/xen/enlighten_hvm.c|150| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
+	 *   - arch/x86/xen/enlighten_hvm.c|152| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|976| <<xen_setup_vcpu_info_placement>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|1264| <<xen_start_kernel>> per_cpu(xen_vcpu_id, 0) = 0;
+	 *   - arch/x86/xen/smp_hvm.c|44| <<xen_hvm_smp_prepare_cpus>> per_cpu(xen_vcpu_id, cpu) = XEN_VCPU_ID_INVALID;
+	 *   - include/xen/xen-ops.h|17| <<xen_vcpu_nr>> return per_cpu(xen_vcpu_id, cpu);
+	 */
 	cpuid(base + 4, &eax, &ebx, &ecx, &edx);
 	if (eax & XEN_HVM_CPUID_VCPU_ID_PRESENT)
 		this_cpu_write(xen_vcpu_id, ebx);
@@ -133,6 +148,10 @@ static void xen_hvm_crash_shutdown(struct pt_regs *regs)
 }
 #endif
 
+/*
+ * used by only:
+ *   - arch/x86/xen/enlighten_hvm.c|208| <<xen_hvm_guest_init>> WARN_ON(xen_cpuhp_setup(xen_cpu_up_prepare_hvm, xen_cpu_dead_hvm));
+ */
 static int xen_cpu_up_prepare_hvm(unsigned int cpu)
 {
 	int rc = 0;
@@ -146,6 +165,17 @@ static int xen_cpu_up_prepare_hvm(unsigned int cpu)
 		xen_uninit_lock_cpu(cpu);
 	}
 
+	/*
+	 * 使用percpu的xen_vcpu_id的地方:
+	 *   - arch/x86/xen/enlighten_hvm.c|116| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, ebx);
+	 *   - arch/x86/xen/enlighten_hvm.c|118| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, smp_processor_id());
+	 *   - arch/x86/xen/enlighten_hvm.c|150| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
+	 *   - arch/x86/xen/enlighten_hvm.c|152| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|976| <<xen_setup_vcpu_info_placement>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|1264| <<xen_start_kernel>> per_cpu(xen_vcpu_id, 0) = 0;
+	 *   - arch/x86/xen/smp_hvm.c|44| <<xen_hvm_smp_prepare_cpus>> per_cpu(xen_vcpu_id, cpu) = XEN_VCPU_ID_INVALID;
+	 *   - include/xen/xen-ops.h|17| <<xen_vcpu_nr>> return per_cpu(xen_vcpu_id, cpu);
+	 */
 	if (cpu_acpi_id(cpu) != U32_MAX)
 		per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
 	else
@@ -175,6 +205,9 @@ static int xen_cpu_dead_hvm(unsigned int cpu)
        return 0;
 }
 
+/*
+ * struct hypervisor_x86 x86_hyper_xen_hvm.init.init_platform = xen_hvm_guest_init()
+ */
 static void __init xen_hvm_guest_init(void)
 {
 	if (xen_pv_domain())
@@ -201,6 +234,20 @@ static void __init xen_hvm_guest_init(void)
 	WARN_ON(xen_cpuhp_setup(xen_cpu_up_prepare_hvm, xen_cpu_dead_hvm));
 	xen_unplug_emulated_devices();
 	x86_init.irqs.intr_init = xen_init_IRQ;
+
+	/*
+	 * 在oracle vm上测试的 (64个vcpu)
+	 *
+	 * 正常启动此时64个vcpu的xen_vcpu_nr(cpu)全是0
+	 * kdump启动(在cpu=51上panic)此时64个vcpu的xen_vcpu_nr(cpu)全是51
+	 *
+	 * 正常启动因为此时只有一个cpu, 对然nr_cpu_ids=64, for_each_possible_cpu()只有1个cpu
+	 * xen_vcpu_nr(0)在上面设置成了0
+	 *
+	 * kdump的时候因为设置了nr_cpus=1, 所以nr_cpu_ids=1, for_each_possible_cpu()也只有1个cpu
+	 * xen_vcpu_nr(0)在上面设置成了51
+	 */
+
 	xen_hvm_init_time_ops();
 	xen_hvm_init_mmu_ops();
 
diff --git a/arch/x86/xen/enlighten_pv.c b/arch/x86/xen/enlighten_pv.c
index 4722ba2..34637d3 100644
--- a/arch/x86/xen/enlighten_pv.c
+++ b/arch/x86/xen/enlighten_pv.c
@@ -967,6 +967,11 @@ static void xen_write_msr(unsigned int msr, unsigned low, unsigned high)
 }
 
 /* This is called once we have the cpu_possible_mask */
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten_pv.c|140| <<xen_pv_guest_late_init>> xen_setup_vcpu_info_placement();
+ *   - arch/x86/xen/smp_pv.c|221| <<xen_pv_smp_prepare_boot_cpu>> xen_setup_vcpu_info_placement();
+ */
 void __init xen_setup_vcpu_info_placement(void)
 {
 	int cpu;
diff --git a/arch/x86/xen/time.c b/arch/x86/xen/time.c
index befbdd8..ba0730a 100644
--- a/arch/x86/xen/time.c
+++ b/arch/x86/xen/time.c
@@ -31,6 +31,14 @@
 /* Minimum amount of time until next clock event fires */
 #define TIMER_SLOP	100000
 
+/*
+ * used by:
+ *   - arch/x86/xen/time.c|64| <<xen_sched_clock>> return xen_clocksource_read() - xen_sched_clock_offset;
+ *   - arch/x86/xen/time.c|387| <<xen_save_time_memory_area>> xen_clock_value_saved = xen_clocksource_read() - xen_sched_clock_offset;
+ *   - arch/x86/xen/time.c|429| <<xen_restore_time_memory_area>> xen_sched_clock_offset = xen_clocksource_read() - xen_clock_value_saved;
+ *   - arch/x86/xen/time.c|521| <<xen_init_time_ops>> xen_sched_clock_offset = xen_clocksource_read();
+ *   - arch/x86/xen/time.c|567| <<xen_hvm_init_time_ops>> xen_sched_clock_offset = xen_clocksource_read();
+ */
 static u64 xen_sched_clock_offset __read_mostly;
 
 /* Get the TSC speed from Xen */
@@ -545,6 +553,10 @@ static void xen_hvm_setup_cpu_clockevents(void)
 	xen_setup_cpu_clockevents();
 }
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten_hvm.c|211| <<xen_hvm_guest_init>> xen_hvm_init_time_ops();
+ */
 void __init xen_hvm_init_time_ops(void)
 {
 	/*
diff --git a/include/xen/xen-ops.h b/include/xen/xen-ops.h
index 4969817..b760835 100644
--- a/include/xen/xen-ops.h
+++ b/include/xen/xen-ops.h
@@ -12,8 +12,22 @@
 DECLARE_PER_CPU(struct vcpu_info *, xen_vcpu);
 
 DECLARE_PER_CPU(uint32_t, xen_vcpu_id);
+/*
+ * xen_vcpu_nr()这个函数没有设置的地方, 全是普通的调用
+ */
 static inline uint32_t xen_vcpu_nr(int cpu)
 {
+	/*
+	 * used by:
+	 *   - arch/x86/xen/enlighten_hvm.c|116| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, ebx);
+	 *   - arch/x86/xen/enlighten_hvm.c|118| <<init_hvm_pv_info>> this_cpu_write(xen_vcpu_id, smp_processor_id());
+	 *   - arch/x86/xen/enlighten_hvm.c|150| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu_acpi_id(cpu);
+	 *   - arch/x86/xen/enlighten_hvm.c|152| <<xen_cpu_up_prepare_hvm>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|976| <<xen_setup_vcpu_info_placement>> per_cpu(xen_vcpu_id, cpu) = cpu;
+	 *   - arch/x86/xen/enlighten_pv.c|1264| <<xen_start_kernel>> per_cpu(xen_vcpu_id, 0) = 0;
+	 *   - arch/x86/xen/smp_hvm.c|44| <<xen_hvm_smp_prepare_cpus>> per_cpu(xen_vcpu_id, cpu) = XEN_VCPU_ID_INVALID;
+	 *   - include/xen/xen-ops.h|17| <<xen_vcpu_nr>> return per_cpu(xen_vcpu_id, cpu);
+	 */
 	return per_cpu(xen_vcpu_id, cpu);
 }
 
-- 
2.7.4

