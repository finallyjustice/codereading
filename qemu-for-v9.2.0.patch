From 1eb2940d8e32f457493613d03bb9a5826ceed2c8 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Mon, 24 Mar 2025 08:07:19 -0700
Subject: [PATCH 1/1] qemu for v9.2.0

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 accel/kvm/kvm-accel-ops.c         |   4 +
 accel/kvm/kvm-all.c               |  31 ++
 accel/tcg/plugin-gen.c            |   4 +
 backends/hostmem-ram.c            |   4 +
 block/block-backend.c             |  22 ++
 cpu-common.c                      |  71 +++++
 cpu-target.c                      |  22 ++
 dump/dump.c                       |  36 +++
 hw/core/cpu-common.c              |  82 +++++
 hw/i386/fw_cfg.c                  |   4 +
 hw/net/virtio-net.c               |  11 +
 hw/pci/msi.c                      |  39 +++
 hw/pci/msix.c                     | 145 +++++++++
 hw/scsi/vhost-scsi-common.c       |   3 +
 hw/scsi/vhost-scsi.c              | 230 ++++++++++++++
 hw/scsi/vhost-user-scsi.c         |   9 +
 hw/scsi/virtio-scsi.c             |  93 ++++++
 hw/vfio/common.c                  |   7 +
 hw/vfio/pci.c                     | 120 ++++++++
 hw/vfio/pci.h                     |   9 +
 hw/virtio/vhost-scsi-pci.c        |  33 +++
 hw/virtio/vhost-user.c            |  10 +
 hw/virtio/vhost.c                 | 249 ++++++++++++++++
 hw/virtio/virtio-config-io.c      |   3 +
 hw/virtio/virtio-pci.c            |  76 +++++
 hw/virtio/virtio.c                | 313 +++++++++++++++++++
 include/exec/memory.h             |  15 +
 include/exec/ramblock.h           |  69 +++++
 include/hw/core/cpu.h             |  22 ++
 include/hw/pci/pci_device.h       |  31 ++
 include/hw/virtio/vhost.h         |  19 ++
 include/hw/virtio/virtio-access.h |  82 +++++
 include/hw/virtio/virtio-scsi.h   |   8 +
 include/net/filter.h              |  10 +
 include/sysemu/dump.h             |  22 ++
 migration/migration.c             |  45 +++
 migration/migration.h             |   7 +
 migration/multifd-nocomp.c        |  20 ++
 migration/options.c               |  33 +++
 migration/qemu-file.c             | 110 +++++++
 migration/ram.c                   | 298 +++++++++++++++++++
 migration/rdma.c                  |  25 ++
 migration/savevm.c                | 100 +++++++
 net/dump.c                        |  18 ++
 net/filter.c                      |  16 +
 net/net.c                         |  36 +++
 qom/object.c                      |  35 +++
 system/cpus.c                     |  53 ++++
 system/dma-helpers.c              |  17 ++
 system/memory.c                   |  21 ++
 system/physmem.c                  | 178 +++++++++++
 target/arm/arm-qmp-cmds.c         |  18 ++
 target/arm/cpu64.c                |   4 +
 target/arm/kvm.c                  |  46 +++
 target/i386/cpu-sysemu.c          |  39 +++
 target/i386/cpu.c                 | 478 ++++++++++++++++++++++++++++++
 target/i386/cpu.h                 |  41 +++
 target/i386/host-cpu.c            |  12 +
 target/i386/kvm/kvm.c             | 281 ++++++++++++++++++
 target/i386/kvm/vmsr_energy.c     |  10 +
 target/i386/machine.c             |  18 ++
 target/i386/tcg/misc_helper.c     |   3 +
 util/iov.c                        |  67 +++++
 util/main-loop.c                  |  13 +
 util/qemu-coroutine-io.c          |   5 +
 util/qemu-coroutine-lock.c        |   7 +
 util/qemu-coroutine.c             | 140 +++++++++
 67 files changed, 4102 insertions(+)

diff --git a/accel/kvm/kvm-accel-ops.c b/accel/kvm/kvm-accel-ops.c
index c239dfc87..3e812dc88 100644
--- a/accel/kvm/kvm-accel-ops.c
+++ b/accel/kvm/kvm-accel-ops.c
@@ -26,6 +26,10 @@
 #include <linux/kvm.h>
 #include "kvm-cpus.h"
 
+/*
+ * 在以下使用kvm_vcpu_thread_fn():
+ *   - accel/kvm/kvm-accel-ops.c|71| <<kvm_start_vcpu_thread>> qemu_thread_create(cpu->thread, thread_name, kvm_vcpu_thread_fn,
+ */
 static void *kvm_vcpu_thread_fn(void *arg)
 {
     CPUState *cpu = arg;
diff --git a/accel/kvm/kvm-all.c b/accel/kvm/kvm-all.c
index 801cff16a..bc809c494 100644
--- a/accel/kvm/kvm-all.c
+++ b/accel/kvm/kvm-all.c
@@ -437,6 +437,11 @@ int kvm_unpark_vcpu(KVMState *s, unsigned long vcpu_id)
     return kvm_fd;
 }
 
+/*
+ * called by:
+ *   - accel/kvm/kvm-all.c|472| <<kvm_create_and_park_vcpu>> ret = kvm_create_vcpu(cpu);
+ *   - accel/kvm/kvm-all.c|533| <<kvm_init_vcpu>> ret = kvm_create_vcpu(cpu);
+ */
 int kvm_create_vcpu(CPUState *cpu)
 {
     unsigned long vcpu_id = kvm_arch_vcpu_id(cpu);
@@ -465,6 +470,10 @@ int kvm_create_vcpu(CPUState *cpu)
     return 0;
 }
 
+/*
+ * called by:
+ *   - target/ppc/kvm.c|2361| <<kvmppc_cpu_realize>> ret = kvm_create_and_park_vcpu(cs);
+ */
 int kvm_create_and_park_vcpu(CPUState *cpu)
 {
     int ret = 0;
@@ -522,6 +531,10 @@ void kvm_destroy_vcpu(CPUState *cpu)
     }
 }
 
+/*
+ * called by:
+ *   - accel/kvm/kvm-accel-ops.c|41| <<kvm_vcpu_thread_fn>> r = kvm_init_vcpu(cpu, &error_fatal);
+ */
 int kvm_init_vcpu(CPUState *cpu, Error **errp)
 {
     KVMState *s = kvm_state;
@@ -530,6 +543,11 @@ int kvm_init_vcpu(CPUState *cpu, Error **errp)
 
     trace_kvm_init_vcpu(cpu->cpu_index, kvm_arch_vcpu_id(cpu));
 
+    /*
+     * called by:
+     *   - accel/kvm/kvm-all.c|472| <<kvm_create_and_park_vcpu>> ret = kvm_create_vcpu(cpu);
+     *   - accel/kvm/kvm-all.c|533| <<kvm_init_vcpu>> ret = kvm_create_vcpu(cpu);
+     */
     ret = kvm_create_vcpu(cpu);
     if (ret < 0) {
         error_setg_errno(errp, -ret,
@@ -1531,6 +1549,19 @@ static void kvm_set_phys_mem(KVMMemoryListener *kml,
         mem->ram_start_offset = ram_start_offset;
         mem->ram = ram;
         mem->flags = kvm_mem_flags(mr);
+        /*
+	 * 在以下使用RAMBlock->guest_memfd:
+         *   - system/physmem.c|2170| <<qemu_ram_alloc_internal>> new_block->guest_memfd = -1;
+         *   - accel/kvm/kvm-all.c|1534| <<kvm_set_phys_mem>> mem->guest_memfd = mr->ram_block->guest_memfd;
+         *   - system/memory.c|1895| <<memory_region_has_guest_memfd>> return mr->ram_block && mr->ram_block->guest_memfd >= 0;
+         *   - system/physmem.c|1954| <<ram_block_add>> assert(new_block->guest_memfd < 0);
+         *   - system/physmem.c|1964| <<ram_block_add>> new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
+         *   - system/physmem.c|1966| <<ram_block_add>> if (new_block->guest_memfd < 0) {
+         *   - system/physmem.c|2075| <<qemu_ram_alloc_from_fd>> new_block->guest_memfd = -1;
+         *   - system/physmem.c|2237| <<reclaim_ramblock>> if (block->guest_memfd >= 0) {
+         *   - system/physmem.c|2238| <<reclaim_ramblock>> close(block->guest_memfd);
+         *   - system/physmem.c|3847| <<ram_block_discard_guest_memfd_range>> ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
+	 */
         mem->guest_memfd = mr->ram_block->guest_memfd;
         mem->guest_memfd_offset = (uint8_t*)ram - mr->ram_block->host;
 
diff --git a/accel/tcg/plugin-gen.c b/accel/tcg/plugin-gen.c
index 0f47bfbb4..1f55ea684 100644
--- a/accel/tcg/plugin-gen.c
+++ b/accel/tcg/plugin-gen.c
@@ -45,6 +45,10 @@ void plugin_gen_disable_mem_helpers(void)
     }
 }
 
+/*
+ * called by:
+ *   - accel/tcg/plugin-gen.c|326| <<plugin_gen_inject>> gen_enable_mem_helper(plugin_tb, insn);
+ */
 static void gen_enable_mem_helper(struct qemu_plugin_tb *ptb,
                                   struct qemu_plugin_insn *insn)
 {
diff --git a/backends/hostmem-ram.c b/backends/hostmem-ram.c
index f7d81af78..bccb6b43e 100644
--- a/backends/hostmem-ram.c
+++ b/backends/hostmem-ram.c
@@ -16,6 +16,10 @@
 #include "qemu/module.h"
 #include "qom/object_interfaces.h"
 
+/*
+ * 在以下使用ram_backend_memory_alloc():
+ *   - backends/hostmem-ram.c|44| <<ram_backend_class_init>> bc->alloc = ram_backend_memory_alloc;
+ */
 static bool
 ram_backend_memory_alloc(HostMemoryBackend *backend, Error **errp)
 {
diff --git a/block/block-backend.c b/block/block-backend.c
index 85bcdedce..8e915f9da 100644
--- a/block/block-backend.c
+++ b/block/block-backend.c
@@ -2363,6 +2363,28 @@ bool blk_op_is_blocked(BlockBackend *blk, BlockOpType op, Error **errp)
  * which creates a drained section.  Therefore, incrementing such a BB's
  * in-flight counter will prevent its context from changing.
  */
+/*
+ * 非unittest的调用:
+ *   - block/block-backend.c|318| <<blk_root_get_parent_aio_context>> return blk_get_aio_context(blk);
+ *   - block/block-backend.c|2070| <<blk_drain>> AIO_WAIT_WHILE(blk_get_aio_context(blk), qatomic_read(&blk->in_flight) > 0);
+ *   - block/block-backend.c|2702| <<blk_io_limits_enable>> throttle_group_register_tgm(&blk->public.throttle_group_member, group, blk_get_aio_context(blk));
+ *   - block/export/fuse.c|97| <<fuse_export_drained_end>> exp->common.ctx = blk_get_aio_context(exp->common.blk);
+ *   - hw/core/qdev-properties-system.c|139| <<set_drive_helper>> ctx = blk_get_aio_context(blk);
+ *   - hw/ide/core.c|971| <<ide_dma_cb>> s->bus->dma->aiocb = dma_blk_io(blk_get_aio_context(s->blk),
+ *   - hw/ide/macio.c|190| <<pmac_ide_transfer_cb>> s->bus->dma->aiocb = dma_blk_io(blk_get_aio_context(s->blk), &s->sg,
+ *   - hw/scsi/scsi-bus.c|128| <<scsi_device_for_each_req_async_bh>> ctx = blk_get_aio_context(s->conf.blk);
+ *   - hw/scsi/scsi-bus.c|169| <<scsi_device_for_each_req_async_bh>> aio_bh_schedule_oneshot(blk_get_aio_context(s->conf.blk),
+ *   - hw/scsi/scsi-disk.c|333| <<scsi_aio_complete>> assert(blk_get_aio_context(s->qdev.conf.blk) ==
+ *   - hw/scsi/scsi-disk.c|438| <<scsi_read_complete_noio>> assert(blk_get_aio_context(s->qdev.conf.blk) ==
+ *   - hw/scsi/scsi-disk.c|491| <<scsi_do_read>> r->req.aiocb = dma_blk_io(blk_get_aio_context(s->qdev.conf.blk),
+ *   - hw/scsi/scsi-disk.c|571| <<scsi_write_complete_noio>> assert(blk_get_aio_context(s->qdev.conf.blk) ==
+ *   - hw/scsi/scsi-disk.c|654| <<scsi_write_data>> r->req.aiocb = dma_blk_io(blk_get_aio_context(s->qdev.conf.blk),
+ *   - hw/scsi/scsi-disk.c|2532| <<scsi_realize>> if (blk_get_aio_context(s->qdev.conf.blk) != qemu_get_aio_context() &&
+ *   - hw/scsi/virtio-scsi.c|361| <<virtio_scsi_ctx_check>> assert(blk_get_aio_context(d->conf.blk) == s->ctx);
+ *   - qemu-io-cmds.c|2579| <<wait_break_f>> aio_poll(blk_get_aio_context(blk), true);
+ *   - system/dma-helpers.c|263| <<wait_break_f>> return dma_blk_io(blk_get_aio_context(blk), sg, offset, align,
+ *   - system/dma-helpers.c|281| <<wait_break_f>> return dma_blk_io(blk_get_aio_context(blk), sg, offset, align,
+ */
 AioContext *blk_get_aio_context(BlockBackend *blk)
 {
     IO_CODE();
diff --git a/cpu-common.c b/cpu-common.c
index 0d607bbe4..bc6ea2a4e 100644
--- a/cpu-common.c
+++ b/cpu-common.c
@@ -131,9 +131,28 @@ struct qemu_work_item {
     bool free, exclusive, done;
 };
 
+/*
+ * called by:
+ *   - cpu-common.c|173| <<do_run_on_cpu>> queue_work_on_cpu(cpu, &wi);
+ *   - cpu-common.c|191| <<async_run_on_cpu>> queue_work_on_cpu(cpu, wi);
+ *   - cpu-common.c|348| <<async_safe_run_on_cpu>> queue_work_on_cpu(cpu, wi);
+ */
 static void queue_work_on_cpu(CPUState *cpu, struct qemu_work_item *wi)
 {
     qemu_mutex_lock(&cpu->work_mutex);
+    /*
+     * 在以下使用CPUState->work_list:
+     *   - cpu-common.c|137| <<queue_work_on_cpu>> QSIMPLEQ_INSERT_TAIL(&cpu->work_list, wi, node);
+     *   - cpu-common.c|340| <<free_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|341| <<free_queued_cpu_work>> struct qemu_work_item *wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|342| <<free_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - cpu-common.c|354| <<process_queued_cpu_work>> if (QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|358| <<process_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|359| <<process_queued_cpu_work>> wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|360| <<process_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - hw/core/cpu-common.c|257| <<cpu_common_initfn>> QSIMPLEQ_INIT(&cpu->work_list);
+     *   - system/cpus.c|83| <<cpu_work_list_empty>> return QSIMPLEQ_EMPTY_ATOMIC(&cpu->work_list);
+     */
     QSIMPLEQ_INSERT_TAIL(&cpu->work_list, wi, node);
     wi->done = false;
     qemu_mutex_unlock(&cpu->work_mutex);
@@ -337,6 +356,19 @@ void async_safe_run_on_cpu(CPUState *cpu, run_on_cpu_func func,
 
 void free_queued_cpu_work(CPUState *cpu)
 {
+    /*
+     * 在以下使用CPUState->work_list:
+     *   - cpu-common.c|137| <<queue_work_on_cpu>> QSIMPLEQ_INSERT_TAIL(&cpu->work_list, wi, node);
+     *   - cpu-common.c|340| <<free_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|341| <<free_queued_cpu_work>> struct qemu_work_item *wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|342| <<free_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - cpu-common.c|354| <<process_queued_cpu_work>> if (QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|358| <<process_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|359| <<process_queued_cpu_work>> wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|360| <<process_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - hw/core/cpu-common.c|257| <<cpu_common_initfn>> QSIMPLEQ_INIT(&cpu->work_list);
+     *   - system/cpus.c|83| <<cpu_work_list_empty>> return QSIMPLEQ_EMPTY_ATOMIC(&cpu->work_list);
+     */
     while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
         struct qemu_work_item *wi = QSIMPLEQ_FIRST(&cpu->work_list);
         QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
@@ -346,11 +378,50 @@ void free_queued_cpu_work(CPUState *cpu)
     }
 }
 
+/*
+ * called by:
+ *   - bsd-user/aarch64/target_arch_cpu.h|57| <<target_cpu_loop>> process_queued_cpu_work(cs);
+ *   - bsd-user/arm/target_arch_cpu.h|49| <<target_cpu_loop>> process_queued_cpu_work(cs);
+ *   - bsd-user/i386/target_arch_cpu.h|116| <<target_cpu_loop>> process_queued_cpu_work(cs);
+ *   - bsd-user/riscv/target_arch_cpu.h|52| <<target_cpu_loop>> process_queued_cpu_work(cs);
+ *   - bsd-user/x86_64/target_arch_cpu.h|124| <<target_cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/aarch64/cpu_loop.c|89| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/alpha/cpu_loop.c|38| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/arm/cpu_loop.c|331| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/hexagon/cpu_loop.c|39| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/hppa/cpu_loop.c|122| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/i386/cpu_loop.c|217| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/loongarch64/cpu_loop.c|24| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/m68k/cpu_loop.c|36| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/microblaze/cpu_loop.c|35| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/mips/cpu_loop.c|77| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/openrisc/cpu_loop.c|36| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/ppc/cpu_loop.c|80| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/riscv/cpu_loop.c|39| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/s390x/cpu_loop.c|67| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/sh4/cpu_loop.c|37| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/sparc/cpu_loop.c|223| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - linux-user/xtensa/cpu_loop.c|136| <<cpu_loop>> process_queued_cpu_work(cs);
+ *   - system/cpus.c|453| <<qemu_wait_io_event_common>> process_queued_cpu_work(cpu);
+ */
 void process_queued_cpu_work(CPUState *cpu)
 {
     struct qemu_work_item *wi;
 
     qemu_mutex_lock(&cpu->work_mutex);
+    /*
+     * 在以下使用CPUState->work_list:
+     *   - cpu-common.c|137| <<queue_work_on_cpu>> QSIMPLEQ_INSERT_TAIL(&cpu->work_list, wi, node);
+     *   - cpu-common.c|340| <<free_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|341| <<free_queued_cpu_work>> struct qemu_work_item *wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|342| <<free_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - cpu-common.c|354| <<process_queued_cpu_work>> if (QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|358| <<process_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|359| <<process_queued_cpu_work>> wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|360| <<process_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - hw/core/cpu-common.c|257| <<cpu_common_initfn>> QSIMPLEQ_INIT(&cpu->work_list);
+     *   - system/cpus.c|83| <<cpu_work_list_empty>> return QSIMPLEQ_EMPTY_ATOMIC(&cpu->work_list);
+     */
     if (QSIMPLEQ_EMPTY(&cpu->work_list)) {
         qemu_mutex_unlock(&cpu->work_mutex);
         return;
diff --git a/cpu-target.c b/cpu-target.c
index 499facf77..fc20b31b7 100644
--- a/cpu-target.c
+++ b/cpu-target.c
@@ -131,6 +131,28 @@ const VMStateDescription vmstate_cpu_common = {
 };
 #endif
 
+/*
+ * called by:
+ *   - target/alpha/cpu.c|102| <<alpha_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/arm/cpu.c|2084| <<arm_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/avr/cpu.c|114| <<avr_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/hexagon/cpu.c|302| <<hexagon_cpu_realize>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/hppa/cpu.c|172| <<hppa_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/i386/cpu.c|8228| <<x86_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/loongarch/cpu.c|601| <<loongarch_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/m68k/cpu.c|325| <<m68k_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/microblaze/cpu.c|236| <<mb_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/mips/cpu.c|477| <<mips_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/openrisc/cpu.c|156| <<openrisc_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/ppc/cpu_init.c|6888| <<ppc_cpu_realize>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/riscv/cpu.c|1169| <<riscv_cpu_realize>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/rx/cpu.c|127| <<rx_cpu_realize>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/s390x/cpu.c|263| <<s390_cpu_realizefn>> cpu_exec_realizefn(cs, &err);
+ *   - target/sh4/cpu.c|215| <<superh_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/sparc/cpu.c|818| <<sparc_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/tricore/cpu.c|91| <<tricore_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ *   - target/xtensa/cpu.c|170| <<xtensa_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+ */
 bool cpu_exec_realizefn(CPUState *cpu, Error **errp)
 {
     /* cache the cpu class for the hotpath */
diff --git a/dump/dump.c b/dump/dump.c
index 45e84428a..b1da6187d 100644
--- a/dump/dump.c
+++ b/dump/dump.c
@@ -279,11 +279,38 @@ static inline int cpu_index(CPUState *cpu)
     return cpu->cpu_index + 1;
 }
 
+/*
+ * called by:
+ *   - dump/dump.c|319| <<write_elf64_notes>> write_guest_note(f, s, errp);
+ *   - dump/dump.c|357| <<write_elf32_notes>> write_guest_note(f, s, errp);
+ */
 static void write_guest_note(WriteCoreDumpFunction f, DumpState *s,
                              Error **errp)
 {
     int ret;
 
+    /*
+     * 在以下使用guest_note:
+     *   - dump/dump.c|107| <<dump_cleanup>> g_free(s->guest_note);
+     *   - dump/dump.c|109| <<dump_cleanup>> s->guest_note = NULL;
+     *   - dump/dump.c|287| <<write_guest_note>> if (s->guest_note) {
+     *   - dump/dump.c|288| <<write_guest_note>> ret = f(s->guest_note, s->guest_note_size, s);
+     *   - dump/dump.c|1024| <<create_header32>> if (s->guest_note &&
+     *   - dump/dump.c|1025| <<create_header32>> note_name_equal(s, s->guest_note, "VMCOREINFO")) {
+     *   - dump/dump.c|1028| <<create_header32>> get_note_sizes(s, s->guest_note,
+     *   - dump/dump.c|1135| <<create_header64>> if (s->guest_note &&
+     *   - dump/dump.c|1136| <<create_header64>> note_name_equal(s, s->guest_note, "VMCOREINFO")) {
+     *   - dump/dump.c|1139| <<create_header64>> get_note_sizes(s, s->guest_note,
+     *   - dump/dump.c|1746| <<vmcoreinfo_update_phys_base>> if (!note_name_equal(s, s->guest_note, "VMCOREINFO")) {
+     *   - dump/dump.c|1750| <<vmcoreinfo_update_phys_base>> get_note_sizes(s, s->guest_note, &note_head_size, &name_size, &size);
+     *   - dump/dump.c|1753| <<vmcoreinfo_update_phys_base>> vmci = s->guest_note + note_head_size + ROUND_UP(name_size, 4);
+     *   - dump/dump.c|1890| <<dump_init>> s->guest_note = g_malloc(size + 1);
+     *   - dump/dump.c|1891| <<dump_init>> cpu_physical_memory_read(addr, s->guest_note, size);
+     *   - dump/dump.c|1893| <<dump_init>> get_note_sizes(s, s->guest_note, NULL, &name_size, &desc_size);
+     *   - dump/dump.c|1900| <<dump_init>> g_free(s->guest_note);
+     *   - dump/dump.c|1901| <<dump_init>> s->guest_note = NULL;
+     *   - dump/win_dump.c|410| <<create_win_dump>> WinDumpHeader *h = (void *)(s->guest_note + VMCOREINFO_ELF_NOTE_HDR_SIZE);
+     */
     if (s->guest_note) {
         ret = f(s->guest_note, s->guest_note_size, s);
         if (ret < 0) {
@@ -292,6 +319,11 @@ static void write_guest_note(WriteCoreDumpFunction f, DumpState *s,
     }
 }
 
+/*
+ * called by:
+ *   - dump/dump.c|651| <<write_elf_notes>> write_elf64_notes(fd_write_vmcore, s, errp);
+ *   - dump/dump.c|1161| <<create_header64>> write_elf64_notes(buf_write_note, s, errp);
+ */
 static void write_elf64_notes(WriteCoreDumpFunction f, DumpState *s,
                               Error **errp)
 {
@@ -645,6 +677,10 @@ static void write_elf_phdr_loads(DumpState *s, Error **errp)
     }
 }
 
+/*
+ * called by:
+ *   - dump/dump.c|711| <<dump_begin>> write_elf_notes(s, errp);
+ */
 static void write_elf_notes(DumpState *s, Error **errp)
 {
     if (dump_is_64bit(s)) {
diff --git a/hw/core/cpu-common.c b/hw/core/cpu-common.c
index 09c790359..f7d51b24e 100644
--- a/hw/core/cpu-common.c
+++ b/hw/core/cpu-common.c
@@ -109,6 +109,75 @@ void cpu_dump_state(CPUState *cpu, FILE *f, int flags)
     }
 }
 
+/*
+ * 大部分的cpu_reset()的调用:
+ *   - accel/tcg/cpu-exec.c|845| <<cpu_handle_interrupt>> cpu_reset(cpu);
+ *   - bsd-user/i386/target_arch_cpu.h|199| <<target_cpu_reset>> cpu_reset(env_cpu(env));
+ *   - bsd-user/main.c|478| <<main>> cpu_reset(cpu);
+ *   - bsd-user/x86_64/target_arch_cpu.h|174| <<target_cpu_reset>> cpu_reset(env_cpu(env));
+ *   - hw/arm/armv7m.c|590| <<armv7m_reset>> cpu_reset(CPU(cpu));
+ *   - hw/arm/boot.c|692| <<do_cpu_reset>> cpu_reset(cs);
+ *   - hw/arm/omap1.c|3731| <<omap1_mpu_reset>> cpu_reset(CPU(mpu->cpu));
+ *   - hw/core/generic-loader.c|52| <<generic_loader_reset>> cpu_reset(s->cpu);
+ *   - hw/loongarch/boot.c|224| <<reset_load_elf>> cpu_reset(CPU(cpu));
+ *   - hw/m68k/mcf5208.c|212| <<m5208_rcm_write>> cpu_reset(cs);
+ *   - hw/m68k/q800.c|110| <<main_cpu_reset>> cpu_reset(cs);
+ *   - hw/m68k/virt.c|101| <<main_cpu_reset>> cpu_reset(cs);
+ *   - hw/microblaze/boot.c|59| <<main_cpu_reset>> cpu_reset(cs);
+ *   - hw/mips/cps.c|55| <<main_cpu_reset>> cpu_reset(cs);
+ *   - hw/mips/fuloong2e.c|194| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/mips/jazz.c|72| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/mips/loongson3_virt.c|407| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/mips/malta.c|1015| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/mips/mipssim.c|114| <<main_cpu_reset>> cpu_reset(CPU(s->cpu));
+ *   - hw/misc/mips_cpc.c|40| <<mips_cpu_reset_async_work>> cpu_reset(cs);
+ *   - hw/openrisc/openrisc_sim.c|97| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/openrisc/virt.c|97| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/amigaone.c|56| <<amigaone_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/e500.c|771| <<ppce500_cpu_reset_sec>> cpu_reset(cs);
+ *   - hw/ppc/e500.c|785| <<ppce500_cpu_reset>> cpu_reset(cs);
+ *   - hw/ppc/mac_newworld.c|126| <<ppc_core99_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/mac_oldworld.c|85| <<ppc_heathrow_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/pegasos2.c|100| <<pegasos2_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/pnv_core.c|51| <<pnv_core_cpu_reset>> cpu_reset(cs);
+ *   - hw/ppc/ppc405_boards.c|84| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/ppc405_uc.c|1024| <<ppc405_reset>> cpu_reset(CPU(opaque));
+ *   - hw/ppc/ppc440_bamboo.c|118| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/prep.c|69| <<ppc_prep_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/sam460ex.c|222| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/ppc/spapr_cpu_core.c|38| <<spapr_reset_vcpu>> cpu_reset(cs);
+ *   - hw/ppc/virtex_ml507.c|104| <<main_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/riscv/riscv_hart.c|42| <<riscv_harts_cpu_reset>> cpu_reset(CPU(cpu));
+ *   - hw/sh4/r2d.c|212| <<main_cpu_reset>> cpu_reset(CPU(s->cpu));
+ *   - hw/sparc/leon3.c|157| <<leon3_cpu_reset>> cpu_reset(cpu);
+ *   - hw/sparc/sun4m.c|207| <<sun4m_cpu_reset>> cpu_reset(cs);
+ *   - hw/sparc64/sparc64.c|115| <<main_cpu_reset>> cpu_reset(CPU(s->cpu));
+ *   - hw/xtensa/sim.c|51| <<sim_reset>> cpu_reset(CPU(cpu));
+ *   - hw/xtensa/xtfpga.c|202| <<xtfpga_reset>> cpu_reset(CPU(cpu));
+ *   - hw/xtensa/xtfpga.c|270| <<xtfpga_init>> cpu_reset(CPU(cpu));
+ *   - linux-user/main.c|242| <<cpu_copy>> cpu_reset(new_cpu);
+ *   - linux-user/main.c|824| <<main>> cpu_reset(cpu);
+ *   - target/arm/arm-powerctl.c|68| <<arm_set_cpu_on_async_work>> cpu_reset(target_cpu_state);
+ *   - target/arm/arm-powerctl.c|196| <<arm_set_cpu_on_and_reset_async_work>> cpu_reset(target_cpu_state);
+ *   - target/arm/arm-powerctl.c|290| <<arm_reset_cpu_async_work>> cpu_reset(target_cpu_state);
+ *   - target/arm/cpu.c|2607| <<arm_cpu_realizefn>> cpu_reset(cs);
+ *   - target/avr/cpu.c|120| <<avr_cpu_realizefn>> cpu_reset(cs);
+ *   - target/hexagon/cpu.c|313| <<hexagon_cpu_realize>> cpu_reset(cs);
+ *   - target/i386/cpu-sysemu.c|305| <<x86_cpu_machine_reset_cb>> cpu_reset(CPU(cpu));
+ *   - target/i386/cpu.c|8405| <<x86_cpu_realizefn>> cpu_reset(cs);
+ *   - target/i386/helper.c|601| <<do_cpu_init>> cpu_reset(cs);
+ *   - target/loongarch/cpu.c|609| <<loongarch_cpu_realizefn>> cpu_reset(cs);
+ *   - target/m68k/cpu.c|333| <<m68k_cpu_realizefn>> cpu_reset(cs);
+ *   - target/mips/cpu.c|491| <<mips_cpu_realizefn>> cpu_reset(cs);
+ *   - target/mips/tcg/sysemu/tlb_helper.c|1103| <<mips_cpu_do_interrupt>> cpu_reset(CPU(cpu));
+ *   - target/openrisc/cpu.c|163| <<openrisc_cpu_realizefn>> cpu_reset(cs);
+ *   - target/riscv/cpu.c|1190| <<riscv_cpu_realize>> cpu_reset(cs);
+ *   - target/rx/cpu.c|134| <<rx_cpu_realize>> cpu_reset(cs);
+ *   - target/s390x/cpu.c|283| <<s390_cpu_realizefn>> cpu_reset(cs);
+ *   - target/s390x/cpu.h|861| <<s390_do_cpu_full_reset>> cpu_reset(cs);
+ *   - target/sh4/cpu.c|221| <<superh_cpu_realizefn>> cpu_reset(cs);
+ *   - target/tricore/cpu.c|112| <<tricore_cpu_realizefn>> cpu_reset(cs);
+ */
 void cpu_reset(CPUState *cpu)
 {
     device_cold_reset(DEVICE(cpu));
@@ -254,6 +323,19 @@ static void cpu_common_initfn(Object *obj)
 
     qemu_mutex_init(&cpu->work_mutex);
     qemu_lockcnt_init(&cpu->in_ioctl_lock);
+    /*
+     * 在以下使用CPUState->work_list:
+     *   - cpu-common.c|137| <<queue_work_on_cpu>> QSIMPLEQ_INSERT_TAIL(&cpu->work_list, wi, node);
+     *   - cpu-common.c|340| <<free_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|341| <<free_queued_cpu_work>> struct qemu_work_item *wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|342| <<free_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - cpu-common.c|354| <<process_queued_cpu_work>> if (QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|358| <<process_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|359| <<process_queued_cpu_work>> wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|360| <<process_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - hw/core/cpu-common.c|257| <<cpu_common_initfn>> QSIMPLEQ_INIT(&cpu->work_list);
+     *   - system/cpus.c|83| <<cpu_work_list_empty>> return QSIMPLEQ_EMPTY_ATOMIC(&cpu->work_list);
+     */
     QSIMPLEQ_INIT(&cpu->work_list);
     QTAILQ_INIT(&cpu->breakpoints);
     QTAILQ_INIT(&cpu->watchpoints);
diff --git a/hw/i386/fw_cfg.c b/hw/i386/fw_cfg.c
index 0e4494627..9228b0a31 100644
--- a/hw/i386/fw_cfg.c
+++ b/hw/i386/fw_cfg.c
@@ -172,6 +172,10 @@ FWCfgState *fw_cfg_arch_create(MachineState *ms,
     return fw_cfg;
 }
 
+/*
+ * called by:
+ *   - hw/i386/pc.c|637| <<pc_machine_done>> fw_cfg_build_feature_control(MACHINE(pcms), x86ms->fw_cfg);
+ */
 void fw_cfg_build_feature_control(MachineState *ms, FWCfgState *fw_cfg)
 {
     X86CPU *cpu = X86_CPU(ms->possible_cpus->cpus[0].cpu);
diff --git a/hw/net/virtio-net.c b/hw/net/virtio-net.c
index 6e8c51a2d..bdae06685 100644
--- a/hw/net/virtio-net.c
+++ b/hw/net/virtio-net.c
@@ -222,6 +222,11 @@ static bool virtio_net_started(VirtIONet *n, uint8_t status)
         (n->status & VIRTIO_NET_S_LINK_UP) && vdev->vm_running;
 }
 
+/*
+ * called by:
+ *   - hw/net/virtio-net.c|240| <<virtio_net_announce_timer>> virtio_net_announce_notify(n);
+ *   - hw/net/virtio-net.c|259| <<virtio_net_announce>> virtio_net_announce_notify(n);
+ */
 static void virtio_net_announce_notify(VirtIONet *net)
 {
     VirtIODevice *vdev = VIRTIO_DEVICE(net);
@@ -240,6 +245,9 @@ static void virtio_net_announce_timer(void *opaque)
     virtio_net_announce_notify(n);
 }
 
+/*
+ * NetClientInfo net_virtio_info.announce = virtio_net_announce()
+ */
 static void virtio_net_announce(NetClientState *nc)
 {
     VirtIONet *n = qemu_get_nic_opaque(nc);
@@ -439,6 +447,9 @@ static void virtio_net_set_status(struct VirtIODevice *vdev, uint8_t status)
     }
 }
 
+/*
+ * NetClientInfo net_virtio_inf.link_status_changed = virtio_net_set_link_status()
+ */
 static void virtio_net_set_link_status(NetClientState *nc)
 {
     VirtIONet *n = qemu_get_nic_opaque(nc);
diff --git a/hw/pci/msi.c b/hw/pci/msi.c
index 8104ac1d9..a17306d13 100644
--- a/hw/pci/msi.c
+++ b/hw/pci/msi.c
@@ -375,6 +375,35 @@ void msi_notify(PCIDevice *dev, unsigned int vector)
     msi_send_message(dev, msg);
 }
 
+/*
+ * QEMU-3.0的.
+ * (gdb) bt
+ * #0  kvm_apic_mem_write (opaque=0x5555568aaf70, addr=4096, data=16421, size=4) at /home/zhang/kvm/qemu-3.0.0/hw/i386/kvm/apic.c:200
+ * #1  0x0000555555864b2d in memory_region_write_accessor (mr=0x5555568aaff0, addr=4096, value=0x7fffffffde98, size=4, shift=0,
+ *     mask=4294967295, attrs=...) at /home/zhang/kvm/qemu-3.0.0/memory.c:527
+ * #2  0x0000555555864d45 in access_with_adjusted_size (addr=4096, value=0x7fffffffde98, size=4, access_size_min=1, access_size_max=4,
+ *     access_fn=0x555555864a43 <memory_region_write_accessor>, mr=0x5555568aaff0, attrs=...) at /home/zhang/kvm/qemu-3.0.0/memory.c:594
+ * #3  0x000055555586796d in memory_region_dispatch_write (mr=0x5555568aaff0, addr=4096, data=16421, size=4, attrs=...)
+ *     at /home/zhang/kvm/qemu-3.0.0/memory.c:1473
+ * #4  0x0000555555805285 in address_space_stl_internal (as=0x5555579aa130, addr=4276097024, val=16421, attrs=..., result=0x0,
+ *     endian=DEVICE_LITTLE_ENDIAN) at /home/zhang/kvm/qemu-3.0.0/memory_ldst.inc.c:349
+ * #5  0x00005555558053bd in address_space_stl_le (as=0x5555579aa130, addr=4276097024, val=16421, attrs=..., result=0x0)
+ *     at /home/zhang/kvm/qemu-3.0.0/memory_ldst.inc.c:386
+ * #6  0x0000555555b3c744 in msi_send_message (dev=0x5555579a9f20, msg=...) at hw/pci/msi.c:340
+ * #7  0x0000555555b3b2d2 in msix_notify (dev=0x5555579a9f20, vector=1) at hw/pci/msix.c:494
+ * #8  0x0000555555a5b4dc in nvme_irq_assert (n=0x5555579a9f20, cq=0x5555578a3410) at hw/block/nvme.c:114
+ * #9  0x0000555555a5bf1b in nvme_post_cqes (opaque=0x5555578a3410) at hw/block/nvme.c:275
+ * #10 0x0000555555d8d3a1 in timerlist_run_timers (timer_list=0x55555684ef50) at util/qemu-timer.c:536
+ * #11 0x0000555555d8d3ed in qemu_clock_run_timers (type=QEMU_CLOCK_VIRTUAL) at util/qemu-timer.c:547
+ * #12 0x0000555555d8d7c2 in qemu_clock_run_all_timers () at util/qemu-timer.c:667
+ * #13 0x0000555555d8ded2 in main_loop_wait (nonblocking=0) at util/main-loop.c:503
+ * #14 0x00005555559d8681 in main_loop () at vl.c:1866
+ * #15 0x00005555559dfe85 in main (argc=14, argv=0x7fffffffe418, envp=0x7fffffffe490) at vl.c:4644
+ *
+ * called by:
+ *   - hw/pci/msi.c|375| <<msi_notify>> msi_send_message(dev, msg);
+ *   - hw/pci/msix.c|607| <<msix_notify>> msi_send_message(dev, msg);
+ */
 void msi_send_message(PCIDevice *dev, MSIMessage msg)
 {
     dev->msi_trigger(dev, msg);
@@ -483,6 +512,16 @@ void msi_write_config(PCIDevice *dev, uint32_t addr, uint32_t val, int len)
     }
 }
 
+/*
+ * called by:
+ *   - hw/pci-bridge/cxl_root_port.c|63| <<cxl_rp_aer_vector>> switch (msi_nr_vectors_allocated(d)) {
+ *   - hw/pci-bridge/ioh3420.c|49| <<ioh3420_aer_vector>> switch (msi_nr_vectors_allocated(d)) {
+ *   - hw/ppc/spapr_pci.c|358| <<rtas_ibm_change_msi>> max_irqs = msi_nr_vectors_allocated(pdev);
+ *   - hw/ppc/spapr_pci.c|1422| <<spapr_dt_pci_device>> uint32_t max_msi = msi_nr_vectors_allocated(dev);
+ *   - hw/remote/vfio-user-obj.c|653| <<vfu_object_setup_irqs>> } else if (msi_nr_vectors_allocated(pci_dev)) {
+ *   - hw/remote/vfio-user-obj.c|655| <<vfu_object_setup_irqs>> msi_nr_vectors_allocated(pci_dev));
+ *   - hw/vfio/pci.c|784| <<vfio_msi_enable>> vdev->nr_vectors = msi_nr_vectors_allocated(&vdev->pdev);
+ */
 unsigned int msi_nr_vectors_allocated(const PCIDevice *dev)
 {
     uint16_t flags = pci_get_word(dev->config + msi_flags_off(dev));
diff --git a/hw/pci/msix.c b/hw/pci/msix.c
index 487e49834..bb1868a94 100644
--- a/hw/pci/msix.c
+++ b/hw/pci/msix.c
@@ -68,6 +68,18 @@ static uint8_t msix_pending_mask(int vector)
 
 static uint8_t *msix_pending_byte(PCIDevice *dev, int vector)
 {
+    /*
+     * 在以下使用PCIDevice->msix_pba:
+     *   - hw/pci/msix.c|71| <<msix_pending_byte>> return dev->msix_pba + vector / 8;
+     *   - hw/pci/msix.c|257| <<msix_pba_mmio_read>> return pci_get_long(dev->msix_pba + addr);
+     *   - hw/pci/msix.c|369| <<msix_init>> dev->msix_pba = g_malloc0(pba_size);
+     *   - hw/pci/msix.c|460| <<msix_uninit>> g_free(dev->msix_pba);
+     *   - hw/pci/msix.c|461| <<msix_uninit>> dev->msix_pba = NULL;
+     *   - hw/pci/msix.c|487| <<msix_save>> qemu_put_buffer(f, dev->msix_pba, DIV_ROUND_UP(n, 8));
+     *   - hw/pci/msix.c|502| <<msix_load>> qemu_get_buffer(f, dev->msix_pba, DIV_ROUND_UP(n, 8));
+     *   - hw/pci/msix.c|554| <<msix_reset>> memset(dev->msix_pba, 0, QEMU_ALIGN_UP(dev->msix_entries_nr, 64) / 8);
+     *   - hw/usb/hcd-xhci-pci.c|170| <<usb_xhci_pci_exit>> if (dev->msix_table && dev->msix_pba && dev->msix_entry_used) {
+     */
     return dev->msix_pba + vector / 8;
 }
 
@@ -248,12 +260,47 @@ static uint64_t msix_pba_mmio_read(void *opaque, hwaddr addr,
                                    unsigned size)
 {
     PCIDevice *dev = opaque;
+    /*
+     * 在以下调用msix_set_vector_notifiers(): 
+     *   - hw/misc/ivshmem.c|775| <<ivshmem_enable_irqfd>> if (msix_set_vector_notifiers(pdev,
+     *            ivshmem_vector_unmask, ivshmem_vector_mask, ivshmem_vector_poll)) {
+     *   - hw/vfio/pci.c|686| <<vfio_msix_enable>> if (msix_set_vector_notifiers(&vdev->pdev,
+     *            vfio_msix_vector_use, vfio_msix_vector_release, NULL)) {
+     *   - hw/virtio/virtio-pci.c|1290| <<virtio_pci_set_guest_notifiers>> r = msix_set_vector_notifiers(&proxy->pci_dev,
+     *            virtio_pci_vector_unmask, virtio_pci_vector_mask, virtio_pci_vector_poll);
+     *
+     *
+     * 在以下使用PCIDevice->msix_vector_poll_notifier:
+     *   - hw/pci/msix.c|251| <<msix_pba_mmio_read>> if (dev->msix_vector_poll_notifier) {
+     *   - hw/pci/msix.c|254| <<msix_pba_mmio_read>> dev->msix_vector_poll_notifier(dev, vector_start, vector_end);
+     *   - hw/pci/msix.c|629| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier = poll_notifier;
+     *   - hw/pci/msix.c|640| <<msix_set_vector_notifiers>> if (dev->msix_vector_poll_notifier) {
+     *   - hw/pci/msix.c|641| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier(dev, 0, dev->msix_entries_nr);
+     *   - hw/pci/msix.c|651| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier = NULL;
+     *   - hw/pci/msix.c|670| <<msix_unset_vector_notifiers>> dev->msix_vector_poll_notifier = NULL;
+     */
     if (dev->msix_vector_poll_notifier) {
         unsigned vector_start = addr * 8;
         unsigned vector_end = MIN(addr + size * 8, dev->msix_entries_nr);
         dev->msix_vector_poll_notifier(dev, vector_start, vector_end);
     }
 
+    /*
+     * 在以下使用PCIDevice->msix_pba:
+     *   - hw/pci/msix.c|71| <<msix_pending_byte>> return dev->msix_pba + vector / 8;
+     *   - hw/pci/msix.c|257| <<msix_pba_mmio_read>> return pci_get_long(dev->msix_pba + addr);
+     *   - hw/pci/msix.c|369| <<msix_init>> dev->msix_pba = g_malloc0(pba_size);
+     *   - hw/pci/msix.c|460| <<msix_uninit>> g_free(dev->msix_pba);
+     *   - hw/pci/msix.c|461| <<msix_uninit>> dev->msix_pba = NULL;
+     *   - hw/pci/msix.c|487| <<msix_save>> qemu_put_buffer(f, dev->msix_pba, DIV_ROUND_UP(n, 8));
+     *   - hw/pci/msix.c|502| <<msix_load>> qemu_get_buffer(f, dev->msix_pba, DIV_ROUND_UP(n, 8));
+     *   - hw/pci/msix.c|554| <<msix_reset>> memset(dev->msix_pba, 0, QEMU_ALIGN_UP(dev->msix_entries_nr, 64) / 8);
+     *   - hw/usb/hcd-xhci-pci.c|170| <<usb_xhci_pci_exit>> if (dev->msix_table && dev->msix_pba && dev->msix_entry_used) {
+     *
+     * PCIDevice *dev:
+     * -> uint8_t *msix_table;
+     * -> uint8_t *msix_pba;
+     */
     return pci_get_long(dev->msix_pba + addr);
 }
 
@@ -374,6 +421,15 @@ int msix_init(struct PCIDevice *dev, unsigned short nentries,
     memory_region_init_io(&dev->msix_table_mmio, OBJECT(dev), &msix_table_mmio_ops, dev,
                           "msix-table", table_size);
     memory_region_add_subregion(table_bar, table_offset, &dev->msix_table_mmio);
+    /*
+     * 在以下使用PCIDevice->msix_pba_mmio:
+     *   -  hw/pci/msix.c|377| <<msix_init>> memory_region_init_io(&dev->msix_pba_mmio, OBJECT(dev), &msix_pba_mmio_ops, dev,
+     *   - hw/pci/msix.c|379| <<msix_init>> memory_region_add_subregion(pba_bar, pba_offset, &dev->msix_pba_mmio);
+     *   - hw/pci/msix.c|459| <<msix_uninit>> memory_region_del_subregion(pba_bar, &dev->msix_pba_mmio);
+     *   - hw/vfio/pci.c|360| <<vfio_msi_interrupt>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, true);
+     *   - hw/vfio/pci.c|607| <<vfio_msix_vector_do_use>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+     *   - hw/vfio/pci.c|1684| <<vfio_msix_setup>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+     */
     memory_region_init_io(&dev->msix_pba_mmio, OBJECT(dev), &msix_pba_mmio_ops, dev,
                           "msix-pba", pba_size);
     memory_region_add_subregion(pba_bar, pba_offset, &dev->msix_pba_mmio);
@@ -456,6 +512,15 @@ void msix_uninit(PCIDevice *dev, MemoryRegion *table_bar, MemoryRegion *pba_bar)
     dev->msix_cap = 0;
     msix_free_irq_entries(dev);
     dev->msix_entries_nr = 0;
+    /*
+     * 在以下使用PCIDevice->msix_pba_mmio:
+     *   -  hw/pci/msix.c|377| <<msix_init>> memory_region_init_io(&dev->msix_pba_mmio, OBJECT(dev), &msix_pba_mmio_ops, dev,
+     *   - hw/pci/msix.c|379| <<msix_init>> memory_region_add_subregion(pba_bar, pba_offset, &dev->msix_pba_mmio);
+     *   - hw/pci/msix.c|459| <<msix_uninit>> memory_region_del_subregion(pba_bar, &dev->msix_pba_mmio);
+     *   - hw/vfio/pci.c|360| <<vfio_msi_interrupt>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, true);
+     *   - hw/vfio/pci.c|607| <<vfio_msix_vector_do_use>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+     *   - hw/vfio/pci.c|1684| <<vfio_msix_setup>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+     */
     memory_region_del_subregion(pba_bar, &dev->msix_pba_mmio);
     g_free(dev->msix_pba);
     dev->msix_pba = NULL;
@@ -521,6 +586,31 @@ int msix_enabled(PCIDevice *dev)
          MSIX_ENABLE_MASK);
 }
 
+/*
+ * QEMU-3.0的.
+ * (gdb) bt
+ * #0  kvm_apic_mem_write (opaque=0x5555568aaf70, addr=4096, data=16421, size=4) at /home/zhang/kvm/qemu-3.0.0/hw/i386/kvm/apic.c:200
+ * #1  0x0000555555864b2d in memory_region_write_accessor (mr=0x5555568aaff0, addr=4096, value=0x7fffffffde98, size=4, shift=0,
+ *     mask=4294967295, attrs=...) at /home/zhang/kvm/qemu-3.0.0/memory.c:527
+ * #2  0x0000555555864d45 in access_with_adjusted_size (addr=4096, value=0x7fffffffde98, size=4, access_size_min=1, access_size_max=4,
+ *     access_fn=0x555555864a43 <memory_region_write_accessor>, mr=0x5555568aaff0, attrs=...) at /home/zhang/kvm/qemu-3.0.0/memory.c:594
+ * #3  0x000055555586796d in memory_region_dispatch_write (mr=0x5555568aaff0, addr=4096, data=16421, size=4, attrs=...)
+ *     at /home/zhang/kvm/qemu-3.0.0/memory.c:1473
+ * #4  0x0000555555805285 in address_space_stl_internal (as=0x5555579aa130, addr=4276097024, val=16421, attrs=..., result=0x0,
+ *     endian=DEVICE_LITTLE_ENDIAN) at /home/zhang/kvm/qemu-3.0.0/memory_ldst.inc.c:349
+ * #5  0x00005555558053bd in address_space_stl_le (as=0x5555579aa130, addr=4276097024, val=16421, attrs=..., result=0x0)
+ *     at /home/zhang/kvm/qemu-3.0.0/memory_ldst.inc.c:386
+ * #6  0x0000555555b3c744 in msi_send_message (dev=0x5555579a9f20, msg=...) at hw/pci/msi.c:340
+ * #7  0x0000555555b3b2d2 in msix_notify (dev=0x5555579a9f20, vector=1) at hw/pci/msix.c:494
+ * #8  0x0000555555a5b4dc in nvme_irq_assert (n=0x5555579a9f20, cq=0x5555578a3410) at hw/block/nvme.c:114
+ * #9  0x0000555555a5bf1b in nvme_post_cqes (opaque=0x5555578a3410) at hw/block/nvme.c:275
+ * #10 0x0000555555d8d3a1 in timerlist_run_timers (timer_list=0x55555684ef50) at util/qemu-timer.c:536
+ * #11 0x0000555555d8d3ed in qemu_clock_run_timers (type=QEMU_CLOCK_VIRTUAL) at util/qemu-timer.c:547
+ * #12 0x0000555555d8d7c2 in qemu_clock_run_all_timers () at util/qemu-timer.c:667
+ * #13 0x0000555555d8ded2 in main_loop_wait (nonblocking=0) at util/main-loop.c:503
+ * #14 0x00005555559d8681 in main_loop () at vl.c:1866
+ * #15 0x00005555559dfe85 in main (argc=14, argv=0x7fffffffe418, envp=0x7fffffffe490) at vl.c:4644
+ */
 /* Send an MSI-X message */
 void msix_notify(PCIDevice *dev, unsigned vector)
 {
@@ -596,6 +686,10 @@ unsigned int msix_nr_vectors_allocated(const PCIDevice *dev)
     return dev->msix_entries_nr;
 }
 
+/*
+ * called by:
+ *   - hw/pci/msix.c|743| <<msix_set_vector_notifiers>> ret = msix_set_notifier_for_vector(dev, vector);
+ */
 static int msix_set_notifier_for_vector(PCIDevice *dev, unsigned int vector)
 {
     MSIMessage msg;
@@ -615,6 +709,15 @@ static void msix_unset_notifier_for_vector(PCIDevice *dev, unsigned int vector)
     dev->msix_vector_release_notifier(dev, vector);
 }
 
+/*
+ * called by:
+ *   - hw/misc/ivshmem.c|775| <<ivshmem_enable_irqfd>> if (msix_set_vector_notifiers(pdev,
+ *            ivshmem_vector_unmask, ivshmem_vector_mask, ivshmem_vector_poll)) {
+ *   - hw/vfio/pci.c|686| <<vfio_msix_enable>> if (msix_set_vector_notifiers(&vdev->pdev,
+ *            vfio_msix_vector_use, vfio_msix_vector_release, NULL)) {
+ *   - hw/virtio/virtio-pci.c|1290| <<virtio_pci_set_guest_notifiers>> r = msix_set_vector_notifiers(&proxy->pci_dev,
+ *            virtio_pci_vector_unmask, virtio_pci_vector_mask, virtio_pci_vector_poll);
+ */
 int msix_set_vector_notifiers(PCIDevice *dev,
                               MSIVectorUseNotifier use_notifier,
                               MSIVectorReleaseNotifier release_notifier,
@@ -626,6 +729,16 @@ int msix_set_vector_notifiers(PCIDevice *dev,
 
     dev->msix_vector_use_notifier = use_notifier;
     dev->msix_vector_release_notifier = release_notifier;
+    /*
+     * 在以下使用PCIDevice->msix_vector_poll_notifier:
+     *   - hw/pci/msix.c|251| <<msix_pba_mmio_read>> if (dev->msix_vector_poll_notifier) {
+     *   - hw/pci/msix.c|254| <<msix_pba_mmio_read>> dev->msix_vector_poll_notifier(dev, vector_start, vector_end);
+     *   - hw/pci/msix.c|629| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier = poll_notifier;
+     *   - hw/pci/msix.c|640| <<msix_set_vector_notifiers>> if (dev->msix_vector_poll_notifier) {
+     *   - hw/pci/msix.c|641| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier(dev, 0, dev->msix_entries_nr);
+     *   - hw/pci/msix.c|651| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier = NULL;
+     *   - hw/pci/msix.c|670| <<msix_unset_vector_notifiers>> dev->msix_vector_poll_notifier = NULL;
+     */
     dev->msix_vector_poll_notifier = poll_notifier;
 
     if ((dev->config[dev->msix_cap + MSIX_CONTROL_OFFSET] &
@@ -648,10 +761,26 @@ undo:
     }
     dev->msix_vector_use_notifier = NULL;
     dev->msix_vector_release_notifier = NULL;
+    /*
+     * 在以下使用PCIDevice->msix_vector_poll_notifier:
+     *   - hw/pci/msix.c|251| <<msix_pba_mmio_read>> if (dev->msix_vector_poll_notifier) {
+     *   - hw/pci/msix.c|254| <<msix_pba_mmio_read>> dev->msix_vector_poll_notifier(dev, vector_start, vector_end);
+     *   - hw/pci/msix.c|629| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier = poll_notifier;
+     *   - hw/pci/msix.c|640| <<msix_set_vector_notifiers>> if (dev->msix_vector_poll_notifier) {
+     *   - hw/pci/msix.c|641| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier(dev, 0, dev->msix_entries_nr);
+     *   - hw/pci/msix.c|651| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier = NULL;
+     *   - hw/pci/msix.c|670| <<msix_unset_vector_notifiers>> dev->msix_vector_poll_notifier = NULL;
+     */
     dev->msix_vector_poll_notifier = NULL;
     return ret;
 }
 
+/*
+ * called by:
+ *   - hw/misc/ivshmem.c|799| <<ivshmem_disable_irqfd>> msix_unset_vector_notifiers(pdev);
+ *   - hw/vfio/pci.c|877| <<vfio_msix_disable>> msix_unset_vector_notifiers(&vdev->pdev);
+ *   - hw/virtio/virtio-pci.c|1248| <<virtio_pci_set_guest_notifiers>> msix_unset_vector_notifiers(&proxy->pci_dev);
+ */
 void msix_unset_vector_notifiers(PCIDevice *dev)
 {
     int vector;
@@ -691,6 +820,22 @@ static const VMStateInfo vmstate_info_msix = {
     .put  = put_msix_state,
 };
 
+/*
+ * 在以下使用vmstate_msix:
+ *   - include/hw/pci/msix.h|56| <<VMSTATE_MSIX_TEST>> .vmsd = &vmstate_msix, \
+ *
+ * 53 #define VMSTATE_MSIX_TEST(_field, _state, _test) {                   \
+ * 54     .name         = (stringify(_field)),                             \
+ * 55     .size         = sizeof(PCIDevice),                               \
+ * 56     .vmsd         = &vmstate_msix,                                   \
+ * 57     .flags        = VMS_STRUCT,                                      \
+ * 58     .offset       = vmstate_offset_value(_state, _field, PCIDevice), \
+ * 59     .field_exists = (_test)                                          \
+ * 60 }
+ * 61
+ * 62 #define VMSTATE_MSIX(_f, _s)                                         \
+ * 63     VMSTATE_MSIX_TEST(_f, _s, NULL)
+ */
 const VMStateDescription vmstate_msix = {
     .name = "msix",
     .fields = (const VMStateField[]) {
diff --git a/hw/scsi/vhost-scsi-common.c b/hw/scsi/vhost-scsi-common.c
index 4c8637045..652390edb 100644
--- a/hw/scsi/vhost-scsi-common.c
+++ b/hw/scsi/vhost-scsi-common.c
@@ -78,6 +78,9 @@ int vhost_scsi_common_start(VHostSCSICommon *vsc, Error **errp)
         }
     }
 
+    /*
+     * 里面会调用vhost_dev_set_features()
+     */
     ret = vhost_dev_start(&vsc->dev, vdev, true);
     if (ret < 0) {
         error_setg_errno(errp, -ret, "Error starting vhost dev");
diff --git a/hw/scsi/vhost-scsi.c b/hw/scsi/vhost-scsi.c
index 22d16dc26..0f3983895 100644
--- a/hw/scsi/vhost-scsi.c
+++ b/hw/scsi/vhost-scsi.c
@@ -31,6 +31,80 @@
 #include "qemu/cutils.h"
 #include "sysemu/sysemu.h"
 
+/*
+ * vhost-scsi的stack.
+ *
+ * (gdb) bt
+ * #0  virtio_scsi_get_config (vdev=0x555558406a90, config=0x5555584313b0 "") at ../hw/scsi/virtio-scsi.c:888
+ * #1  0x0000555555e3d3e0 in virtio_config_modern_readl (vdev=0x555558406a90, addr=0) at ../hw/virtio/virtio-config-io.c:148
+ * #2  0x0000555555b7ba61 in virtio_pci_device_read (opaque=0x5555583fe4d0, addr=0, size=4) at ../hw/virtio/virtio-pci.c:1778
+ * #3  0x0000555555e65ce2 in memory_region_read_accessor (mr=0x5555583ff2f0, addr=0, value=0x7fffeb0d5458, size=4, shift=0,
+ *     mask=4294967295, attrs=...) at ../system/memory.c:445
+ * #4  0x0000555555e6633a in access_with_adjusted_size (addr=0, value=0x7fffeb0d5458, size=4, access_size_min=1,
+ *     access_size_max=4, access_fn=0x555555e65c97 <memory_region_read_accessor>, mr=0x5555583ff2f0, attrs=...)
+ *     at ../system/memory.c:573
+ * #5  0x0000555555e6969d in memory_region_dispatch_read1 (mr=0x5555583ff2f0, addr=0, pval=0x7fffeb0d5458, size=4, attrs=...)
+ *     at ../system/memory.c:1458
+ * #6  0x0000555555e697cc in memory_region_dispatch_read (mr=0x5555583ff2f0, addr=0, pval=0x7fffeb0d5458, op=MO_32, attrs=...)
+ *     at ../system/memory.c:1491
+ * #7  0x0000555555e796f6 in flatview_read_continue_step (attrs=..., buf=0x7ffff7ff0028 "\v", len=4, mr_addr=0, l=0x7fffeb0d54d0,
+ *     mr=0x5555583ff2f0) at ../system/physmem.c:2867
+ * #8  0x0000555555e797f4 in flatview_read_continue (fv=0x7ffbd4000fc0, addr=61572651163648, attrs=..., ptr=0x7ffff7ff0028,
+ *     len=4, mr_addr=0, l=4, mr=0x5555583ff2f0) at ../system/physmem.c:2908
+ * #9  0x0000555555e7991c in flatview_read (fv=0x7ffbd4000fc0, addr=61572651163648, attrs=..., buf=0x7ffff7ff0028, len=4)
+ *     at ../system/physmem.c:2938
+ * #10 0x0000555555e799bb in address_space_read_full (as=0x555557334980 <address_space_memory>, addr=61572651163648, attrs=...,
+ *     buf=0x7ffff7ff0028, len=4) at ../system/physmem.c:2951
+ * #11 0x0000555555e79afd in address_space_rw (as=0x555557334980 <address_space_memory>, addr=61572651163648, attrs=...,
+ *     buf=0x7ffff7ff0028, len=4, is_write=false) at ../system/physmem.c:2979
+ * #12 0x0000555555ed996b in kvm_cpu_exec (cpu=0x5555576f0660) at ../accel/kvm/kvm-all.c:3184
+ * #13 0x0000555555edd092 in kvm_vcpu_thread_fn (arg=0x5555576f0660) at ../accel/kvm/kvm-accel-ops.c:50
+ * #14 0x0000555556172954 in qemu_thread_start (args=0x5555576fa4e0) at ../util/qemu-thread-posix.c:541
+ * #15 0x00007ffff68a91da in start_thread () from /lib64/libpthread.so.0
+ * #16 0x00007ffff52488d3 in clone () from /lib64/libc.so.6
+ *
+ *
+ * (gdb) bt
+ * #0  virtio_pci_modern_regions_init (proxy=0x5555583fe4d0, vdev_name=0x55555637e0e5 "virtio-scsi") at ../hw/virtio/virtio-pci.c:1812
+ * #1  0x0000555555b7c3b4 in virtio_pci_device_plugged (d=0x5555583fe4d0, errp=0x7fffffffd198) at ../hw/virtio/virtio-pci.c:2050
+ * #2  0x0000555555b75f0f in virtio_bus_device_plugged (vdev=0x555558406a90, errp=0x7fffffffd1f0) at ../hw/virtio/virtio-bus.c:74
+ * #3  0x0000555555e3b66e in virtio_device_realize (dev=0x555558406a90, errp=0x7fffffffd250) at ../hw/virtio/virtio.c:3961
+ * #4  0x0000555555ef1d70 in device_set_realized (obj=0x555558406a90, value=true, errp=0x7fffffffd510) at ../hw/core/qdev.c:495
+ * #5  0x0000555555efccbf in property_set_bool (obj=0x555558406a90, v=0x55555840c050, name=0x5555563a55d1 "realized", opaque=0x55555740cf10,
+ *     errp=0x7fffffffd510) at ../qom/object.c:2348
+ * #6  0x0000555555efa803 in object_property_set (obj=0x555558406a90, name=0x5555563a55d1 "realized", v=0x55555840c050, errp=0x7fffffffd510)
+ *     at ../qom/object.c:1455
+ * #7  0x0000555555eff53a in object_property_set_qobject (obj=0x555558406a90, name=0x5555563a55d1 "realized", value=0x5555584312f0, errp=0x7fffffffd510)
+ *     at ../qom/qom-qobject.c:28
+ * #8  0x0000555555efaba8 in object_property_set_bool (obj=0x555558406a90, name=0x5555563a55d1 "realized", value=true, errp=0x7fffffffd510)
+ *     at ../qom/object.c:1525
+ * #9  0x0000555555ef145d in qdev_realize (dev=0x555558406a90, bus=0x555558406a10, errp=0x7fffffffd510) at ../hw/core/qdev.c:276
+ * #10 0x0000555555e5925b in vhost_scsi_pci_realize (vpci_dev=0x5555583fe4d0, errp=0x7fffffffd510) at ../hw/virtio/vhost-scsi-pci.c:62
+ * #11 0x0000555555b7cdb6 in virtio_pci_realize (pci_dev=0x5555583fe4d0, errp=0x7fffffffd510) at ../hw/virtio/virtio-pci.c:2268
+ * #12 0x0000555555a97958 in pci_qdev_realize (qdev=0x5555583fe4d0, errp=0x7fffffffd5d0) at ../hw/pci/pci.c:2114
+ * #13 0x0000555555b7d2d3 in virtio_pci_dc_realize (qdev=0x5555583fe4d0, errp=0x7fffffffd5d0) at ../hw/virtio/virtio-pci.c:2395
+ * #14 0x0000555555ef1d70 in device_set_realized (obj=0x5555583fe4d0, value=true, errp=0x7fffffffd840) at ../hw/core/qdev.c:495
+ * #15 0x0000555555efccbf in property_set_bool (obj=0x5555583fe4d0, v=0x5555584304e0, name=0x5555563a55d1 "realized", opaque=0x55555740cf10,
+ *     errp=0x7fffffffd840) at ../qom/object.c:2348
+ * #16 0x0000555555efa803 in object_property_set (obj=0x5555583fe4d0, name=0x5555563a55d1 "realized", v=0x5555584304e0, errp=0x7fffffffd840)
+ *     at ../qom/object.c:1455
+ * #17 0x0000555555eff53a in object_property_set_qobject (obj=0x5555583fe4d0, name=0x5555563a55d1 "realized", value=0x555558430470,
+ *     errp=0x7fffffffd840) at ../qom/qom-qobject.c:28
+ * #18 0x0000555555efaba8 in object_property_set_bool (obj=0x5555583fe4d0, name=0x5555563a55d1 "realized", value=true, errp=0x7fffffffd840)
+ *     at ../qom/object.c:1525
+ * #19 0x0000555555ef145d in qdev_realize (dev=0x5555583fe4d0, bus=0x555557779c60, errp=0x7fffffffd840) at ../hw/core/qdev.c:276
+ * #20 0x0000555555bd8ea6 in qdev_device_add_from_qdict (opts=0x55555842c7b0, from_json=false, errp=0x7fffffffd840)
+ *     at ../system/qdev-monitor.c:726
+ * #21 0x0000555555bd8f5a in qdev_device_add (opts=0x55555740a160, errp=0x555557350860 <error_fatal>) at ../system/qdev-monitor.c:745
+ * #22 0x0000555555be38b7 in device_init_func (opaque=0x0, opts=0x55555740a160, errp=0x555557350860 <error_fatal>) at ../system/vl.c:1215
+ * #23 0x000055555617e55f in qemu_opts_foreach (list=0x55555722dfe0 <qemu_device_opts>, func=0x555555be3888 <device_init_func>, opaque=0x0,
+ *     errp=0x555557350860 <error_fatal>) at ../util/qemu-option.c:1135
+ * #24 0x0000555555be77ac in qemu_create_cli_devices () at ../system/vl.c:2656
+ * #25 0x0000555555be7a30 in qmp_x_exit_preconfig (errp=0x555557350860 <error_fatal>) at ../system/vl.c:2719
+ * #26 0x0000555555bea569 in qemu_init (argc=21, argv=0x7fffffffdc58) at ../system/vl.c:3753
+ * #27 0x000055555609a086 in main (argc=21, argv=0x7fffffffdc58) at ../system/main.c:47
+ */
+
 /* Features supported by host kernel. */
 static const int kernel_feature_bits[] = {
     VIRTIO_F_NOTIFY_ON_EMPTY,
@@ -43,6 +117,148 @@ static const int kernel_feature_bits[] = {
     VHOST_INVALID_FEATURE_BIT
 };
 
+/*
+ * 9.1的.
+ *
+ * Bootup on source:
+ *
+ * (gdb) bt
+ * #0  vhost_kernel_scsi_set_endpoint (dev=0x5555585519b0, target=0x7fffeae130f0) at ../hw/virtio/vhost-backend.c:81
+ * #1  0x0000555555afe88a in vhost_scsi_set_endpoint (s=0x555558551710) at ../hw/scsi/vhost-scsi.c:56
+ * #2  0x0000555555afeacd in vhost_scsi_start (s=0x555558551710) at ../hw/scsi/vhost-scsi.c:100
+ * #3  0x0000555555afebd8 in vhost_scsi_set_status (vdev=0x555558551710, val=15 '\017') at ../hw/scsi/vhost-scsi.c:134
+ * #4  0x0000555555e33c08 in virtio_set_status (vdev=0x555558551710, val=15 '\017') at ../hw/virtio/virtio.c:2242
+ * #5  0x0000555555b7b531 in virtio_pci_common_write (opaque=0x555558549290, addr=20, val=15, size=1) at ../hw/virtio/virtio-pci.c:1608
+ * #6  0x0000555555e63c32 in memory_region_write_accessor (mr=0x555558549e80, addr=20, value=0x7fffeae133f8, size=1, shift=0,
+ *     mask=255, attrs=...) at ../system/memory.c:497
+ * #7  0x0000555555e63f79 in access_with_adjusted_size (addr=20, value=0x7fffeae133f8, size=1, access_size_min=1, access_size_max=4,
+ *     access_fn=0x555555e63b3c <memory_region_write_accessor>, mr=0x555558549e80, attrs=...) at ../system/memory.c:573
+ * #8  0x0000555555e674ae in memory_region_dispatch_write (mr=0x555558549e80, addr=20, data=15, op=MO_8, attrs=...) at ../system/memory.c:1521
+ * #9  0x0000555555e76bdc in flatview_write_continue_step (attrs=..., buf=0x7ffff7e0c028 "\017", len=1, mr_addr=20, l=0x7fffeae134e0,
+ *     mr=0x555558549e80) at ../system/physmem.c:2803
+ * #10 0x0000555555e76cae in flatview_write_continue (fv=0x7ffbdc32a800, addr=4261429268, attrs=..., ptr=0x7ffff7e0c028,
+ *     len=1, mr_addr=20, l=1, mr=0x555558549e80) at ../system/physmem.c:2833
+ * #11 0x0000555555e76dd6 in flatview_write (fv=0x7ffbdc32a800, addr=4261429268, attrs=..., buf=0x7ffff7e0c028, len=1) at ../system/physmem.c:2864
+ * #12 0x0000555555e77250 in address_space_write (as=0x55555732a200 <address_space_memory>, addr=4261429268, attrs=...,
+ *     buf=0x7ffff7e0c028, len=1) at ../system/physmem.c:2984
+ * #13 0x0000555555e772c8 in address_space_rw (as=0x55555732a200 <address_space_memory>, addr=4261429268, attrs=...,
+ *     buf=0x7ffff7e0c028, len=1, is_write=true) at ../system/physmem.c:2994
+ * #14 0x0000555555ed4d63 in kvm_cpu_exec (cpu=0x5555576e1b00) at ../accel/kvm/kvm-all.c:3075
+ * #15 0x0000555555ed8469 in kvm_vcpu_thread_fn (arg=0x5555576e1b00) at ../accel/kvm/kvm-accel-ops.c:50
+ * #16 0x000055555616b040 in qemu_thread_start (args=0x5555576ec4a0) at ../util/qemu-thread-posix.c:541
+ * #17 0x00007ffff68aa1da in start_thread () from /lib/../lib64/libpthread.so.0
+ * #18 0x00007ffff525ae73 in clone () from /lib/../lib64/libc.so.6
+ *
+ * (gdb) bt
+ * #0  vhost_kernel_scsi_clear_endpoint (dev=0x5555585519b0, target=0x7fffeae13110) at ../hw/virtio/vhost-backend.c:87
+ * #1  0x0000555555afe9b0 in vhost_scsi_clear_endpoint (s=0x555558551710) at ../hw/scsi/vhost-scsi.c:72
+ * #2  0x0000555555afeb3f in vhost_scsi_stop (s=0x555558551710) at ../hw/scsi/vhost-scsi.c:113
+ * #3  0x0000555555afec1a in vhost_scsi_set_status (vdev=0x555558551710, val=0 '\000') at ../hw/scsi/vhost-scsi.c:140
+ * #4  0x0000555555e33c08 in virtio_set_status (vdev=0x555558551710, val=0 '\000') at ../hw/virtio/virtio.c:2242
+ * #5  0x0000555555b7b531 in virtio_pci_common_write (opaque=0x555558549290, addr=20, val=0, size=1) at ../hw/virtio/virtio-pci.c:1608
+ * #6  0x0000555555e63c32 in memory_region_write_accessor (mr=0x555558549e80, addr=20, value=0x7fffeae133f8, size=1, shift=0,
+ *     mask=255, attrs=...) at ../system/memory.c:497
+ * #7  0x0000555555e63f79 in access_with_adjusted_size (addr=20, value=0x7fffeae133f8, size=1, access_size_min=1, access_size_max=4,
+ *     access_fn=0x555555e63b3c <memory_region_write_accessor>, mr=0x555558549e80, attrs=...) at ../system/memory.c:573
+ * #8  0x0000555555e674ae in memory_region_dispatch_write (mr=0x555558549e80, addr=20, data=0, op=MO_8, attrs=...) at ../system/memory.c:1521
+ * #9  0x0000555555e76bdc in flatview_write_continue_step (attrs=..., buf=0x7ffff7e0c028 "", len=1, mr_addr=20,
+ *     l=0x7fffeae134e0, mr=0x555558549e80) at ../system/physmem.c:2803
+ * #10 0x0000555555e76cae in flatview_write_continue (fv=0x7ffbd8003990, addr=4261429268, attrs=..., ptr=0x7ffff7e0c028, len=1,
+ *     mr_addr=20, l=1, mr=0x555558549e80) at ../system/physmem.c:2833
+ * #11 0x0000555555e76dd6 in flatview_write (fv=0x7ffbd8003990, addr=4261429268, attrs=..., buf=0x7ffff7e0c028, len=1)
+ *     at ../system/physmem.c:2864
+ * #12 0x0000555555e77250 in address_space_write (as=0x55555732a200 <address_space_memory>, addr=4261429268, attrs=...,
+ *     buf=0x7ffff7e0c028, len=1) at ../system/physmem.c:2984
+ * #13 0x0000555555e772c8 in address_space_rw (as=0x55555732a200 <address_space_memory>, addr=4261429268, attrs=...,
+ *     buf=0x7ffff7e0c028, len=1, is_write=true) at ../system/physmem.c:2994
+ * #14 0x0000555555ed4d63 in kvm_cpu_exec (cpu=0x5555576e1b00) at ../accel/kvm/kvm-all.c:3075
+ * #15 0x0000555555ed8469 in kvm_vcpu_thread_fn (arg=0x5555576e1b00) at ../accel/kvm/kvm-accel-ops.c:50
+ * #16 0x000055555616b040 in qemu_thread_start (args=0x5555576ec4a0) at ../util/qemu-thread-posix.c:541
+ * #17 0x00007ffff68aa1da in start_thread () from /lib/../lib64/libpthread.so.0
+ * #18 0x00007ffff525ae73 in clone () from /lib/../lib64/libc.so.6
+ *
+ * (gdb) bt
+ * #0  vhost_kernel_scsi_set_endpoint (dev=0x5555585519b0, target=0x7fffeae130f0) at ../hw/virtio/vhost-backend.c:81
+ * #1  0x0000555555afe88a in vhost_scsi_set_endpoint (s=0x555558551710) at ../hw/scsi/vhost-scsi.c:56
+ * #2  0x0000555555afeacd in vhost_scsi_start (s=0x555558551710) at ../hw/scsi/vhost-scsi.c:100
+ * #3  0x0000555555afebd8 in vhost_scsi_set_status (vdev=0x555558551710, val=15 '\017') at ../hw/scsi/vhost-scsi.c:134
+ * #4  0x0000555555e33c08 in virtio_set_status (vdev=0x555558551710, val=15 '\017') at ../hw/virtio/virtio.c:2242
+ * #5  0x0000555555b7b531 in virtio_pci_common_write (opaque=0x555558549290, addr=20, val=15, size=1) at ../hw/virtio/virtio-pci.c:1608
+ * #6  0x0000555555e63c32 in memory_region_write_accessor (mr=0x555558549e80, addr=20, value=0x7fffeae133f8, size=1, shift=0, mask=255,
+ *     attrs=...) at ../system/memory.c:497
+ * #7  0x0000555555e63f79 in access_with_adjusted_size (addr=20, value=0x7fffeae133f8, size=1, access_size_min=1,
+ *     access_size_max=4, access_fn=0x555555e63b3c <memory_region_write_accessor>, mr=0x555558549e80, attrs=...) at ../system/memory.c:573
+ * #8  0x0000555555e674ae in memory_region_dispatch_write (mr=0x555558549e80, addr=20, data=15, op=MO_8, attrs=...) at ../system/memory.c:1521
+ * #9  0x0000555555e76bdc in flatview_write_continue_step (attrs=..., buf=0x7ffff7e0c028 "\017\020", len=1, mr_addr=20,
+ *     l=0x7fffeae134e0, mr=0x555558549e80) at ../system/physmem.c:2803
+ * #10 0x0000555555e76cae in flatview_write_continue (fv=0x7ffbd8003990, addr=4261429268, attrs=..., ptr=0x7ffff7e0c028,
+ *     len=1, mr_addr=20, l=1, mr=0x555558549e80) at ../system/physmem.c:2833
+ * #11 0x0000555555e76dd6 in flatview_write (fv=0x7ffbd8003990, addr=4261429268, attrs=..., buf=0x7ffff7e0c028, len=1)
+ *     at ../system/physmem.c:2864
+ * #12 0x0000555555e77250 in address_space_write (as=0x55555732a200 <address_space_memory>, addr=4261429268, attrs=...,
+ *     buf=0x7ffff7e0c028, len=1) at ../system/physmem.c:2984
+ * #13 0x0000555555e772c8 in address_space_rw (as=0x55555732a200 <address_space_memory>, addr=4261429268, attrs=...,
+ *     buf=0x7ffff7e0c028, len=1, is_write=true) at ../system/physmem.c:2994
+ * #14 0x0000555555ed4d63 in kvm_cpu_exec (cpu=0x5555576e1b00) at ../accel/kvm/kvm-all.c:3075
+ * #15 0x0000555555ed8469 in kvm_vcpu_thread_fn (arg=0x5555576e1b00) at ../accel/kvm/kvm-accel-ops.c:50
+ * #16 0x000055555616b040 in qemu_thread_start (args=0x5555576ec4a0) at ../util/qemu-thread-posix.c:541
+ * #17 0x00007ffff68aa1da in start_thread () from /lib/../lib64/libpthread.so.0
+ * #18 0x00007ffff525ae73 in clone () from /lib/../lib64/libc.so.6
+ *
+ * -----------------
+ *
+ * Migration from source:
+ *
+ * (gdb) bt
+ * #0  vhost_kernel_scsi_clear_endpoint (dev=0x5555585519b0, target=0x7ffbb95d5280) at ../hw/virtio/vhost-backend.c:87
+ * #1  0x0000555555afe9b0 in vhost_scsi_clear_endpoint (s=0x555558551710) at ../hw/scsi/vhost-scsi.c:72
+ * #2  0x0000555555afeb3f in vhost_scsi_stop (s=0x555558551710) at ../hw/scsi/vhost-scsi.c:113
+ * #3  0x0000555555afec1a in vhost_scsi_set_status (vdev=0x555558551710, val=15 '\017') at ../hw/scsi/vhost-scsi.c:140
+ * #4  0x0000555555e33c08 in virtio_set_status (vdev=0x555558551710, val=15 '\017') at ../hw/virtio/virtio.c:2242
+ * #5  0x0000555555e36d84 in virtio_vmstate_change (opaque=0x555558551710, running=false, state=RUN_STATE_FINISH_MIGRATE)
+ *     at ../hw/virtio/virtio.c:3428
+ * #6  0x0000555555be03d7 in vm_state_notify (running=false, state=RUN_STATE_FINISH_MIGRATE) at ../system/runstate.c:405
+ * #7  0x0000555555bd0b84 in do_vm_stop (state=RUN_STATE_FINISH_MIGRATE, send_stop=true) at ../system/cpus.c:301
+ * #8  0x0000555555bd1b08 in vm_stop (state=RUN_STATE_FINISH_MIGRATE) at ../system/cpus.c:712
+ * #9  0x0000555555bd1c83 in vm_stop_force_state (state=RUN_STATE_FINISH_MIGRATE) at ../system/cpus.c:781
+ * #10 0x0000555555c11e3b in migration_stop_vm (s=0x555557400150, state=RUN_STATE_FINISH_MIGRATE) at ../migration/migration.c:225
+ * #11 0x0000555555c17bde in migration_completion_precopy (s=0x555557400150, current_active_state=0x7ffbb95d5588)
+ *     at ../migration/migration.c:2757
+ * #12 0x0000555555c17e13 in migration_completion (s=0x555557400150) at ../migration/migration.c:2839
+ * #13 0x0000555555c18c5a in migration_iteration_run (s=0x555557400150) at ../migration/migration.c:3265
+ * #14 0x0000555555c193b8 in migration_thread (opaque=0x555557400150) at ../migration/migration.c:3531
+ * #15 0x000055555616b040 in qemu_thread_start (args=0x555557e01e50) at ../util/qemu-thread-posix.c:541
+ * #16 0x00007ffff68aa1da in start_thread () from /lib/../lib64/libpthread.so.0
+ * #17 0x00007ffff525ae73 in clone () from /lib/../lib64/libc.so.6
+ *
+ * Migration to target:
+ *
+ * (gdb) bt
+ * #0  vhost_kernel_scsi_set_endpoint (dev=0x555558552430, target=0x7fffffffd5c0) at ../hw/virtio/vhost-backend.c:81
+ * #1  0x0000555555afe88a in vhost_scsi_set_endpoint (s=0x555558552190) at ../hw/scsi/vhost-scsi.c:56
+ * #2  0x0000555555afeacd in vhost_scsi_start (s=0x555558552190) at ../hw/scsi/vhost-scsi.c:100
+ * #3  0x0000555555afebd8 in vhost_scsi_set_status (vdev=0x555558552190, val=15 '\017') at ../hw/scsi/vhost-scsi.c:134
+ * #4  0x0000555555e33c08 in virtio_set_status (vdev=0x555558552190, val=15 '\017') at ../hw/virtio/virtio.c:2242
+ * #5  0x0000555555e36d2f in virtio_vmstate_change (opaque=0x555558552190, running=true, state=RUN_STATE_RUNNING)
+ *     at ../hw/virtio/virtio.c:3420
+ * #6  0x0000555555be0320 in vm_state_notify (running=true, state=RUN_STATE_RUNNING) at ../system/runstate.c:395
+ * #7  0x0000555555bd1be6 in vm_prepare_start (step_pending=false) at ../system/cpus.c:755
+ * #8  0x0000555555bd1c1d in vm_start () at ../system/cpus.c:762
+ * #9  0x0000555555c13324 in process_incoming_migration_bh (opaque=0x5555573fd9d0) at ../migration/migration.c:757
+ * #10 0x0000555555c120bb in migration_bh_dispatch_bh (opaque=0x555557cc41e0) at ../migration/migration.c:284
+ * #11 0x0000555556186520 in aio_bh_call (bh=0x5555573fedc0) at ../util/async.c:171
+ * #12 0x000055555618666e in aio_bh_poll (ctx=0x5555573ff890) at ../util/async.c:218
+ * #13 0x0000555556165595 in aio_dispatch (ctx=0x5555573ff890) at ../util/aio-posix.c:423
+ * #14 0x0000555556186b3d in aio_ctx_dispatch (source=0x5555573ff890, callback=0x0, user_data=0x0) at ../util/async.c:360
+ * #15 0x00007ffff6fd494b in g_main_dispatch (context=0x5555573ffd80) at ../glib/gmain.c:3325
+ * #16 g_main_context_dispatch (context=0x5555573ffd80) at ../glib/gmain.c:4043
+ * #17 0x0000555556188215 in glib_pollfds_poll () at ../util/main-loop.c:287
+ * #18 0x00005555561882a3 in os_host_main_loop_wait (timeout=0) at ../util/main-loop.c:310
+ * #19 0x00005555561883d2 in main_loop_wait (nonblocking=0) at ../util/main-loop.c:589
+ * #20 0x0000555555be0f17 in qemu_main_loop () at ../system/runstate.c:826
+ * #21 0x0000555556093994 in qemu_default_main () at ../system/main.c:37
+ * #22 0x00005555560939d1 in main (argc=22, argv=0x7fffffffdbd8) at ../system/main.c:48
+ */
 static int vhost_scsi_set_endpoint(VHostSCSI *s)
 {
     VirtIOSCSICommon *vs = VIRTIO_SCSI_COMMON(s);
@@ -250,6 +466,15 @@ static void vhost_scsi_realize(DeviceState *dev, Error **errp)
         }
     }
 
+    /*
+     * 在以下调用virtio_scsi_common_realize():
+     *   - hw/scsi/vhost-scsi.c|286| <<vhost_scsi_realize>> virtio_scsi_common_realize(dev,
+     *        vhost_dummy_handle_output, vhost_dummy_handle_output, vhost_dummy_handle_output, &err);
+     *   - hw/scsi/vhost-user-scsi.c|268| <<vhost_user_scsi_realize>> virtio_scsi_common_realize(dev,
+     *        vhost_user_scsi_handle_output, vhost_user_scsi_handle_output, vhost_user_scsi_handle_output, &err);
+     *   - hw/scsi/virtio-scsi.c|1319| <<virtio_scsi_device_realize>> virtio_scsi_common_realize(dev,
+     *        virtio_scsi_handle_ctrl, virtio_scsi_handle_event, virtio_scsi_handle_cmd, &err);
+     */
     virtio_scsi_common_realize(dev,
                                vhost_dummy_handle_output,
                                vhost_dummy_handle_output,
@@ -271,6 +496,11 @@ static void vhost_scsi_realize(DeviceState *dev, Error **errp)
         }
     }
 
+    /*
+     * VHostSCSICommon *vsc:
+     * -> struct vhost_dev dev;
+     *    -> unsigned int nvqs;
+     */
     vsc->dev.nvqs = VHOST_SCSI_VQ_NUM_FIXED + vs->conf.num_queues;
     vqs = g_new0(struct vhost_virtqueue, vsc->dev.nvqs);
     vsc->dev.vqs = vqs;
diff --git a/hw/scsi/vhost-user-scsi.c b/hw/scsi/vhost-user-scsi.c
index 55e4be5b3..dcc2100f7 100644
--- a/hw/scsi/vhost-user-scsi.c
+++ b/hw/scsi/vhost-user-scsi.c
@@ -265,6 +265,15 @@ static void vhost_user_scsi_realize(DeviceState *dev, Error **errp)
         return;
     }
 
+    /*
+     * 在以下调用virtio_scsi_common_realize():
+     *   - hw/scsi/vhost-scsi.c|286| <<vhost_scsi_realize>> virtio_scsi_common_realize(dev,
+     *        vhost_dummy_handle_output, vhost_dummy_handle_output, vhost_dummy_handle_output, &err);
+     *   - hw/scsi/vhost-user-scsi.c|268| <<vhost_user_scsi_realize>> virtio_scsi_common_realize(dev,
+     *        vhost_user_scsi_handle_output, vhost_user_scsi_handle_output, vhost_user_scsi_handle_output, &err);
+     *   - hw/scsi/virtio-scsi.c|1319| <<virtio_scsi_device_realize>> virtio_scsi_common_realize(dev,
+     *        virtio_scsi_handle_ctrl, virtio_scsi_handle_event, virtio_scsi_handle_cmd, &err);
+     */
     virtio_scsi_common_realize(dev, vhost_user_scsi_handle_output,
                                vhost_user_scsi_handle_output,
                                vhost_user_scsi_handle_output, &err);
diff --git a/hw/scsi/virtio-scsi.c b/hw/scsi/virtio-scsi.c
index 6637cfeaf..f0d6e2b0a 100644
--- a/hw/scsi/virtio-scsi.c
+++ b/hw/scsi/virtio-scsi.c
@@ -82,6 +82,11 @@ static inline SCSIDevice *virtio_scsi_device_get(VirtIOSCSI *s, uint8_t *lun)
     return scsi_device_get(&s->bus, 0, lun[1], virtio_scsi_get_lun(lun));
 }
 
+/*
+ * called by:
+ *   - hw/scsi/virtio-scsi.c|247| <<virtio_scsi_pop_req>> virtio_scsi_init_req(s, vq, req);
+ *   - hw/scsi/virtio-scsi.c|276| <<virtio_scsi_load_request>> virtio_scsi_init_req(s, vs->cmd_vqs[n], req);
+ */
 static void virtio_scsi_init_req(VirtIOSCSI *s, VirtQueue *vq, VirtIOSCSIReq *req)
 {
     VirtIODevice *vdev = VIRTIO_DEVICE(s);
@@ -91,6 +96,12 @@ static void virtio_scsi_init_req(VirtIOSCSI *s, VirtQueue *vq, VirtIOSCSIReq *re
     req->vq = vq;
     req->dev = s;
     qemu_sglist_init(&req->qsgl, DEVICE(s), 8, vdev->dma_as);
+    /*
+     * VirtIOSCSIReq *req:
+     * -> VirtQueueElement elem;
+     * -> QEMUSGList qsgl;
+     * -> QEMUIOVector resp_iov;
+     */
     qemu_iovec_init(&req->resp_iov, 1);
     memset((uint8_t *)req + zero_skip, 0, sizeof(*req) - zero_skip);
 }
@@ -177,12 +188,31 @@ static size_t qemu_sgl_concat(VirtIOSCSIReq *req, struct iovec *iov,
     return copied;
 }
 
+/*
+ * called by:
+ */
 static int virtio_scsi_parse_req(VirtIOSCSIReq *req,
                                  unsigned req_size, unsigned resp_size)
 {
     VirtIODevice *vdev = (VirtIODevice *) req->dev;
     size_t in_size, out_size;
 
+    /*
+     * VirtIOSCSIReq *req:
+     *     union {
+     *         VirtIOSCSICmdResp     cmd;
+     *         VirtIOSCSICtrlTMFResp tmf;
+     *         VirtIOSCSICtrlANResp  an;
+     *         VirtIOSCSIEvent       event;
+     *     } resp;
+     *     union {
+     *         VirtIOSCSICmdReq      cmd;
+     *         VirtIOSCSICtrlTMFReq  tmf;
+     *         VirtIOSCSICtrlANReq   an;
+     *     } req;
+     *
+     * 把req header拷贝到req->req
+     */
     if (iov_to_buf(req->elem.out_sg, req->elem.out_num, 0,
                    &req->req, req_size) < req_size) {
         return -EINVAL;
@@ -235,15 +265,30 @@ static int virtio_scsi_parse_req(VirtIOSCSIReq *req,
     return 0;
 }
 
+/*
+ * called by:
+ *   - hw/scsi/virtio-scsi.c|627| <<virtio_scsi_handle_ctrl_vq>> while ((req = virtio_scsi_pop_req(s, vq))) {
+ *   - hw/scsi/virtio-scsi.c|860| <<virtio_scsi_handle_cmd_vq>> while ((req = virtio_scsi_pop_req(s, vq))) {
+ *   - hw/scsi/virtio-scsi.c|990| <<virtio_scsi_push_event>> req = virtio_scsi_pop_req(s, vs->event_vq);
+ */
 static VirtIOSCSIReq *virtio_scsi_pop_req(VirtIOSCSI *s, VirtQueue *vq)
 {
     VirtIOSCSICommon *vs = (VirtIOSCSICommon *)s;
     VirtIOSCSIReq *req;
 
+    /*
+     * VirtIOSCSIReq *req:
+     * -> VirtQueueElement elem;
+     */
     req = virtqueue_pop(vq, sizeof(VirtIOSCSIReq) + vs->cdb_size);
     if (!req) {
         return NULL;
     }
+    /*
+     * called by:
+     *   - hw/scsi/virtio-scsi.c|247| <<virtio_scsi_pop_req>> virtio_scsi_init_req(s, vq, req);
+     *   - hw/scsi/virtio-scsi.c|276| <<virtio_scsi_load_request>> virtio_scsi_init_req(s, vs->cmd_vqs[n], req);
+     */
     virtio_scsi_init_req(s, vq, req);
     return req;
 }
@@ -554,6 +599,10 @@ fail:
     return ret;
 }
 
+/*
+ * called by:
+ *   - hw/scsi/virtio-scsi.c|614| <<virtio_scsi_handle_ctrl_vq>> virtio_scsi_handle_ctrl_req(s, req);
+ */
 static void virtio_scsi_handle_ctrl_req(VirtIOSCSI *s, VirtIOSCSIReq *req)
 {
     VirtIODevice *vdev = (VirtIODevice *)s;
@@ -610,6 +659,12 @@ static void virtio_scsi_handle_ctrl_vq(VirtIOSCSI *s, VirtQueue *vq)
 {
     VirtIOSCSIReq *req;
 
+    /*
+     * called by:
+     *   - hw/scsi/virtio-scsi.c|627| <<virtio_scsi_handle_ctrl_vq>> while ((req = virtio_scsi_pop_req(s, vq))) {
+     *   - hw/scsi/virtio-scsi.c|860| <<virtio_scsi_handle_cmd_vq>> while ((req = virtio_scsi_pop_req(s, vq))) {
+     *   - hw/scsi/virtio-scsi.c|990| <<virtio_scsi_push_event>> req = virtio_scsi_pop_req(s, vs->event_vq);
+     */
     while ((req = virtio_scsi_pop_req(s, vq))) {
         virtio_scsi_handle_ctrl_req(s, req);
     }
@@ -775,6 +830,10 @@ static void virtio_scsi_fail_cmd_req(VirtIOSCSIReq *req)
     virtio_scsi_complete_cmd_req(req);
 }
 
+/*
+ * called by:
+ *   - hw/scsi/virtio-scsi.c|861| <<virtio_scsi_handle_cmd_vq>> ret = virtio_scsi_handle_cmd_req_prepare(s, req);
+ */
 static int virtio_scsi_handle_cmd_req_prepare(VirtIOSCSI *s, VirtIOSCSIReq *req)
 {
     VirtIOSCSICommon *vs = VIRTIO_SCSI_COMMON(s);
@@ -843,6 +902,12 @@ static void virtio_scsi_handle_cmd_vq(VirtIOSCSI *s, VirtQueue *vq)
             virtio_queue_set_notification(vq, 0);
         }
 
+        /*
+	 * called by:
+	 *   - hw/scsi/virtio-scsi.c|627| <<virtio_scsi_handle_ctrl_vq>> while ((req = virtio_scsi_pop_req(s, vq))) {
+	 *   - hw/scsi/virtio-scsi.c|860| <<virtio_scsi_handle_cmd_vq>> while ((req = virtio_scsi_pop_req(s, vq))) {
+	 *   - hw/scsi/virtio-scsi.c|990| <<virtio_scsi_push_event>> req = virtio_scsi_pop_req(s, vs->event_vq);
+	 */
         while ((req = virtio_scsi_pop_req(s, vq))) {
             ret = virtio_scsi_handle_cmd_req_prepare(s, req);
             if (!ret) {
@@ -973,6 +1038,12 @@ static void virtio_scsi_push_event(VirtIOSCSI *s,
         return;
     }
 
+    /*
+     * called by:
+     *   - hw/scsi/virtio-scsi.c|627| <<virtio_scsi_handle_ctrl_vq>> while ((req = virtio_scsi_pop_req(s, vq))) {
+     *   - hw/scsi/virtio-scsi.c|860| <<virtio_scsi_handle_cmd_vq>> while ((req = virtio_scsi_pop_req(s, vq))) {
+     *   - hw/scsi/virtio-scsi.c|990| <<virtio_scsi_push_event>> req = virtio_scsi_pop_req(s, vs->event_vq);
+     */
     req = virtio_scsi_pop_req(s, vs->event_vq);
     if (!req) {
         s->events_dropped = true;
@@ -1008,6 +1079,10 @@ static void virtio_scsi_push_event(VirtIOSCSI *s,
     virtio_scsi_complete_req(req);
 }
 
+/*
+ * called by:
+ *   - hw/scsi/virtio-scsi.c|1100| <<virtio_scsi_handle_event>> virtio_scsi_handle_event_vq(s, vq);
+ */
 static void virtio_scsi_handle_event_vq(VirtIOSCSI *s, VirtQueue *vq)
 {
     if (s->events_dropped) {
@@ -1192,6 +1267,15 @@ static struct SCSIBusInfo virtio_scsi_scsi_info = {
     .drained_end = virtio_scsi_drained_end,
 };
 
+/*
+ * 在以下调用virtio_scsi_common_realize():
+ *   - hw/scsi/vhost-scsi.c|286| <<vhost_scsi_realize>> virtio_scsi_common_realize(dev,
+ *        vhost_dummy_handle_output, vhost_dummy_handle_output, vhost_dummy_handle_output, &err);
+ *   - hw/scsi/vhost-user-scsi.c|268| <<vhost_user_scsi_realize>> virtio_scsi_common_realize(dev,
+ *        vhost_user_scsi_handle_output, vhost_user_scsi_handle_output, vhost_user_scsi_handle_output, &err);
+ *   - hw/scsi/virtio-scsi.c|1319| <<virtio_scsi_device_realize>> virtio_scsi_common_realize(dev,
+ *        virtio_scsi_handle_ctrl, virtio_scsi_handle_event, virtio_scsi_handle_cmd, &err);
+ */
 void virtio_scsi_common_realize(DeviceState *dev,
                                 VirtIOHandleOutput ctrl,
                                 VirtIOHandleOutput evt,
@@ -1241,6 +1325,15 @@ static void virtio_scsi_device_realize(DeviceState *dev, Error **errp)
     QTAILQ_INIT(&s->tmf_bh_list);
     qemu_mutex_init(&s->tmf_bh_lock);
 
+    /*
+     * 在以下调用virtio_scsi_common_realize():
+     *   - hw/scsi/vhost-scsi.c|286| <<vhost_scsi_realize>> virtio_scsi_common_realize(dev,
+     *        vhost_dummy_handle_output, vhost_dummy_handle_output, vhost_dummy_handle_output, &err);
+     *   - hw/scsi/vhost-user-scsi.c|268| <<vhost_user_scsi_realize>> virtio_scsi_common_realize(dev,
+     *        vhost_user_scsi_handle_output, vhost_user_scsi_handle_output, vhost_user_scsi_handle_output, &err);
+     *   - hw/scsi/virtio-scsi.c|1319| <<virtio_scsi_device_realize>> virtio_scsi_common_realize(dev,
+     *        virtio_scsi_handle_ctrl, virtio_scsi_handle_event, virtio_scsi_handle_cmd, &err);
+     */
     virtio_scsi_common_realize(dev,
                                virtio_scsi_handle_ctrl,
                                virtio_scsi_handle_event,
diff --git a/hw/vfio/common.c b/hw/vfio/common.c
index dcef44fe5..8d726ab51 100644
--- a/hw/vfio/common.c
+++ b/hw/vfio/common.c
@@ -194,6 +194,13 @@ static bool vfio_devices_all_dirty_tracking(VFIOContainerBase *bcontainer)
     return true;
 }
 
+/*
+ * called by:
+ *   - hw/vfio/common.c|1074| <<vfio_listener_log_global_start>> if (vfio_devices_all_device_dirty_tracking(bcontainer)) {
+ *   - hw/vfio/common.c|1093| <<vfio_listener_log_global_stop>> if (vfio_devices_all_device_dirty_tracking(bcontainer)) {
+ *   - hw/vfio/common.c|1160| <<vfio_get_dirty_bitmap>> vfio_devices_all_device_dirty_tracking(bcontainer);
+ *   - hw/vfio/container.c|135| <<vfio_legacy_dma_unmap>> if (!vfio_devices_all_device_dirty_tracking(bcontainer) &&
+ */
 bool vfio_devices_all_device_dirty_tracking(const VFIOContainerBase *bcontainer)
 {
     VFIODevice *vbasedev;
diff --git a/hw/vfio/pci.c b/hw/vfio/pci.c
index 14bcc725c..2384f26b0 100644
--- a/hw/vfio/pci.c
+++ b/hw/vfio/pci.c
@@ -337,6 +337,11 @@ static void vfio_intx_disable(VFIOPCIDevice *vdev)
 /*
  * MSI/X
  */
+/*
+ *   0000380000000000-0000380000001fff (prio 0, ramd): 0000:21:00.0 BAR 0 mmaps[0] KVM
+ *   0000380000002000-00003800000023ff (prio 0, i/o): msix-table
+ *   0000380000002400-0000380001ffffff (prio 0, ramd): 0000:21:00.0 BAR 0 mmaps[0] @0000000000002400
+ */
 static void vfio_msi_interrupt(void *opaque)
 {
     VFIOMSIVector *vector = opaque;
@@ -356,7 +361,29 @@ static void vfio_msi_interrupt(void *opaque)
 
         /* A masked vector firing needs to use the PBA, enable it */
         if (msix_is_masked(&vdev->pdev, nr)) {
+            /*
+	     * 在以下使用VFIOMSIXInfo->pending:
+	     *   - hw/vfio/pci.c|364| <<vfio_msi_interrupt>> set_bit(nr, vdev->msix->pending);
+	     *   - hw/vfio/pci.c|618| <<vfio_msix_vector_do_use>> clear_bit(nr, vdev->msix->pending);
+	     *   - hw/vfio/pci.c|619| <<vfio_msix_vector_do_use>> if (find_first_bit(vdev->msix->pending,
+	     *   - hw/vfio/pci.c|901| <<vfio_msix_disable>> memset(vdev->msix->pending, 0,
+	     *   - hw/vfio/pci.c|1708| <<vfio_msix_setup>> vdev->msix->pending = g_new0(unsigned long ,
+	     *   - hw/vfio/pci.c|1777| <<vfio_teardown_msi>> g_free(vdev->msix->pending);
+	     *
+	     * VFIOPCIDevice *vdev:
+	     * -> VFIOMSIXInfo *msix;
+	     *    -> unsigned long *pending;
+	     */
             set_bit(nr, vdev->msix->pending);
+	    /*
+	     * 在以下使用PCIDevice->msix_pba_mmio:
+	     *   -  hw/pci/msix.c|377| <<msix_init>> memory_region_init_io(&dev->msix_pba_mmio, OBJECT(dev), &msix_pba_mmio_ops, dev,
+	     *   - hw/pci/msix.c|379| <<msix_init>> memory_region_add_subregion(pba_bar, pba_offset, &dev->msix_pba_mmio);
+	     *   - hw/pci/msix.c|459| <<msix_uninit>> memory_region_del_subregion(pba_bar, &dev->msix_pba_mmio);
+	     *   - hw/vfio/pci.c|360| <<vfio_msi_interrupt>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, true);
+	     *   - hw/vfio/pci.c|607| <<vfio_msix_vector_do_use>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+	     *   - hw/vfio/pci.c|1684| <<vfio_msix_setup>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+	     */
             memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, true);
             trace_vfio_msix_pba_enable(vdev->vbasedev.name);
         }
@@ -511,6 +538,10 @@ static void vfio_update_kvm_msi_virq(VFIOMSIVector *vector, MSIMessage msg,
     kvm_irqchip_commit_routes(kvm_state);
 }
 
+/*
+ * 在以下使用vfio_msix_vector_do_use():
+ *   - hw/vfio/pci.c|640| <<vfio_msix_vector_use>> return vfio_msix_vector_do_use(pdev, nr, &msg, vfio_msi_interrupt);
+ */
 static int vfio_msix_vector_do_use(PCIDevice *pdev, unsigned int nr,
                                    MSIMessage *msg, IOHandler *handler)
 {
@@ -600,10 +631,28 @@ static int vfio_msix_vector_do_use(PCIDevice *pdev, unsigned int nr,
         }
     }
 
+    /*
+     * 在以下使用VFIOMSIXInfo->pending:
+     *   - hw/vfio/pci.c|364| <<vfio_msi_interrupt>> set_bit(nr, vdev->msix->pending);
+     *   - hw/vfio/pci.c|618| <<vfio_msix_vector_do_use>> clear_bit(nr, vdev->msix->pending);
+     *   - hw/vfio/pci.c|619| <<vfio_msix_vector_do_use>> if (find_first_bit(vdev->msix->pending,
+     *   - hw/vfio/pci.c|901| <<vfio_msix_disable>> memset(vdev->msix->pending, 0,
+     *   - hw/vfio/pci.c|1708| <<vfio_msix_setup>> vdev->msix->pending = g_new0(unsigned long ,
+     *   - hw/vfio/pci.c|1777| <<vfio_teardown_msi>> g_free(vdev->msix->pending);
+     */
     /* Disable PBA emulation when nothing more is pending. */
     clear_bit(nr, vdev->msix->pending);
     if (find_first_bit(vdev->msix->pending,
                        vdev->nr_vectors) == vdev->nr_vectors) {
+        /*
+	 * 在以下使用PCIDevice->msix_pba_mmio:
+	 *   -  hw/pci/msix.c|377| <<msix_init>> memory_region_init_io(&dev->msix_pba_mmio, OBJECT(dev), &msix_pba_mmio_ops, dev,
+	 *   - hw/pci/msix.c|379| <<msix_init>> memory_region_add_subregion(pba_bar, pba_offset, &dev->msix_pba_mmio);
+	 *   - hw/pci/msix.c|459| <<msix_uninit>> memory_region_del_subregion(pba_bar, &dev->msix_pba_mmio);
+	 *   - hw/vfio/pci.c|360| <<vfio_msi_interrupt>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, true);
+	 *   - hw/vfio/pci.c|607| <<vfio_msix_vector_do_use>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+	 *   - hw/vfio/pci.c|1684| <<vfio_msix_setup>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+	 */
         memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
         trace_vfio_msix_pba_disable(vdev->vbasedev.name);
     }
@@ -617,6 +666,41 @@ static int vfio_msix_vector_use(PCIDevice *pdev,
     return vfio_msix_vector_do_use(pdev, nr, &msg, vfio_msi_interrupt);
 }
 
+/*
+ * (gdb) bt
+ * #0  vfio_msix_vector_release (pdev=0x55555828b900, nr=1) at ../hw/vfio/pci.c:621
+ * #1  0x0000555555a82971 in msix_fire_vector_notifier (dev=0x55555828b900, vector=1, is_masked=true) at ../hw/pci/msix.c:117
+ * #2  0x0000555555a82a7f in msix_handle_mask_update (dev=0x55555828b900, vector=1, was_masked=false) at ../hw/pci/msix.c:140
+ * #3  0x0000555555a82ee1 in msix_table_mmio_write (opaque=0x55555828b900, addr=28, val=1, size=4) at ../hw/pci/msix.c:231
+ * #4  0x0000555555e563ed in memory_region_write_accessor (mr=0x55555828bf90, addr=28, value=0x7ffff303a668, size=4, shift=0,
+ *     mask=4294967295, attrs=...) at ../system/memory.c:497
+ * #5  0x0000555555e56734 in access_with_adjusted_size (addr=28, value=0x7ffff303a668, size=4, access_size_min=1, access_size_max=4,
+ *     access_fn=0x555555e562f7 <memory_region_write_accessor>, mr=0x55555828bf90, attrs=...) at ../system/memory.c:573
+ * #6  0x0000555555e59ef8 in memory_region_dispatch_write (mr=0x55555828bf90, addr=28, data=1, op=MO_32, attrs=...) at
+ *     ../system/memory.c:1553
+ * #7  0x0000555555e697eb in flatview_write_continue_step (attrs=..., buf=0x7ffff7ff4028 "\001", len=4, mr_addr=28, l=0x7ffff303a750,
+ *     mr=0x55555828bf90) at ../system/physmem.c:2786
+ * #8  0x0000555555e698bd in flatview_write_continue (fv=0x7fffe828cfc0, addr=61572651163676, attrs=..., ptr=0x7ffff7ff4028, len=4,
+ *     mr_addr=28, l=4, mr=0x55555828bf90) at ../system/physmem.c:2816
+ * #9  0x0000555555e699e5 in flatview_write (fv=0x7fffe828cfc0, addr=61572651163676, attrs=..., buf=0x7ffff7ff4028, len=4) at
+ *     ../system/physmem.c:2847
+ * #10 0x0000555555e69e5f in address_space_write (as=0x5555572c15a0 <address_space_memory>, addr=61572651163676, attrs=...,
+ *     buf=0x7ffff7ff4028, len=4) at ../system/physmem.c:2967
+ * #11 0x0000555555e69ed7 in address_space_rw (as=0x5555572c15a0 <address_space_memory>, addr=61572651163676, attrs=...,
+ *     buf=0x7ffff7ff4028, len=4, is_write=true) at ../system/physmem.c:2977
+ * #12 0x0000555555ec9d35 in kvm_cpu_exec (cpu=0x55555764a630) at ../accel/kvm/kvm-all.c:3184
+ * #13 0x0000555555ecd45c in kvm_vcpu_thread_fn (arg=0x55555764a630) at ../accel/kvm/kvm-accel-ops.c:50
+ * #14 0x000055555615a02e in qemu_thread_start (args=0x5555576551c0) at ../util/qemu-thread-posix.c:541
+ * #15 0x00007ffff5c081da in start_thread () from /lib64/libpthread.so.0
+ * #16 0x00007ffff58398d3 in clone () from /lib64/libc.so.6
+ *
+ * vfio有两个notifier:
+ * - VFIOMSIVector->kvm_interrupt: fastpath, 用来和irqbypass绑定.
+ * 向IRQFD注册过.
+ * - VFIOMSIVector->interrupt: 有QEMU userspace的fd handler, 可以接收VFIO的通知.
+ * 可以用于mask中断的时候.
+ * 从来没有向IRQFD注册过.
+ */
 static void vfio_msix_vector_release(PCIDevice *pdev, unsigned int nr)
 {
     VFIOPCIDevice *vdev = VFIO_PCI(pdev);
@@ -840,6 +924,15 @@ static void vfio_msix_disable(VFIOPCIDevice *vdev)
         error_reportf_err(err, VFIO_MSG_PREFIX, vdev->vbasedev.name);
     }
 
+    /*
+     * 在以下使用VFIOMSIXInfo->pending:
+     *   - hw/vfio/pci.c|364| <<vfio_msi_interrupt>> set_bit(nr, vdev->msix->pending);
+     *   - hw/vfio/pci.c|618| <<vfio_msix_vector_do_use>> clear_bit(nr, vdev->msix->pending);
+     *   - hw/vfio/pci.c|619| <<vfio_msix_vector_do_use>> if (find_first_bit(vdev->msix->pending,
+     *   - hw/vfio/pci.c|901| <<vfio_msix_disable>> memset(vdev->msix->pending, 0,
+     *   - hw/vfio/pci.c|1708| <<vfio_msix_setup>> vdev->msix->pending = g_new0(unsigned long ,
+     *   - hw/vfio/pci.c|1777| <<vfio_teardown_msi>> g_free(vdev->msix->pending);
+     */
     memset(vdev->msix->pending, 0,
            BITS_TO_LONGS(vdev->msix->entries) * sizeof(unsigned long));
 
@@ -1647,6 +1740,15 @@ static bool vfio_msix_setup(VFIOPCIDevice *vdev, int pos, Error **errp)
     int ret;
     Error *err = NULL;
 
+    /*
+     * 在以下使用VFIOMSIXInfo->pending:
+     *   - hw/vfio/pci.c|364| <<vfio_msi_interrupt>> set_bit(nr, vdev->msix->pending);
+     *   - hw/vfio/pci.c|618| <<vfio_msix_vector_do_use>> clear_bit(nr, vdev->msix->pending);
+     *   - hw/vfio/pci.c|619| <<vfio_msix_vector_do_use>> if (find_first_bit(vdev->msix->pending,
+     *   - hw/vfio/pci.c|901| <<vfio_msix_disable>> memset(vdev->msix->pending, 0,
+     *   - hw/vfio/pci.c|1708| <<vfio_msix_setup>> vdev->msix->pending = g_new0(unsigned long ,
+     *   - hw/vfio/pci.c|1777| <<vfio_teardown_msi>> g_free(vdev->msix->pending);
+     */
     vdev->msix->pending = g_new0(unsigned long,
                                  BITS_TO_LONGS(vdev->msix->entries));
     ret = msix_init(&vdev->pdev, vdev->msix->entries,
@@ -1681,6 +1783,15 @@ static bool vfio_msix_setup(VFIOPCIDevice *vdev, int pos, Error **errp)
      * vector-use notifier is called, which occurs on unmask, we test whether
      * PBA emulation is needed and again disable if not.
      */
+    /*
+     * 在以下使用PCIDevice->msix_pba_mmio:
+     *   -  hw/pci/msix.c|377| <<msix_init>> memory_region_init_io(&dev->msix_pba_mmio, OBJECT(dev), &msix_pba_mmio_ops, dev,
+     *   - hw/pci/msix.c|379| <<msix_init>> memory_region_add_subregion(pba_bar, pba_offset, &dev->msix_pba_mmio);
+     *   - hw/pci/msix.c|459| <<msix_uninit>> memory_region_del_subregion(pba_bar, &dev->msix_pba_mmio);
+     *   - hw/vfio/pci.c|360| <<vfio_msi_interrupt>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, true);
+     *   - hw/vfio/pci.c|607| <<vfio_msix_vector_do_use>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+     *   - hw/vfio/pci.c|1684| <<vfio_msix_setup>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+     */
     memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
 
     /*
@@ -1707,6 +1818,15 @@ static void vfio_teardown_msi(VFIOPCIDevice *vdev)
         msix_uninit(&vdev->pdev,
                     vdev->bars[vdev->msix->table_bar].mr,
                     vdev->bars[vdev->msix->pba_bar].mr);
+        /*
+	 * 在以下使用VFIOMSIXInfo->pending:
+         *   - hw/vfio/pci.c|364| <<vfio_msi_interrupt>> set_bit(nr, vdev->msix->pending);
+         *   - hw/vfio/pci.c|618| <<vfio_msix_vector_do_use>> clear_bit(nr, vdev->msix->pending);
+         *   - hw/vfio/pci.c|619| <<vfio_msix_vector_do_use>> if (find_first_bit(vdev->msix->pending,
+         *   - hw/vfio/pci.c|901| <<vfio_msix_disable>> memset(vdev->msix->pending, 0,
+         *   - hw/vfio/pci.c|1708| <<vfio_msix_setup>> vdev->msix->pending = g_new0(unsigned long ,
+         *   - hw/vfio/pci.c|1777| <<vfio_teardown_msi>> g_free(vdev->msix->pending);
+	 */
         g_free(vdev->msix->pending);
     }
 }
diff --git a/hw/vfio/pci.h b/hw/vfio/pci.h
index 5ad090a22..2174bde1c 100644
--- a/hw/vfio/pci.h
+++ b/hw/vfio/pci.h
@@ -112,6 +112,15 @@ typedef struct VFIOMSIXInfo {
     uint16_t entries;
     uint32_t table_offset;
     uint32_t pba_offset;
+    /*
+     * 在以下使用VFIOMSIXInfo->pending:
+     *   - hw/vfio/pci.c|364| <<vfio_msi_interrupt>> set_bit(nr, vdev->msix->pending);
+     *   - hw/vfio/pci.c|618| <<vfio_msix_vector_do_use>> clear_bit(nr, vdev->msix->pending);
+     *   - hw/vfio/pci.c|619| <<vfio_msix_vector_do_use>> if (find_first_bit(vdev->msix->pending,
+     *   - hw/vfio/pci.c|901| <<vfio_msix_disable>> memset(vdev->msix->pending, 0,
+     *   - hw/vfio/pci.c|1708| <<vfio_msix_setup>> vdev->msix->pending = g_new0(unsigned long ,
+     *   - hw/vfio/pci.c|1777| <<vfio_teardown_msi>> g_free(vdev->msix->pending);
+     */
     unsigned long *pending;
     bool noresize;
 } VFIOMSIXInfo;
diff --git a/hw/virtio/vhost-scsi-pci.c b/hw/virtio/vhost-scsi-pci.c
index 08980bc23..43c86834b 100644
--- a/hw/virtio/vhost-scsi-pci.c
+++ b/hw/virtio/vhost-scsi-pci.c
@@ -24,6 +24,39 @@
 #include "hw/virtio/virtio-pci.h"
 #include "qom/object.h"
 
+/*
+ * vhost-scsi的stack.
+ *
+ * (gdb) bt
+ * #0  virtio_scsi_get_config (vdev=0x555558406a90, config=0x5555584313b0 "") at ../hw/scsi/virtio-scsi.c:888
+ * #1  0x0000555555e3d3e0 in virtio_config_modern_readl (vdev=0x555558406a90, addr=0) at ../hw/virtio/virtio-config-io.c:148
+ * #2  0x0000555555b7ba61 in virtio_pci_device_read (opaque=0x5555583fe4d0, addr=0, size=4) at ../hw/virtio/virtio-pci.c:1778
+ * #3  0x0000555555e65ce2 in memory_region_read_accessor (mr=0x5555583ff2f0, addr=0, value=0x7fffeb0d5458, size=4, shift=0,
+ *     mask=4294967295, attrs=...) at ../system/memory.c:445
+ * #4  0x0000555555e6633a in access_with_adjusted_size (addr=0, value=0x7fffeb0d5458, size=4, access_size_min=1,
+ *     access_size_max=4, access_fn=0x555555e65c97 <memory_region_read_accessor>, mr=0x5555583ff2f0, attrs=...)
+ *     at ../system/memory.c:573
+ * #5  0x0000555555e6969d in memory_region_dispatch_read1 (mr=0x5555583ff2f0, addr=0, pval=0x7fffeb0d5458, size=4, attrs=...)
+ *     at ../system/memory.c:1458
+ * #6  0x0000555555e697cc in memory_region_dispatch_read (mr=0x5555583ff2f0, addr=0, pval=0x7fffeb0d5458, op=MO_32, attrs=...)
+ *     at ../system/memory.c:1491
+ * #7  0x0000555555e796f6 in flatview_read_continue_step (attrs=..., buf=0x7ffff7ff0028 "\v", len=4, mr_addr=0, l=0x7fffeb0d54d0,
+ *     mr=0x5555583ff2f0) at ../system/physmem.c:2867
+ * #8  0x0000555555e797f4 in flatview_read_continue (fv=0x7ffbd4000fc0, addr=61572651163648, attrs=..., ptr=0x7ffff7ff0028,
+ *     len=4, mr_addr=0, l=4, mr=0x5555583ff2f0) at ../system/physmem.c:2908
+ * #9  0x0000555555e7991c in flatview_read (fv=0x7ffbd4000fc0, addr=61572651163648, attrs=..., buf=0x7ffff7ff0028, len=4)
+ *     at ../system/physmem.c:2938
+ * #10 0x0000555555e799bb in address_space_read_full (as=0x555557334980 <address_space_memory>, addr=61572651163648, attrs=...,
+ *     buf=0x7ffff7ff0028, len=4) at ../system/physmem.c:2951
+ * #11 0x0000555555e79afd in address_space_rw (as=0x555557334980 <address_space_memory>, addr=61572651163648, attrs=...,
+ *     buf=0x7ffff7ff0028, len=4, is_write=false) at ../system/physmem.c:2979
+ * #12 0x0000555555ed996b in kvm_cpu_exec (cpu=0x5555576f0660) at ../accel/kvm/kvm-all.c:3184
+ * #13 0x0000555555edd092 in kvm_vcpu_thread_fn (arg=0x5555576f0660) at ../accel/kvm/kvm-accel-ops.c:50
+ * #14 0x0000555556172954 in qemu_thread_start (args=0x5555576fa4e0) at ../util/qemu-thread-posix.c:541
+ * #15 0x00007ffff68a91da in start_thread () from /lib64/libpthread.so.0
+ * #16 0x00007ffff52488d3 in clone () from /lib64/libc.so.6
+ */
+
 typedef struct VHostSCSIPCI VHostSCSIPCI;
 
 /*
diff --git a/hw/virtio/vhost-user.c b/hw/virtio/vhost-user.c
index f170f0b25..21a7dae8e 100644
--- a/hw/virtio/vhost-user.c
+++ b/hw/virtio/vhost-user.c
@@ -502,6 +502,11 @@ static void vhost_user_fill_msg_region(VhostUserMemoryRegion *dst,
     dst->mmap_offset = mmap_offset;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/vhost-user.c|923| <<vhost_user_set_mem_table_postcopy>> ret = vhost_user_fill_set_mem_table_msg(u, dev, &msg, fds, &fd_num,
+ *   - hw/virtio/vhost-user.c|1041| <<vhost_user_set_mem_table>> ret = vhost_user_fill_set_mem_table_msg(u, dev, &msg, fds, &fd_num,
+ */
 static int vhost_user_fill_set_mem_table_msg(struct vhost_user *u,
                                              struct vhost_dev *dev,
                                              VhostUserMsg *msg,
@@ -1038,6 +1043,11 @@ static int vhost_user_set_mem_table(struct vhost_dev *dev,
             return ret;
         }
     } else {
+	/*
+	 * called by:
+	 *   - hw/virtio/vhost-user.c|923| <<vhost_user_set_mem_table_postcopy>> ret = vhost_user_fill_set_mem_table_msg(u, dev, &msg, fds, &fd_num,
+	 *   - hw/virtio/vhost-user.c|1041| <<vhost_user_set_mem_table>> ret = vhost_user_fill_set_mem_table_msg(u, dev, &msg, fds, &fd_num,
+	 */
         ret = vhost_user_fill_set_mem_table_msg(u, dev, &msg, fds, &fd_num,
                                                 false);
         if (ret < 0) {
diff --git a/hw/virtio/vhost.c b/hw/virtio/vhost.c
index c40f48ac4..410176b64 100644
--- a/hw/virtio/vhost.c
+++ b/hw/virtio/vhost.c
@@ -338,6 +338,86 @@ static int vhost_set_backend_type(struct vhost_dev *dev,
     return r;
 }
 
+/*
+ * 关于cancel migration.
+ *
+ * vhost_net启动的时候.
+ *
+ * (gdb) bt
+ * #0  vhost_dev_set_features (dev=0x555557686cc0, enable_log=false) at ../hw/virtio/vhost.c:989
+ * #1  0x0000555555b94909 in vhost_dev_start (hdev=0x555557686cc0, vdev=0x555558428ba0, vrings=false) at ../hw/virtio/vhost.c:2082
+ * #2  0x0000555555a47c24 in vhost_net_start_one (net=0x555557686cc0, dev=0x555558428ba0) at ../hw/net/vhost_net.c:280
+ * #3  0x0000555555a48278 in vhost_net_start (dev=0x555558428ba0, ncs=0x555558459418, data_queue_pairs=2, cvq=0) at ../hw/net/vhost_net.c:421
+ * #4  0x0000555555df0a1b in virtio_net_vhost_status (n=0x555558428ba0, status=15 '\017') at ../hw/net/virtio-net.c:311
+ * #5  0x0000555555df0d2b in virtio_net_set_status (vdev=0x555558428ba0, status=15 '\017') at ../hw/net/virtio-net.c:393
+ * #6  0x0000555555e33c08 in virtio_set_status (vdev=0x555558428ba0, val=15 '\017') at ../hw/virtio/virtio.c:2242
+ * #7  0x0000555555b7b531 in virtio_pci_common_write (opaque=0x555558420720, addr=20, val=15, size=1) at ../hw/virtio/virtio-pci.c:1608
+ * #8  0x0000555555e63c32 in memory_region_write_accessor (mr=0x555558421310, addr=20, value=0x7fffe9ed43f8, size=1, shift=0, mask=255, attrs=...)
+ *     at ../system/memory.c:497
+ * #9  0x0000555555e63f79 in access_with_adjusted_size (addr=20, value=0x7fffe9ed43f8, size=1, access_size_min=1, access_size_max=4,
+ *     access_fn=0x555555e63b3c <memory_region_write_accessor>, mr=0x555558421310, attrs=...) at ../system/memory.c:573
+ * #10 0x0000555555e674ae in memory_region_dispatch_write (mr=0x555558421310, addr=20, data=15, op=MO_8, attrs=...) at ../system/memory.c:1521
+ * #11 0x0000555555e76bdc in flatview_write_continue_step (attrs=..., buf=0x7ffff0036028 "\017", len=1, mr_addr=20, l=0x7fffe9ed44e0, mr=0x555558421310)
+ *     at ../system/physmem.c:2803
+ * #12 0x0000555555e76cae in flatview_write_continue (fv=0x7ffe4c000fc0, addr=4261412884, attrs=..., ptr=0x7ffff0036028, len=1, mr_addr=20, l=1,
+ *     mr=0x555558421310) at ../system/physmem.c:2833
+ * #13 0x0000555555e76dd6 in flatview_write (fv=0x7ffe4c000fc0, addr=4261412884, attrs=..., buf=0x7ffff0036028, len=1) at ../system/physmem.c:2864
+ * #14 0x0000555555e77250 in address_space_write (as=0x555557328200 <address_space_memory>, addr=4261412884, attrs=..., buf=0x7ffff0036028, len=1)
+ *     at ../system/physmem.c:2984
+ * #15 0x0000555555e772c8 in address_space_rw (as=0x555557328200 <address_space_memory>, addr=4261412884, attrs=..., buf=0x7ffff0036028, len=1,
+ *     is_write=true) at ../system/physmem.c:2994
+ * #16 0x0000555555ed4d63 in kvm_cpu_exec (cpu=0x5555577413a0) at ../accel/kvm/kvm-all.c:3075
+ * #17 0x0000555555ed8469 in kvm_vcpu_thread_fn (arg=0x5555577413a0) at ../accel/kvm/kvm-accel-ops.c:50
+ * #18 0x000055555616b040 in qemu_thread_start (args=0x55555774a370) at ../util/qemu-thread-posix.c:541
+ * #19 0x00007ffff68aa1da in start_thread () from /lib/../lib64/libpthread.so.0
+ * #20 0x00007ffff525ae73 in clone () from /lib/../lib64/libc.so.6
+ *
+ * vhost_net开始迁移的时候.
+ *
+ * (gdb) bt
+ * #0  vhost_dev_set_features (dev=0x555557686cc0, enable_log=true) at ../hw/virtio/vhost.c:989
+ * #1  0x0000555555b919e5 in vhost_dev_set_log (dev=0x555557686cc0, enable_log=true) at ../hw/virtio/vhost.c:1024
+#2  0x0000555555b91c5a in vhost_migration_log (listener=0x555557686cc8, enable=true) at ../hw/virtio/vhost.c:1093
+#3  0x0000555555b91ccf in vhost_log_global_start (listener=0x555557686cc8, errp=0x7ffe2fbfa628) at ../hw/virtio/vhost.c:1125
+#4  0x0000555555e6b859 in memory_global_dirty_log_do_start (errp=0x7ffe2fbfa628) at ../system/memory.c:2902
+#5  0x0000555555e6b98d in memory_global_dirty_log_start (flags=1, errp=0x7ffe2fbfa628) at ../system/memory.c:2941
+#6  0x0000555555e84d5d in ram_init_bitmaps (rs=0x7ffe20007d40, errp=0x7ffe2fbfa628) at ../migration/ram.c:2782
+#7  0x0000555555e84e6e in ram_init_all (rsp=0x555557328500 <ram_state>, errp=0x7ffe2fbfa628) at ../migration/ram.c:2816
+#8  0x0000555555e854fc in ram_save_setup (f=0x555557674610, opaque=0x555557328500 <ram_state>, errp=0x7ffe2fbfa628) at ../migration/ram.c:3010
+#9  0x0000555555c2fe16 in qemu_savevm_state_setup (f=0x555557674610, errp=0x7ffe2fbfa628) at ../migration/savevm.c:1346
+#10 0x0000555555c19305 in migration_thread (opaque=0x5555573fe000) at ../migration/migration.c:3507
+#11 0x000055555616b040 in qemu_thread_start (args=0x555557753b70) at ../util/qemu-thread-posix.c:541
+#12 0x00007ffff68aa1da in start_thread () from /lib/../lib64/libpthread.so.0
+#13 0x00007ffff525ae73 in clone () from /lib/../lib64/libc.so.6
+
+vhost_net cancel迁移的时候.
+
+(gdb) bt
+#0  vhost_dev_set_features (dev=0x5555573f9850, enable_log=false) at ../hw/virtio/vhost.c:989
+#1  0x0000555555b919e5 in vhost_dev_set_log (dev=0x5555573f9850, enable_log=false) at ../hw/virtio/vhost.c:1024
+#2  0x0000555555b91c0f in vhost_migration_log (listener=0x5555573f9858, enable=false) at ../hw/virtio/vhost.c:1086
+#3  0x0000555555b91d0c in vhost_log_global_stop (listener=0x5555573f9858) at ../hw/virtio/vhost.c:1136
+#4  0x0000555555e6bacd in memory_global_dirty_log_do_stop (flags=1) at ../system/memory.c:2966
+#5  0x0000555555e6bc06 in memory_global_dirty_log_stop (flags=1) at ../system/memory.c:3012
+#6  0x0000555555e84004 in ram_save_cleanup (opaque=0x555557328500 <ram_state>) at ../migration/ram.c:2383
+#7  0x0000555555c30c66 in qemu_savevm_state_cleanup () at ../migration/savevm.c:1699
+#8  0x0000555555c1494a in migrate_fd_cleanup (s=0x5555573fe000) at ../migration/migration.c:1409
+#9  0x0000555555c14b5e in migrate_fd_cleanup_bh (opaque=0x5555573fe000) at ../migration/migration.c:1456
+#10 0x0000555555c120bb in migration_bh_dispatch_bh (opaque=0x7ffe20002cf0) at ../migration/migration.c:284
+#11 0x0000555556186520 in aio_bh_call (bh=0x7ffe2011c7d0) at ../util/async.c:171
+#12 0x000055555618666e in aio_bh_poll (ctx=0x5555573fd770) at ../util/async.c:218
+#13 0x0000555556165595 in aio_dispatch (ctx=0x5555573fd770) at ../util/aio-posix.c:423
+#14 0x0000555556186b3d in aio_ctx_dispatch (source=0x5555573fd770, callback=0x0, user_data=0x0) at ../util/async.c:360
+#15 0x00007ffff6fd494b in g_main_dispatch (context=0x5555573fdcb0) at ../glib/gmain.c:3325
+#16 g_main_context_dispatch (context=0x5555573fdcb0) at ../glib/gmain.c:4043
+#17 0x0000555556188215 in glib_pollfds_poll () at ../util/main-loop.c:287
+#18 0x00005555561882a3 in os_host_main_loop_wait (timeout=942440) at ../util/main-loop.c:310
+#19 0x00005555561883d2 in main_loop_wait (nonblocking=0) at ../util/main-loop.c:589
+#20 0x0000555555be0f17 in qemu_main_loop () at ../system/runstate.c:826
+#21 0x0000555556093994 in qemu_default_main () at ../system/main.c:37
+#22 0x00005555560939d1 in main (argc=16, argv=0x7fffffffdc68) at ../system/main.c:48
+ */
+
 static struct vhost_log *vhost_log_alloc(uint64_t size, bool share)
 {
     Error *err = NULL;
@@ -367,6 +447,11 @@ static struct vhost_log *vhost_log_alloc(uint64_t size, bool share)
     return log;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/vhost.c|443| <<vhost_dev_log_resize>> struct vhost_log *log = vhost_log_get(dev->vhost_ops->backend_type,
+ *   - hw/virtio/vhost.c|2114| <<vhost_dev_start>> hdev->log = vhost_log_get(hdev->vhost_ops->backend_type,
+ */
 static struct vhost_log *vhost_log_get(VhostBackendType backend_type,
                                        uint64_t size, bool share)
 {
@@ -391,6 +476,13 @@ static struct vhost_log *vhost_log_get(VhostBackendType backend_type,
     return log;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/vhost.c|455| <<vhost_dev_log_resize>> vhost_log_put(dev, true);
+ *   - hw/virtio/vhost.c|1139| <<vhost_migration_log>> vhost_log_put(dev, false);
+ *   - hw/virtio/vhost.c|2168| <<vhost_dev_start>> vhost_log_put(hdev, false);
+ *   - hw/virtio/vhost.c|2225| <<vhost_dev_stop>> vhost_log_put(hdev, true);
+ */
 static void vhost_log_put(struct vhost_dev *dev, bool sync)
 {
     struct vhost_log *log = dev->log;
@@ -438,8 +530,19 @@ static bool vhost_dev_log_is_shared(struct vhost_dev *dev)
            dev->vhost_ops->vhost_requires_shm_log(dev);
 }
 
+/*
+ * called by:
+ *   - hw/virtio/vhost.c|715| <<vhost_commit>> vhost_dev_log_resize(dev, log_size + VHOST_LOG_BUFFER);
+ *   - hw/virtio/vhost.c|723| <<vhost_commit>> vhost_dev_log_resize(dev, log_size);
+ *   - hw/virtio/vhost.c|1141| <<vhost_migration_log>> vhost_dev_log_resize(dev, vhost_get_log_size(dev));
+ */
 static inline void vhost_dev_log_resize(struct vhost_dev *dev, uint64_t size)
 {
+    /*
+     * called by:
+     *   - hw/virtio/vhost.c|443| <<vhost_dev_log_resize>> struct vhost_log *log = vhost_log_get(dev->vhost_ops->backend_type,
+     *   - hw/virtio/vhost.c|2114| <<vhost_dev_start>> hdev->log = vhost_log_get(hdev->vhost_ops->backend_type,
+     */
     struct vhost_log *log = vhost_log_get(dev->vhost_ops->backend_type,
                                           size, vhost_dev_log_is_shared(dev));
     uint64_t log_base = (uintptr_t)log->log;
@@ -447,11 +550,23 @@ static inline void vhost_dev_log_resize(struct vhost_dev *dev, uint64_t size)
 
     /* inform backend of log switching, this must be done before
        releasing the current log, to ensure no logging is lost */
+    /*
+     * vhost_kernel_set_log_base() -> VHOST_SET_LOG_BASE
+     * vhost_user_set_log_base()
+     * vhost_vdpa_set_log_base()
+     */
     r = dev->vhost_ops->vhost_set_log_base(dev, log_base, log);
     if (r < 0) {
         VHOST_OPS_DEBUG(r, "vhost_set_log_base failed");
     }
 
+    /*
+     * called by:
+     *   - hw/virtio/vhost.c|455| <<vhost_dev_log_resize>> vhost_log_put(dev, true);
+     *   - hw/virtio/vhost.c|1139| <<vhost_migration_log>> vhost_log_put(dev, false);
+     *   - hw/virtio/vhost.c|2168| <<vhost_dev_start>> vhost_log_put(hdev, false);
+     *   - hw/virtio/vhost.c|2225| <<vhost_dev_stop>> vhost_log_put(hdev, true);
+     */
     vhost_log_put(dev, true);
     dev->log = log;
     dev->log_size = size;
@@ -954,6 +1069,55 @@ void vhost_toggle_device_iotlb(VirtIODevice *vdev)
     }
 }
 
+/*
+ * (gdb) bt
+ * #0  vhost_kernel_set_vring_addr (dev=0x5555573f9c50, addr=0x7fffe3dfefd0) at ../hw/virtio/vhost-backend.c:110
+ * #1  0x0000555555b917d9 in vhost_virtqueue_set_addr (dev=0x5555573f9c50, vq=0x5555573f9f60, idx=1, enable_log=false) at ../hw/virtio/vhost.c:979
+ * #2  0x0000555555b92541 in vhost_virtqueue_start (dev=0x5555573f9c50, vdev=0x555558419170, vq=0x5555573f9f60, idx=3) at ../hw/virtio/vhost.c:1321
+ * #3  0x0000555555b949e8 in vhost_dev_start (hdev=0x5555573f9c50, vdev=0x555558419170, vrings=false) at ../hw/virtio/vhost.c:2097
+ * #4  0x0000555555a47c24 in vhost_net_start_one (net=0x5555573f9c50, dev=0x555558419170) at ../hw/net/vhost_net.c:280
+ * #5  0x0000555555a48278 in vhost_net_start (dev=0x555558419170, ncs=0x555558424898, data_queue_pairs=2, cvq=0) at ../hw/net/vhost_net.c:421
+ * #6  0x0000555555df0a1b in virtio_net_vhost_status (n=0x555558419170, status=15 '\017') at ../hw/net/virtio-net.c:311
+ * #7  0x0000555555df0d2b in virtio_net_set_status (vdev=0x555558419170, status=15 '\017') at ../hw/net/virtio-net.c:393
+ * #8  0x0000555555e33c08 in virtio_set_status (vdev=0x555558419170, val=15 '\017') at ../hw/virtio/virtio.c:2242
+ * #9  0x0000555555b7b531 in virtio_pci_common_write (opaque=0x555558410cf0, addr=20, val=15, size=1) at ../hw/virtio/virtio-pci.c:1608
+ * #10 0x0000555555e63c32 in memory_region_write_accessor (mr=0x5555584118e0, addr=20, value=0x7fffe3dff3f8, size=1, shift=0, mask=255, attrs=...)
+ *                           at ../system/memory.c:497
+ * #11 0x0000555555e63f79 in access_with_adjusted_size (addr=20, value=0x7fffe3dff3f8, size=1, access_size_min=1, access_size_max=4,
+ *                           access_fn=0x555555e63b3c <memory_region_write_accessor>, mr=0x5555584118e0, attrs=...) at ../system/memory.c:573
+ * #12 0x0000555555e674ae in memory_region_dispatch_write (mr=0x5555584118e0, addr=20, data=15, op=MO_8, attrs=...) at ../system/memory.c:1521
+ * #13 0x0000555555e76bdc in flatview_write_continue_step (attrs=..., buf=0x7ffff7e39028 "\017", len=1, mr_addr=20,
+ *                           l=0x7fffe3dff4e0, mr=0x5555584118e0) at ../system/physmem.c:2803
+ * #14 0x0000555555e76cae in flatview_write_continue (fv=0x7ffe542b6060, addr=4261412884, attrs=..., ptr=0x7ffff7e39028, len=1, mr_addr=20,
+ *                           l=1, mr=0x5555584118e0) at ../system/physmem.c:2833
+ * #15 0x0000555555e76dd6 in flatview_write (fv=0x7ffe542b6060, addr=4261412884, attrs=..., buf=0x7ffff7e39028, len=1) at ../system/physmem.c:2864
+ * #16 0x0000555555e77250 in address_space_write (as=0x555557328200 <address_space_memory>, addr=4261412884, attrs=..., buf=0x7ffff7e39028, len=1)
+ *                           at ../system/physmem.c:2984
+ * #17 0x0000555555e772c8 in address_space_rw (as=0x555557328200 <address_space_memory>, addr=4261412884, attrs=..., buf=0x7ffff7e39028, len=1,
+ *                           is_write=true) at ../system/physmem.c:2994
+ * #18 0x0000555555ed4d63 in kvm_cpu_exec (cpu=0x555557748910) at ../accel/kvm/kvm-all.c:3075
+ * #19 0x0000555555ed8469 in kvm_vcpu_thread_fn (arg=0x555557748910) at ../accel/kvm/kvm-accel-ops.c:50
+ * #20 0x000055555616b040 in qemu_thread_start (args=0x555557752230) at ../util/qemu-thread-posix.c:541
+ * #21 0x00007ffff5c081da in start_thread () from /lib/../lib64/libpthread.so.0
+ * #22 0x00007ffff3839e73 in clone () from /lib/../lib64/libc.so.6
+ *
+ * (gdb) bt
+ * #0  vhost_kernel_set_vring_addr (dev=0x5555573f9c50, addr=0x7ffe253ff350) at ../hw/virtio/vhost-backend.c:110
+ * #1  0x0000555555b917d9 in vhost_virtqueue_set_addr (dev=0x5555573f9c50, vq=0x5555573f9f60, idx=1, enable_log=true) at ../hw/virtio/vhost.c:979
+ * #2  0x0000555555b91a76 in vhost_dev_set_log (dev=0x5555573f9c50, enable_log=true) at ../hw/virtio/vhost.c:1040
+ * #3  0x0000555555b91c5a in vhost_migration_log (listener=0x5555573f9c58, enable=true) at ../hw/virtio/vhost.c:1093
+ * #4  0x0000555555b91ccf in vhost_log_global_start (listener=0x5555573f9c58, errp=0x7ffe253ff628) at ../hw/virtio/vhost.c:1125
+ * #5  0x0000555555e6b859 in memory_global_dirty_log_do_start (errp=0x7ffe253ff628) at ../system/memory.c:2902
+ * #6  0x0000555555e6b98d in memory_global_dirty_log_start (flags=1, errp=0x7ffe253ff628) at ../system/memory.c:2941
+ * #7  0x0000555555e84d5d in ram_init_bitmaps (rs=0x7fffdc008420, errp=0x7ffe253ff628) at ../migration/ram.c:2782
+ * #8  0x0000555555e84e6e in ram_init_all (rsp=0x555557328500 <ram_state>, errp=0x7ffe253ff628) at ../migration/ram.c:2816
+ * #9  0x0000555555e854fc in ram_save_setup (f=0x555557671f70, opaque=0x555557328500 <ram_state>, errp=0x7ffe253ff628) at ../migration/ram.c:3010
+ * #10 0x0000555555c2fe16 in qemu_savevm_state_setup (f=0x555557671f70, errp=0x7ffe253ff628) at ../migration/savevm.c:1346
+ * #11 0x0000555555c19305 in migration_thread (opaque=0x5555573fe6a0) at ../migration/migration.c:3507
+ * #12 0x000055555616b040 in qemu_thread_start (args=0x555558115c40) at ../util/qemu-thread-posix.c:541
+ * #13 0x00007ffff5c081da in start_thread () from /lib/../lib64/libpthread.so.0
+ * #14 0x00007ffff3839e73 in clone () from /lib/../lib64/libc.so.6
+ */
 static int vhost_virtqueue_set_addr(struct vhost_dev *dev,
                                     struct vhost_virtqueue *vq,
                                     unsigned idx, bool enable_log)
@@ -983,6 +1147,13 @@ static int vhost_virtqueue_set_addr(struct vhost_dev *dev,
     return r;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/vhost.c|1188| <<vhost_dev_set_log>> r = vhost_dev_set_features(dev, enable_log);
+ *   - hw/virtio/vhost.c|1230| <<vhost_dev_set_log>> vhost_dev_set_features(dev, dev->log_enabled);
+ *   - hw/virtio/vhost.c|2118| <<vhost_dev_prepare_inflight>> r = vhost_dev_set_features(hdev, hdev->log_enabled);
+ *   - hw/virtio/vhost.c|2200| <<vhost_dev_start>> r = vhost_dev_set_features(hdev, hdev->log_enabled);
+ */
 static int vhost_dev_set_features(struct vhost_dev *dev,
                                   bool enable_log)
 {
@@ -1016,6 +1187,11 @@ out:
     return r;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/vhost.c|1153| <<vhost_migration_log>> r = vhost_dev_set_log(dev, false);
+ *   - hw/virtio/vhost.c|1160| <<vhost_migration_log>> r = vhost_dev_set_log(dev, true);
+ */
 static int vhost_dev_set_log(struct vhost_dev *dev, bool enable_log)
 {
     int r, i, idx;
@@ -1068,6 +1244,11 @@ err_features:
     return r;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/vhost.c|1192| <<vhost_log_global_start>> r = vhost_migration_log(listener, true);
+ *   - hw/virtio/vhost.c|1203| <<vhost_log_global_stop>> r = vhost_migration_log(listener, false);
+ */
 static int vhost_migration_log(MemoryListener *listener, bool enable)
 {
     struct vhost_dev *dev = container_of(listener, struct vhost_dev,
@@ -1083,12 +1264,23 @@ static int vhost_migration_log(MemoryListener *listener, bool enable)
 
     r = 0;
     if (!enable) {
+        /*
+	 * called by:
+	 *   - hw/virtio/vhost.c|1153| <<vhost_migration_log>> r = vhost_dev_set_log(dev, false);
+	 *   - hw/virtio/vhost.c|1160| <<vhost_migration_log>> r = vhost_dev_set_log(dev, true);
+	 */
         r = vhost_dev_set_log(dev, false);
         if (r < 0) {
             goto check_dev_state;
         }
         vhost_log_put(dev, false);
     } else {
+        /*
+	 * called by:
+	 *   - hw/virtio/vhost.c|715| <<vhost_commit>> vhost_dev_log_resize(dev, log_size + VHOST_LOG_BUFFER);
+	 *   - hw/virtio/vhost.c|723| <<vhost_commit>> vhost_dev_log_resize(dev, log_size);
+	 *   - hw/virtio/vhost.c|1141| <<vhost_migration_log>> vhost_dev_log_resize(dev, vhost_get_log_size(dev));
+	 */
         vhost_dev_log_resize(dev, vhost_get_log_size(dev));
         r = vhost_dev_set_log(dev, true);
         if (r < 0) {
@@ -1097,6 +1289,25 @@ static int vhost_migration_log(MemoryListener *listener, bool enable)
     }
 
 check_dev_state:
+    /*
+     * 在以下设置vhost_dev->log_enabled;
+     *   - hw/virtio/vhost.c|1261| <<vhost_migration_log>> dev->log_enabled = enable;
+     *   - hw/virtio/vhost.c|1301| <<vhost_migration_log>> dev->log_enabled = enable;
+     *   - hw/virtio/vhost.c|1316| <<vhost_migration_log>> dev->log_enabled = false;
+     *   - hw/virtio/vhost.c|1817| <<vhost_dev_init>> hdev->log_enabled = false;
+     * 在以下使用vhost_dev->log_enabled;
+     *   - hw/virtio/vhost.c|203| <<vhost_sync_dirty_bitmap>> if (!dev->log_enabled || !dev->started) {
+     *   - hw/virtio/vhost.c|817| <<vhost_commit>> if (!dev->log_enabled) {
+     *   - hw/virtio/vhost.c|1240| <<vhost_dev_set_log>> vhost_virtqueue_set_addr(dev, dev->vqs + i, idx, dev->log_enabled);
+     *   - hw/virtio/vhost.c|1242| <<vhost_dev_set_log>> vhost_dev_set_features(dev, dev->log_enabled);
+     *   - hw/virtio/vhost.c|1257| <<vhost_migration_log>> if (enable == dev->log_enabled) {
+     *   - hw/virtio/vhost.c|1522| <<vhost_virtqueue_start>> r = vhost_virtqueue_set_addr(dev, vq, vhost_vq_index, dev->log_enabled);
+     *   - hw/virtio/vhost.c|2145| <<vhost_dev_prepare_inflight>> r = vhost_dev_set_features(hdev, hdev->log_enabled);
+     *   - hw/virtio/vhost.c|2227| <<vhost_dev_start>> r = vhost_dev_set_features(hdev, hdev->log_enabled);
+     *   - hw/virtio/vhost.c|2262| <<vhost_dev_start>> if (hdev->log_enabled) {
+     *   - hw/virtio/virtio-hmp-cmds.c|171| <<hmp_virtio_status>> s->vhost_dev->log_enabled ? "true" : "false");
+     *   - hw/virtio/virtio-qmp.c|791| <<qmp_x_query_virtio_status>> status->vhost_dev->log_enabled = hdev->log_enabled;
+     */
     dev->log_enabled = enable;
     /*
      * vhost-user-* devices could change their state during log
@@ -1118,6 +1329,24 @@ check_dev_state:
     return r;
 }
 
+/*
+ * 在以下使用vhost_log_global_start():
+ *   - hw/virtio/vhost.c|1814| <<vhost_dev_init>> .log_global_start = vhost_log_global_start,
+ *
+ * 1809     hdev->memory_listener = (MemoryListener) {
+ * 1810         .name = "vhost",
+ * 1811         .begin = vhost_begin,
+ * 1812         .commit = vhost_commit,
+ * 1813         .region_add = vhost_region_addnop,
+ * 1814         .region_nop = vhost_region_addnop,
+ * 1815         .log_start = vhost_log_start,
+ * 1816         .log_stop = vhost_log_stop,
+ * 1817         .log_sync = vhost_log_sync,
+ * 1818         .log_global_start = vhost_log_global_start,
+ * 1819         .log_global_stop = vhost_log_global_stop,
+ * 1820         .priority = MEMORY_LISTENER_PRIORITY_DEV_BACKEND
+ * 1821     };
+ */
 static bool vhost_log_global_start(MemoryListener *listener, Error **errp)
 {
     int r;
@@ -1248,6 +1477,11 @@ out:
     return ret;
 }
 
+/*
+ * called by:
+ *   - hw/net/vhost_net.c|766| <<vhost_net_virtqueue_restart>> r = vhost_virtqueue_start(&net->dev,
+ *   - hw/virtio/vhost.c|2252| <<vhost_dev_start>> r = vhost_virtqueue_start(hdev,
+ */
 int vhost_virtqueue_start(struct vhost_dev *dev,
                           struct VirtIODevice *vdev,
                           struct vhost_virtqueue *vq,
@@ -1506,6 +1740,21 @@ static void vhost_virtqueue_cleanup(struct vhost_virtqueue *vq)
     }
 }
 
+/*
+ * called by:
+ *   - backends/cryptodev-vhost.c|69| <<cryptodev_vhost_init>> r = vhost_dev_init(&crypto->dev, options->opaque, options->backend_type, 0,
+ *   - backends/vhost-user.c|39| <<vhost_user_backend_dev_init>> ret = vhost_dev_init(&b->dev, &b->vhost_user, VHOST_BACKEND_TYPE_USER, 0,
+ *   - hw/block/vhost-user-blk.c|348| <<vhost_user_blk_connect>> ret = vhost_dev_init(&s->dev, &s->vhost_user, VHOST_BACKEND_TYPE_USER, 0,
+ *   - hw/net/vhost_net.c|354| <<vhost_net_init>> r = vhost_dev_init(&net->dev, options->opaque,
+ *   - hw/scsi/vhost-scsi.c|280| <<vhost_scsi_realize>> ret = vhost_dev_init(&vsc->dev, (void *)(uintptr_t)vhostfd,
+ *   - hw/scsi/vhost-user-scsi.c|160| <<vhost_user_scsi_connect>> ret = vhost_dev_init(&vsc->dev, &s->vhost_user, VHOST_BACKEND_TYPE_USER, 0,
+ *   - hw/virtio/vdpa-dev.c|120| <<vhost_vdpa_device_realize>> ret = vhost_dev_init(&v->dev, &v->vdpa, VHOST_BACKEND_TYPE_VDPA, 0, NULL);
+ *   - hw/virtio/vhost-user-base.c|327| <<vub_device_realize>> ret = vhost_dev_init(&vub->vhost_dev, &vub->vhost_user,
+ *   - hw/virtio/vhost-user-fs.c|253| <<vuf_device_realize>> ret = vhost_dev_init(&fs->vhost_dev, &fs->vhost_user,
+ *   - hw/virtio/vhost-user-scmi.c|250| <<vu_scmi_device_realize>> ret = vhost_dev_init(&scmi->vhost_dev, &scmi->vhost_user,
+ *   - hw/virtio/vhost-user-vsock.c|112| <<vuv_device_realize>> ret = vhost_dev_init(&vvc->vhost_dev, &vsock->vhost_user,
+ *   - hw/virtio/vhost-vsock.c|171| <<vhost_vsock_device_realize>> ret = vhost_dev_init(&vvc->vhost_dev, (void *)(uintptr_t)vhostfd,
+ */
 int vhost_dev_init(struct vhost_dev *hdev, void *opaque,
                    VhostBackendType backend_type, uint32_t busyloop_timeout,
                    Error **errp)
diff --git a/hw/virtio/virtio-config-io.c b/hw/virtio/virtio-config-io.c
index ad78e0b9b..ccc9af4f5 100644
--- a/hw/virtio/virtio-config-io.c
+++ b/hw/virtio/virtio-config-io.c
@@ -130,6 +130,9 @@ uint32_t virtio_config_modern_readw(VirtIODevice *vdev, uint32_t addr)
         return (uint32_t)-1;
     }
 
+    /*
+     * vhost-scsi用的是virtio_scsi_get_config().
+     */
     k->get_config(vdev, vdev->config);
 
     val = lduw_le_p(vdev->config + addr);
diff --git a/hw/virtio/virtio-pci.c b/hw/virtio/virtio-pci.c
index 5a394821d..60067d3a5 100644
--- a/hw/virtio/virtio-pci.c
+++ b/hw/virtio/virtio-pci.c
@@ -1756,6 +1756,38 @@ static void virtio_pci_isr_write(void *opaque, hwaddr addr,
 {
 }
 
+/*
+ * vhost-scsi的stack.
+ *
+ * (gdb) bt
+ * #0  virtio_scsi_get_config (vdev=0x555558406a90, config=0x5555584313b0 "") at ../hw/scsi/virtio-scsi.c:888
+ * #1  0x0000555555e3d3e0 in virtio_config_modern_readl (vdev=0x555558406a90, addr=0) at ../hw/virtio/virtio-config-io.c:148
+ * #2  0x0000555555b7ba61 in virtio_pci_device_read (opaque=0x5555583fe4d0, addr=0, size=4) at ../hw/virtio/virtio-pci.c:1778
+ * #3  0x0000555555e65ce2 in memory_region_read_accessor (mr=0x5555583ff2f0, addr=0, value=0x7fffeb0d5458, size=4, shift=0,
+ *     mask=4294967295, attrs=...) at ../system/memory.c:445
+ * #4  0x0000555555e6633a in access_with_adjusted_size (addr=0, value=0x7fffeb0d5458, size=4, access_size_min=1,
+ *     access_size_max=4, access_fn=0x555555e65c97 <memory_region_read_accessor>, mr=0x5555583ff2f0, attrs=...)
+ *     at ../system/memory.c:573
+ * #5  0x0000555555e6969d in memory_region_dispatch_read1 (mr=0x5555583ff2f0, addr=0, pval=0x7fffeb0d5458, size=4, attrs=...)
+ *     at ../system/memory.c:1458
+ * #6  0x0000555555e697cc in memory_region_dispatch_read (mr=0x5555583ff2f0, addr=0, pval=0x7fffeb0d5458, op=MO_32, attrs=...)
+ *     at ../system/memory.c:1491
+ * #7  0x0000555555e796f6 in flatview_read_continue_step (attrs=..., buf=0x7ffff7ff0028 "\v", len=4, mr_addr=0, l=0x7fffeb0d54d0,
+ *     mr=0x5555583ff2f0) at ../system/physmem.c:2867
+ * #8  0x0000555555e797f4 in flatview_read_continue (fv=0x7ffbd4000fc0, addr=61572651163648, attrs=..., ptr=0x7ffff7ff0028,
+ *     len=4, mr_addr=0, l=4, mr=0x5555583ff2f0) at ../system/physmem.c:2908
+ * #9  0x0000555555e7991c in flatview_read (fv=0x7ffbd4000fc0, addr=61572651163648, attrs=..., buf=0x7ffff7ff0028, len=4)
+ *     at ../system/physmem.c:2938
+ * #10 0x0000555555e799bb in address_space_read_full (as=0x555557334980 <address_space_memory>, addr=61572651163648, attrs=...,
+ *     buf=0x7ffff7ff0028, len=4) at ../system/physmem.c:2951
+ * #11 0x0000555555e79afd in address_space_rw (as=0x555557334980 <address_space_memory>, addr=61572651163648, attrs=...,
+ *     buf=0x7ffff7ff0028, len=4, is_write=false) at ../system/physmem.c:2979
+ * #12 0x0000555555ed996b in kvm_cpu_exec (cpu=0x5555576f0660) at ../accel/kvm/kvm-all.c:3184
+ * #13 0x0000555555edd092 in kvm_vcpu_thread_fn (arg=0x5555576f0660) at ../accel/kvm/kvm-accel-ops.c:50
+ * #14 0x0000555556172954 in qemu_thread_start (args=0x5555576fa4e0) at ../util/qemu-thread-posix.c:541
+ * #15 0x00007ffff68a91da in start_thread () from /lib64/libpthread.so.0
+ * #16 0x00007ffff52488d3 in clone () from /lib64/libc.so.6
+ */
 static uint64_t virtio_pci_device_read(void *opaque, hwaddr addr,
                                        unsigned size)
 {
@@ -1807,6 +1839,50 @@ static void virtio_pci_device_write(void *opaque, hwaddr addr,
     }
 }
 
+/*
+ * (gdb) bt
+ * #0  virtio_pci_modern_regions_init (proxy=0x5555583fe4d0, vdev_name=0x55555637e0e5 "virtio-scsi") at ../hw/virtio/virtio-pci.c:1812
+ * #1  0x0000555555b7c3b4 in virtio_pci_device_plugged (d=0x5555583fe4d0, errp=0x7fffffffd198) at ../hw/virtio/virtio-pci.c:2050
+ * #2  0x0000555555b75f0f in virtio_bus_device_plugged (vdev=0x555558406a90, errp=0x7fffffffd1f0) at ../hw/virtio/virtio-bus.c:74
+ * #3  0x0000555555e3b66e in virtio_device_realize (dev=0x555558406a90, errp=0x7fffffffd250) at ../hw/virtio/virtio.c:3961
+ * #4  0x0000555555ef1d70 in device_set_realized (obj=0x555558406a90, value=true, errp=0x7fffffffd510) at ../hw/core/qdev.c:495
+ * #5  0x0000555555efccbf in property_set_bool (obj=0x555558406a90, v=0x55555840c050, name=0x5555563a55d1 "realized", opaque=0x55555740cf10,
+ *     errp=0x7fffffffd510) at ../qom/object.c:2348
+ * #6  0x0000555555efa803 in object_property_set (obj=0x555558406a90, name=0x5555563a55d1 "realized", v=0x55555840c050, errp=0x7fffffffd510)
+ *     at ../qom/object.c:1455
+ * #7  0x0000555555eff53a in object_property_set_qobject (obj=0x555558406a90, name=0x5555563a55d1 "realized", value=0x5555584312f0, errp=0x7fffffffd510)
+ *     at ../qom/qom-qobject.c:28
+ * #8  0x0000555555efaba8 in object_property_set_bool (obj=0x555558406a90, name=0x5555563a55d1 "realized", value=true, errp=0x7fffffffd510)
+ *     at ../qom/object.c:1525
+ * #9  0x0000555555ef145d in qdev_realize (dev=0x555558406a90, bus=0x555558406a10, errp=0x7fffffffd510) at ../hw/core/qdev.c:276
+ * #10 0x0000555555e5925b in vhost_scsi_pci_realize (vpci_dev=0x5555583fe4d0, errp=0x7fffffffd510) at ../hw/virtio/vhost-scsi-pci.c:62
+ * #11 0x0000555555b7cdb6 in virtio_pci_realize (pci_dev=0x5555583fe4d0, errp=0x7fffffffd510) at ../hw/virtio/virtio-pci.c:2268
+ * #12 0x0000555555a97958 in pci_qdev_realize (qdev=0x5555583fe4d0, errp=0x7fffffffd5d0) at ../hw/pci/pci.c:2114
+ * #13 0x0000555555b7d2d3 in virtio_pci_dc_realize (qdev=0x5555583fe4d0, errp=0x7fffffffd5d0) at ../hw/virtio/virtio-pci.c:2395
+ * #14 0x0000555555ef1d70 in device_set_realized (obj=0x5555583fe4d0, value=true, errp=0x7fffffffd840) at ../hw/core/qdev.c:495
+ * #15 0x0000555555efccbf in property_set_bool (obj=0x5555583fe4d0, v=0x5555584304e0, name=0x5555563a55d1 "realized", opaque=0x55555740cf10, 
+ *     errp=0x7fffffffd840) at ../qom/object.c:2348
+ * #16 0x0000555555efa803 in object_property_set (obj=0x5555583fe4d0, name=0x5555563a55d1 "realized", v=0x5555584304e0, errp=0x7fffffffd840)
+ *     at ../qom/object.c:1455
+ * #17 0x0000555555eff53a in object_property_set_qobject (obj=0x5555583fe4d0, name=0x5555563a55d1 "realized", value=0x555558430470,
+ *     errp=0x7fffffffd840) at ../qom/qom-qobject.c:28
+ * #18 0x0000555555efaba8 in object_property_set_bool (obj=0x5555583fe4d0, name=0x5555563a55d1 "realized", value=true, errp=0x7fffffffd840)
+ *     at ../qom/object.c:1525
+ * #19 0x0000555555ef145d in qdev_realize (dev=0x5555583fe4d0, bus=0x555557779c60, errp=0x7fffffffd840) at ../hw/core/qdev.c:276
+ * #20 0x0000555555bd8ea6 in qdev_device_add_from_qdict (opts=0x55555842c7b0, from_json=false, errp=0x7fffffffd840)
+ *     at ../system/qdev-monitor.c:726
+ * #21 0x0000555555bd8f5a in qdev_device_add (opts=0x55555740a160, errp=0x555557350860 <error_fatal>) at ../system/qdev-monitor.c:745
+ * #22 0x0000555555be38b7 in device_init_func (opaque=0x0, opts=0x55555740a160, errp=0x555557350860 <error_fatal>) at ../system/vl.c:1215
+ * #23 0x000055555617e55f in qemu_opts_foreach (list=0x55555722dfe0 <qemu_device_opts>, func=0x555555be3888 <device_init_func>, opaque=0x0,
+ *     errp=0x555557350860 <error_fatal>) at ../util/qemu-option.c:1135
+ * #24 0x0000555555be77ac in qemu_create_cli_devices () at ../system/vl.c:2656
+ * #25 0x0000555555be7a30 in qmp_x_exit_preconfig (errp=0x555557350860 <error_fatal>) at ../system/vl.c:2719
+ * #26 0x0000555555bea569 in qemu_init (argc=21, argv=0x7fffffffdc58) at ../system/vl.c:3753
+ * #27 0x000055555609a086 in main (argc=21, argv=0x7fffffffdc58) at ../system/main.c:47
+ *
+ * called by:
+ *   - hw/virtio/virtio-pci.c|2082| <<virtio_pci_device_plugged>> virtio_pci_modern_regions_init(proxy, vdev->name);
+ */
 static void virtio_pci_modern_regions_init(VirtIOPCIProxy *proxy,
                                            const char *vdev_name)
 {
diff --git a/hw/virtio/virtio.c b/hw/virtio/virtio.c
index f12c4aa81..07fb73fe4 100644
--- a/hw/virtio/virtio.c
+++ b/hw/virtio/virtio.c
@@ -300,6 +300,16 @@ void virtio_queue_update_rings(VirtIODevice *vdev, int n)
     virtio_init_region_cache(vdev, n);
 }
 
+/*
+ * called by:
+ *   - hw/virtio/virtio.c|1286| <<virtqueue_split_read_next_desc>> vring_split_desc_read(vdev, desc, desc_cache, desc->next);
+ *   - hw/virtio/virtio.c|1335| <<virtqueue_split_get_avail_bytes>> vring_split_desc_read(vdev, &desc, desc_cache, i);
+ *   - hw/virtio/virtio.c|1361| <<virtqueue_split_get_avail_bytes>> vring_split_desc_read(vdev, &desc, desc_cache, i);
+ *   - hw/virtio/virtio.c|1825| <<virtqueue_split_pop>> vring_split_desc_read(vdev, &desc, desc_cache, i);
+ *   - hw/virtio/virtio.c|1843| <<virtqueue_split_pop>> vring_split_desc_read(vdev, &desc, desc_cache, i);
+ *   - hw/virtio/virtio.c|4479| <<qmp_x_query_virtio_queue_element>> vring_split_desc_read(vdev, &desc, desc_cache, i);
+ *   - hw/virtio/virtio.c|4492| <<qmp_x_query_virtio_queue_element>> vring_split_desc_read(vdev, &desc, desc_cache, i);
+ */
 /* Called within rcu_read_lock().  */
 static void vring_split_desc_read(VirtIODevice *vdev, VRingDesc *desc,
                                   MemoryRegionCache *cache, int i)
@@ -344,6 +354,29 @@ static void vring_packed_flags_write(VirtIODevice *vdev,
     address_space_cache_invalidate(cache, off, sizeof(flags));
 }
 
+/*
+ * called by:
+ *   - hw/virtio/virtio.c|356| <<vring_avail_flags>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|369| <<vring_avail_idx>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|407| <<vring_avail_ring>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|434| <<vring_used_write>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|450| <<vring_used_flags>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|463| <<vring_used_idx>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|476| <<vring_used_idx_set>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|490| <<vring_used_flags_set_bit>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|507| <<vring_used_flags_unset_bit>> VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|530| <<vring_set_avail_event>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|564| <<virtio_queue_packed_set_notification>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|752| <<virtio_queue_packed_empty_rcu>> cache = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|796| <<virtio_queue_packed_poll>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|1030| <<virtqueue_packed_fill_desc>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|1570| <<virtqueue_get_avail_bytes>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|1813| <<virtqueue_split_pop>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|1949| <<virtqueue_packed_pop>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|2129| <<virtqueue_packed_drop_all>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|2776| <<virtio_packed_should_notify>> caches = vring_get_region_caches(vq);
+ *   - hw/virtio/virtio.c|4468| <<qmp_x_query_virtio_queue_element>> caches = vring_get_region_caches(vq);
+ */
 /* Called within rcu_read_lock().  */
 static VRingMemoryRegionCaches *vring_get_region_caches(struct VirtQueue *vq)
 {
@@ -377,9 +410,33 @@ static inline uint16_t vring_avail_idx(VirtQueue *vq)
     return vq->shadow_avail_idx;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/virtio.c|396| <<vring_get_used_event>> return vring_avail_ring(vq, vq->vring.num);
+ *   - hw/virtio/virtio.c|1209| <<virtqueue_get_head>> *head = vring_avail_ring(vq, idx % vq->vring.num);
+ *   - hw/virtio/virtio.c|4319| <<qmp_x_query_virtio_queue_element>> head = vring_avail_ring(vq, vq->last_avail_idx % vq->vring.num);
+ *   - hw/virtio/virtio.c|4321| <<qmp_x_query_virtio_queue_element>> head = vring_avail_ring(vq, index % vq->vring.num);
+ */
 /* Called within rcu_read_lock().  */
 static inline uint16_t vring_avail_ring(VirtQueue *vq, int i)
 {
+    /*
+     * struct MemoryRegionCache {
+     *     uint8_t *ptr;
+     *     hwaddr xlat;
+     *     hwaddr len;
+     *     FlatView *fv;
+     *     MemoryRegionSection mrs;
+     *     bool is_write;
+     * };
+     *
+     * typedef struct VRingMemoryRegionCaches {
+     *     struct rcu_head rcu;
+     *     MemoryRegionCache desc;
+     *     MemoryRegionCache avail;
+     *     MemoryRegionCache used;
+     * } VRingMemoryRegionCaches;
+     */
     VRingMemoryRegionCaches *caches = vring_get_region_caches(vq);
     hwaddr pa = offsetof(VRingAvail, ring[i]);
 
@@ -387,12 +444,32 @@ static inline uint16_t vring_avail_ring(VirtQueue *vq, int i)
         return 0;
     }
 
+    /*
+     * called by:
+     *   - hw/virtio/virtio.c|322| <<vring_packed_event_read>> e->flags = virtio_lduw_phys_cached(vdev, cache, off_flags);
+     *   - hw/virtio/virtio.c|325| <<vring_packed_event_read>> e->off_wrap = virtio_lduw_phys_cached(vdev, cache, off_off);
+     *   - hw/virtio/virtio.c|363| <<vring_avail_flags>> return virtio_lduw_phys_cached(vq->vdev, &caches->avail, pa);
+     *   - hw/virtio/virtio.c|376| <<vring_avail_idx>> vq->shadow_avail_idx = virtio_lduw_phys_cached(vq->vdev, &caches->avail, pa);
+     *   - hw/virtio/virtio.c|414| <<vring_avail_ring>> return virtio_lduw_phys_cached(vq->vdev, &caches->avail, pa);
+     *   - hw/virtio/virtio.c|457| <<vring_used_flags>> return virtio_lduw_phys_cached(vq->vdev, &caches->used, pa);
+     *   - hw/virtio/virtio.c|470| <<vring_used_idx>> return virtio_lduw_phys_cached(vq->vdev, &caches->used, pa);
+     *   - hw/virtio/virtio.c|499| <<vring_used_flags_set_bit>> flags = virtio_lduw_phys_cached(vq->vdev, &caches->used, pa);
+     *   - hw/virtio/virtio.c|516| <<vring_used_flags_unset_bit>> flags = virtio_lduw_phys_cached(vq->vdev, &caches->used, pa);
+     *   - hw/virtio/virtio.c|622| <<vring_packed_desc_read_flags>> *flags = virtio_lduw_phys_cached(vdev, cache, off);
+     */
     return virtio_lduw_phys_cached(vq->vdev, &caches->avail, pa);
 }
 
 /* Called within rcu_read_lock().  */
 static inline uint16_t vring_get_used_event(VirtQueue *vq)
 {
+    /*
+     * called by:
+     *   - hw/virtio/virtio.c|396| <<vring_get_used_event>> return vring_avail_ring(vq, vq->vring.num);
+     *   - hw/virtio/virtio.c|1209| <<virtqueue_get_head>> *head = vring_avail_ring(vq, idx % vq->vring.num);
+     *   - hw/virtio/virtio.c|4319| <<qmp_x_query_virtio_queue_element>> head = vring_avail_ring(vq, vq->last_avail_idx % vq->vring.num);
+     *   - hw/virtio/virtio.c|4321| <<qmp_x_query_virtio_queue_element>> head = vring_avail_ring(vq, index % vq->vring.num);
+     */
     return vring_avail_ring(vq, vq->vring.num);
 }
 
@@ -1200,10 +1277,23 @@ static int virtqueue_num_heads(VirtQueue *vq, unsigned int idx)
     return num_heads;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/virtio.c|1273| <<virtqueue_split_get_avail_bytes>> if (!virtqueue_get_head(vq, idx++, &i)) {
+ *   - hw/virtio/virtio.c|1708| <<virtqueue_split_pop>> if (!virtqueue_get_head(vq, vq->last_avail_idx++, &head)) {
+ *   - hw/virtio/virtio.c|2045| <<virtqueue_split_drop_all>> if (!virtqueue_get_head(vq, vq->last_avail_idx, &elem.index)) {
+ */
 /* Called within rcu_read_lock().  */
 static bool virtqueue_get_head(VirtQueue *vq, unsigned int idx,
                                unsigned int *head)
 {
+    /*
+     * called by:
+     *   - hw/virtio/virtio.c|396| <<vring_get_used_event>> return vring_avail_ring(vq, vq->vring.num);
+     *   - hw/virtio/virtio.c|1209| <<virtqueue_get_head>> *head = vring_avail_ring(vq, idx % vq->vring.num);
+     *   - hw/virtio/virtio.c|4319| <<qmp_x_query_virtio_queue_element>> head = vring_avail_ring(vq, vq->last_avail_idx % vq->vring.num);
+     *   - hw/virtio/virtio.c|4321| <<qmp_x_query_virtio_queue_element>> head = vring_avail_ring(vq, index % vq->vring.num);
+     */
     /* Grab the next descriptor number they're advertising, and increment
      * the index we've seen. */
     *head = vring_avail_ring(vq, idx % vq->vring.num);
@@ -1256,6 +1346,14 @@ static void virtqueue_split_get_avail_bytes(VirtQueue *vq,
     int64_t len = 0;
     int rc;
 
+    /*
+     * called by:
+     *   - hw/virtio/virtio.c|1259| <<virtqueue_split_get_avail_bytes>> address_space_cache_init_empty(&indirect_desc_cache);
+     *   - hw/virtio/virtio.c|1399| <<virtqueue_packed_get_avail_bytes>> address_space_cache_init_empty(&indirect_desc_cache);
+     *   - hw/virtio/virtio.c|1688| <<virtqueue_split_pop>> address_space_cache_init_empty(&indirect_desc_cache);
+     *   - hw/virtio/virtio.c|1835| <<virtqueue_packed_pop>> address_space_cache_init_empty(&indirect_desc_cache);
+     *   - hw/virtio/virtio.c|4312| <<qmp_x_query_virtio_queue_element>> address_space_cache_init_empty(&indirect_desc_cache);
+     */
     address_space_cache_init_empty(&indirect_desc_cache);
 
     idx = vq->last_avail_idx;
@@ -1270,6 +1368,12 @@ static void virtqueue_split_get_avail_bytes(VirtQueue *vq,
 
         num_bufs = total_bufs;
 
+	/*
+	 * called by:
+	 *   - hw/virtio/virtio.c|1273| <<virtqueue_split_get_avail_bytes>> if (!virtqueue_get_head(vq, idx++, &i)) {
+	 *   - hw/virtio/virtio.c|1708| <<virtqueue_split_pop>> if (!virtqueue_get_head(vq, vq->last_avail_idx++, &head)) {
+	 *   - hw/virtio/virtio.c|2045| <<virtqueue_split_drop_all>> if (!virtqueue_get_head(vq, vq->last_avail_idx, &elem.index)) {
+	 */
         if (!virtqueue_get_head(vq, idx++, &i)) {
             goto err;
         }
@@ -1552,6 +1656,23 @@ int virtqueue_avail_bytes(VirtQueue *vq, unsigned int in_bytes,
     return in_bytes <= in_total && out_bytes <= out_total;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/virtio.c|1851| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+ *               &in_num, addr + out_num, iov + out_num,
+ *               VIRTQUEUE_MAX_SIZE - out_num, true,
+ *               desc.addr, desc.len);
+ *   - hw/virtio/virtio.c|1860| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+ *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+ *               desc.addr, desc.len);
+ * hw/virtio/virtio.c|1988| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+ *               &in_num, addr + out_num, iov + out_num,
+ *               VIRTQUEUE_MAX_SIZE - out_num, true,
+ *               desc.addr, desc.len);
+ * hw/virtio/virtio.c|1997| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+ *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+ *               desc.addr, desc.len);
+ */
 static bool virtqueue_map_desc(VirtIODevice *vdev, unsigned int *p_num_sg,
                                hwaddr *addr, struct iovec *iov,
                                unsigned int max_num_sg, bool is_write,
@@ -1670,6 +1791,10 @@ static void *virtqueue_alloc_element(size_t sz, unsigned out_num, unsigned in_nu
     return elem;
 }
 
+/*
+ * called by:
+ *   - hw/virtio/virtio.c|1977| <<virtqueue_pop>> return virtqueue_split_pop(vq, sz);
+ */
 static void *virtqueue_split_pop(VirtQueue *vq, size_t sz)
 {
     unsigned int i, head, max, idx;
@@ -1680,11 +1805,22 @@ static void *virtqueue_split_pop(VirtQueue *vq, size_t sz)
     VirtIODevice *vdev = vq->vdev;
     VirtQueueElement *elem = NULL;
     unsigned out_num, in_num, elem_entries;
+    /*
+     * #define VIRTQUEUE_MAX_SIZE 1024
+     */
     hwaddr addr[VIRTQUEUE_MAX_SIZE];
     struct iovec iov[VIRTQUEUE_MAX_SIZE];
     VRingDesc desc;
     int rc;
 
+    /*
+     * called by:
+     *   - hw/virtio/virtio.c|1259| <<virtqueue_split_get_avail_bytes>> address_space_cache_init_empty(&indirect_desc_cache);
+     *   - hw/virtio/virtio.c|1399| <<virtqueue_packed_get_avail_bytes>> address_space_cache_init_empty(&indirect_desc_cache);
+     *   - hw/virtio/virtio.c|1688| <<virtqueue_split_pop>> address_space_cache_init_empty(&indirect_desc_cache);
+     *   - hw/virtio/virtio.c|1835| <<virtqueue_packed_pop>> address_space_cache_init_empty(&indirect_desc_cache);
+     *   - hw/virtio/virtio.c|4312| <<qmp_x_query_virtio_queue_element>> address_space_cache_init_empty(&indirect_desc_cache);
+     */
     address_space_cache_init_empty(&indirect_desc_cache);
 
     RCU_READ_LOCK_GUARD();
@@ -1698,6 +1834,21 @@ static void *virtqueue_split_pop(VirtQueue *vq, size_t sz)
     /* When we start there are none of either input nor output. */
     out_num = in_num = elem_entries = 0;
 
+    /*
+     * typedef struct VRing
+     * {   
+     *     unsigned int num;
+     *     unsigned int num_default;
+     *     unsigned int align;
+     *     hwaddr desc;
+     *     hwaddr avail;
+     *     hwaddr used;
+     *     VRingMemoryRegionCaches *caches;
+     * } VRing;
+     *
+     * VirtQueue *vq:
+     * -> VRing vring;
+     */
     max = vq->vring.num;
 
     if (vq->inuse >= vq->vring.num) {
@@ -1705,6 +1856,13 @@ static void *virtqueue_split_pop(VirtQueue *vq, size_t sz)
         goto done;
     }
 
+    /*
+     * called by:
+     *   - called by:
+     *   - hw/virtio/virtio.c|1273| <<virtqueue_split_get_avail_bytes>> if (!virtqueue_get_head(vq, idx++, &i)) {
+     *   - hw/virtio/virtio.c|1708| <<virtqueue_split_pop>> if (!virtqueue_get_head(vq, vq->last_avail_idx++, &head)) {
+     *   - hw/virtio/virtio.c|2045| <<virtqueue_split_drop_all>> if (!virtqueue_get_head(vq, vq->last_avail_idx, &elem.index)) {
+     */
     if (!virtqueue_get_head(vq, vq->last_avail_idx++, &head)) {
         goto done;
     }
@@ -1753,6 +1911,23 @@ static void *virtqueue_split_pop(VirtQueue *vq, size_t sz)
         bool map_ok;
 
         if (desc.flags & VRING_DESC_F_WRITE) {
+            /*
+	     * called by:
+             *   - hw/virtio/virtio.c|1851| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &in_num, addr + out_num, iov + out_num,
+             *               VIRTQUEUE_MAX_SIZE - out_num, true,
+             *               desc.addr, desc.len);
+             *   - hw/virtio/virtio.c|1860| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+             *               desc.addr, desc.len);
+             * hw/virtio/virtio.c|1988| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &in_num, addr + out_num, iov + out_num,
+             *               VIRTQUEUE_MAX_SIZE - out_num, true,
+             *               desc.addr, desc.len);
+             * hw/virtio/virtio.c|1997| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+             *               desc.addr, desc.len);
+	     */
             map_ok = virtqueue_map_desc(vdev, &in_num, addr + out_num,
                                         iov + out_num,
                                         VIRTQUEUE_MAX_SIZE - out_num, true,
@@ -1762,6 +1937,23 @@ static void *virtqueue_split_pop(VirtQueue *vq, size_t sz)
                 virtio_error(vdev, "Incorrect order for descriptors");
                 goto err_undo_map;
             }
+            /*
+	     * called by:
+             *   - hw/virtio/virtio.c|1851| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &in_num, addr + out_num, iov + out_num,
+             *               VIRTQUEUE_MAX_SIZE - out_num, true,
+             *               desc.addr, desc.len);
+             *   - hw/virtio/virtio.c|1860| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+             *               desc.addr, desc.len);
+             * hw/virtio/virtio.c|1988| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &in_num, addr + out_num, iov + out_num,
+             *               VIRTQUEUE_MAX_SIZE - out_num, true,
+             *               desc.addr, desc.len);
+             * hw/virtio/virtio.c|1997| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+             *               desc.addr, desc.len);
+	     */
             map_ok = virtqueue_map_desc(vdev, &out_num, addr, iov,
                                         VIRTQUEUE_MAX_SIZE, false,
                                         desc.addr, desc.len);
@@ -1783,6 +1975,22 @@ static void *virtqueue_split_pop(VirtQueue *vq, size_t sz)
         goto err_undo_map;
     }
 
+    /*
+     * typedef struct VirtQueueElement
+     * {
+     *     unsigned int index;
+     *     unsigned int len;
+     *     unsigned int ndescs;
+     *     unsigned int out_num;
+     *     unsigned int in_num;
+     *     // Element has been processed (VIRTIO_F_IN_ORDER)
+     *     bool in_order_filled;
+     *     hwaddr *in_addr;
+     *     hwaddr *out_addr;
+     *     struct iovec *in_sg;
+     *     struct iovec *out_sg;
+     * } VirtQueueElement;
+     */
     /* Now copy what we have collected and mapped */
     elem = virtqueue_alloc_element(sz, out_num, in_num);
     elem->index = head;
@@ -1890,6 +2098,23 @@ static void *virtqueue_packed_pop(VirtQueue *vq, size_t sz)
         bool map_ok;
 
         if (desc.flags & VRING_DESC_F_WRITE) {
+            /*
+	     * called by:
+             *   - hw/virtio/virtio.c|1851| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &in_num, addr + out_num, iov + out_num,
+             *               VIRTQUEUE_MAX_SIZE - out_num, true,
+             *               desc.addr, desc.len);
+             *   - hw/virtio/virtio.c|1860| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+             *               desc.addr, desc.len);
+             * hw/virtio/virtio.c|1988| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &in_num, addr + out_num, iov + out_num,
+             *               VIRTQUEUE_MAX_SIZE - out_num, true,
+             *               desc.addr, desc.len);
+             * hw/virtio/virtio.c|1997| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+             *               desc.addr, desc.len);
+	     */
             map_ok = virtqueue_map_desc(vdev, &in_num, addr + out_num,
                                         iov + out_num,
                                         VIRTQUEUE_MAX_SIZE - out_num, true,
@@ -1899,6 +2124,23 @@ static void *virtqueue_packed_pop(VirtQueue *vq, size_t sz)
                 virtio_error(vdev, "Incorrect order for descriptors");
                 goto err_undo_map;
             }
+            /*
+	     * called by:
+             *   - hw/virtio/virtio.c|1851| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &in_num, addr + out_num, iov + out_num,
+             *               VIRTQUEUE_MAX_SIZE - out_num, true,
+             *               desc.addr, desc.len);
+             *   - hw/virtio/virtio.c|1860| <<virtqueue_split_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+             *               desc.addr, desc.len);
+             * hw/virtio/virtio.c|1988| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &in_num, addr + out_num, iov + out_num,
+             *               VIRTQUEUE_MAX_SIZE - out_num, true,
+             *               desc.addr, desc.len);
+             * hw/virtio/virtio.c|1997| <<virtqueue_packed_pop>> map_ok = virtqueue_map_desc(vdev,
+             *               &out_num, addr, iov, VIRTQUEUE_MAX_SIZE, false,
+             *               desc.addr, desc.len);
+	     */
             map_ok = virtqueue_map_desc(vdev, &out_num, addr, iov,
                                         VIRTQUEUE_MAX_SIZE, false,
                                         desc.addr, desc.len);
@@ -1965,6 +2207,48 @@ err_undo_map:
     goto done;
 }
 
+/*
+ * called by:
+ *   - hw/9pfs/virtio-9p-device.c|57| <<handle_9p_output>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/audio/virtio-snd.c|781| <<virtio_snd_handle_ctrl>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/audio/virtio-snd.c|789| <<virtio_snd_handle_ctrl>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/audio/virtio-snd.c|869| <<virtio_snd_handle_tx_xfer>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/audio/virtio-snd.c|950| <<virtio_snd_handle_rx_xfer>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/block/virtio-blk.c|177| <<virtio_blk_get_request>> VirtIOBlockReq *req = virtqueue_pop(vq, sizeof(VirtIOBlockReq));
+ *   - hw/char/virtio-serial-bus.c|116| <<write_to_port>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/char/virtio-serial-bus.c|141| <<discard_vq_data>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/char/virtio-serial-bus.c|175| <<do_flush_queued_data>> port->elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/char/virtio-serial-bus.c|234| <<send_control_msg>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/char/virtio-serial-bus.c|472| <<control_out>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/display/virtio-gpu-gl.c|91| <<virtio_gpu_gl_handle_ctrl>> cmd = virtqueue_pop(vq, sizeof(struct virtio_gpu_ctrl_command));
+ *   - hw/display/virtio-gpu-gl.c|97| <<virtio_gpu_gl_handle_ctrl>> cmd = virtqueue_pop(vq, sizeof(struct virtio_gpu_ctrl_command));
+ *   - hw/display/virtio-gpu-rutabaga.c|1059| <<virtio_gpu_rutabaga_handle_ctrl>> cmd = virtqueue_pop(vq, sizeof(struct virtio_gpu_ctrl_command));
+ *   - hw/display/virtio-gpu-rutabaga.c|1065| <<virtio_gpu_rutabaga_handle_ctrl>> cmd = virtqueue_pop(vq, sizeof(struct virtio_gpu_ctrl_command));
+ *   - hw/display/virtio-gpu.c|1110| <<virtio_gpu_handle_ctrl>> cmd = virtqueue_pop(vq, sizeof(struct virtio_gpu_ctrl_command));
+ *   - hw/display/virtio-gpu.c|1116| <<virtio_gpu_handle_ctrl>> cmd = virtqueue_pop(vq, sizeof(struct virtio_gpu_ctrl_command));
+ *   - hw/display/virtio-gpu.c|1141| <<virtio_gpu_handle_cursor>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/input/virtio-input.c|48| <<virtio_input_send>> elem = virtqueue_pop(vinput->evt, sizeof(VirtQueueElement));
+ *   - hw/input/virtio-input.c|86| <<virtio_input_handle_sts>> elem = virtqueue_pop(vinput->sts, sizeof(VirtQueueElement));
+ *   - hw/net/virtio-net.c|1608| <<virtio_net_handle_ctrl>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/net/virtio-net.c|1973| <<virtio_net_receive_rcu>> elem = virtqueue_pop(q->rx_vq, sizeof(VirtQueueElement));
+ *   - hw/net/virtio-net.c|2751| <<virtio_net_flush_tx>> elem = virtqueue_pop(q->tx_vq, sizeof(VirtQueueElement));
+ *   - hw/scsi/virtio-scsi.c|243| <<virtio_scsi_pop_req>> req = virtqueue_pop(vq, sizeof(VirtIOSCSIReq) + vs->cdb_size);
+ *   - hw/virtio/vhost-shadow-virtqueue.c|310| <<vhost_handle_guest_kick>> elem = virtqueue_pop(svq->vq, sizeof(*elem));
+ *   - hw/virtio/vhost-vsock-common.c|168| <<vhost_vsock_common_send_transport_reset>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-balloon.c|345| <<virtio_balloon_handle_report>> while ((elem = virtqueue_pop(vq, sizeof(VirtQueueElement)))) {
+ *   - hw/virtio/virtio-balloon.c|412| <<virtio_balloon_handle_output>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-balloon.c|467| <<virtio_balloon_receive_stats>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-balloon.c|524| <<get_free_page_hints>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-crypto.c|357| <<virtio_crypto_handle_ctrl>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-crypto.c|590| <<virtio_crypto_get_request>> VirtIOCryptoReq *req = virtqueue_pop(vq, sizeof(VirtIOCryptoReq));
+ *   - hw/virtio/virtio-iommu.c|1011| <<virtio_iommu_handle_command>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-iommu.c|1112| <<virtio_iommu_report_fault>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-mem.c|815| <<virtio_mem_handle_request>> elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-nsm.c|1541| <<handle_input>> out_elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-nsm.c|1554| <<handle_input>> in_elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
+ *   - hw/virtio/virtio-pmem.c|75| <<virtio_pmem_flush>> req_data = virtqueue_pop(vq, sizeof(VirtIODeviceRequest));
+ *   - hw/virtio/virtio-rng.c|72| <<chr_read>> elem = virtqueue_pop(vrng->vq, sizeof(VirtQueueElement));
+ */
 void *virtqueue_pop(VirtQueue *vq, size_t sz)
 {
     if (virtio_device_disabled(vq->vdev)) {
@@ -2042,6 +2326,12 @@ static unsigned int virtqueue_split_drop_all(VirtQueue *vq)
         /* works similar to virtqueue_pop but does not map buffers
         * and does not allocate any memory */
         smp_rmb();
+        /*
+	 * called by:
+	 *   - hw/virtio/virtio.c|1273| <<virtqueue_split_get_avail_bytes>> if (!virtqueue_get_head(vq, idx++, &i)) {
+         *   - hw/virtio/virtio.c|1708| <<virtqueue_split_pop>> if (!virtqueue_get_head(vq, vq->last_avail_idx++, &head)) {
+         *   - hw/virtio/virtio.c|2045| <<virtqueue_split_drop_all>> if (!virtqueue_get_head(vq, vq->last_avail_idx, &elem.index)) {
+	 */
         if (!virtqueue_get_head(vq, vq->last_avail_idx, &elem.index)) {
             break;
         }
@@ -2719,6 +3009,25 @@ void virtio_notify(VirtIODevice *vdev, VirtQueue *vq)
     virtio_irq(vq);
 }
 
+/*
+ * called by:
+ *   - hw/block/vhost-user-blk.c|106| <<vhost_user_blk_sync_config>> virtio_notify_config(vdev);
+ *   - hw/block/virtio-blk.c|1360| <<virtio_resize_cb>> virtio_notify_config(vdev);
+ *   - hw/char/virtio-serial-bus.c|1004| <<virtser_port_device_plug>> virtio_notify_config(VIRTIO_DEVICE(hotplug_dev));
+ *   - hw/display/virtio-gpu-base.c|86| <<virtio_gpu_notify_event>> virtio_notify_config(&g->parent_obj);
+ *   - hw/input/virtio-input.c|183| <<virtio_input_set_config>> virtio_notify_config(vdev);
+ *   - hw/net/virtio-net.c|231| <<virtio_net_announce_notify>> virtio_notify_config(vdev);
+ *   - hw/net/virtio-net.c|454| <<virtio_net_set_link_status>> virtio_notify_config(vdev);
+ *   - hw/virtio/vhost-user-base.c|165| <<vub_config_notifier>> virtio_notify_config(dev->vdev);
+ *   - hw/virtio/vhost-user-vsock.c|48| <<vuv_handle_config_change>> virtio_notify_config(dev->vdev);
+ *   - hw/virtio/virtio-balloon.c|610| <<virtio_balloon_free_page_start>> virtio_notify_config(vdev);
+ *   - hw/virtio/virtio-balloon.c|630| <<virtio_balloon_free_page_stop>> virtio_notify_config(vdev);
+ *   - hw/virtio/virtio-balloon.c|643| <<virtio_balloon_free_page_done>> virtio_notify_config(vdev);
+ *   - hw/virtio/virtio-balloon.c|813| <<virtio_balloon_to_target>> virtio_notify_config(vdev);
+ *   - hw/virtio/virtio-mem.c|1598| <<virtio_mem_set_requested_size>> virtio_notify_config(VIRTIO_DEVICE(vmem));
+ *   - hw/virtio/virtio.c|3723| <<virtio_config_guest_notifier_read>> virtio_notify_config(vdev);
+ *   - hw/virtio/virtio.c|3917| <<virtio_error>> virtio_notify_config(vdev);
+ */
 void virtio_notify_config(VirtIODevice *vdev)
 {
     if (!(vdev->status & VIRTIO_CONFIG_S_DRIVER_OK))
@@ -3933,6 +4242,10 @@ static void virtio_memory_listener_commit(MemoryListener *listener)
     }
 }
 
+/*
+ * 在以下使用virtio_device_realize():
+ *   - hw/virtio/virtio.c|4459| <<virtio_device_class_init>> dc->realize = virtio_device_realize;
+ */
 static void virtio_device_realize(DeviceState *dev, Error **errp)
 {
     VirtIODevice *vdev = VIRTIO_DEVICE(dev);
diff --git a/include/exec/memory.h b/include/exec/memory.h
index 9458e2801..fc4c1255c 100644
--- a/include/exec/memory.h
+++ b/include/exec/memory.h
@@ -2833,6 +2833,14 @@ int64_t address_space_cache_init(MemoryRegionCache *cache,
  * Initializes #MemoryRegionCache structure without memory region attached.
  * Cache initialized this way can only be safely destroyed, but not used.
  */
+/*
+ * called by:
+ *   - hw/virtio/virtio.c|1259| <<virtqueue_split_get_avail_bytes>> address_space_cache_init_empty(&indirect_desc_cache);
+ *   - hw/virtio/virtio.c|1399| <<virtqueue_packed_get_avail_bytes>> address_space_cache_init_empty(&indirect_desc_cache);
+ *   - hw/virtio/virtio.c|1688| <<virtqueue_split_pop>> address_space_cache_init_empty(&indirect_desc_cache);
+ *   - hw/virtio/virtio.c|1835| <<virtqueue_packed_pop>> address_space_cache_init_empty(&indirect_desc_cache);
+ *   - hw/virtio/virtio.c|4312| <<qmp_x_query_virtio_queue_element>> address_space_cache_init_empty(&indirect_desc_cache);
+ */
 static inline void address_space_cache_init_empty(MemoryRegionCache *cache)
 {
     cache->mrs.mr = NULL;
@@ -3049,6 +3057,13 @@ MemTxResult address_space_read(AddressSpace *as, hwaddr addr,
  * @buf: buffer with the data transferred
  * @len: length of the data transferred
  */
+/*
+ * called by:
+ *   - hw/virtio/virtio.c|307| <<vring_split_desc_read>> address_space_read_cached(cache, i * sizeof(VRingDesc),
+ *   - hw/virtio/virtio.c|639| <<vring_packed_desc_read>> address_space_read_cached(cache, off + offsetof(VRingPackedDesc, addr),
+ *   - hw/virtio/virtio.c|641| <<vring_packed_desc_read>> address_space_read_cached(cache, off + offsetof(VRingPackedDesc, id),
+ *   - hw/virtio/virtio.c|643| <<vring_packed_desc_read>> address_space_read_cached(cache, off + offsetof(VRingPackedDesc, len),
+ */
 static inline MemTxResult
 address_space_read_cached(MemoryRegionCache *cache, hwaddr addr,
                           void *buf, hwaddr len)
diff --git a/include/exec/ramblock.h b/include/exec/ramblock.h
index 0babd105c..a729537c9 100644
--- a/include/exec/ramblock.h
+++ b/include/exec/ramblock.h
@@ -24,6 +24,62 @@
 #include "qemu/rcu.h"
 #include "exec/ramlist.h"
 
+/*
+ * (gdb) p *(RAMBlock *)0x555557712270
+ * $4 = {rcu = {next = 0x0, func = 0x0}, mr = 0x5555575482e0, host = 0x7ffee3e00000 "S\377", colo_cache = 0x0, offset = 0, used_length = 4294967296, max_length = 4294967296,
+ *   resized = 0x0, flags = 16, idstr = "pc.ram", '\000' <repeats 249 times>, next = {le_next = 0x55555801c100, le_prev = 0x555557334880 <ram_list+64>},
+ *   ramblock_notifiers = {lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0, file_bmap = 0x0, bitmap_offset = 0, pages_offset = 0,
+ *   receivedmap = 0x0, clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ *
+ * (gdb) p *(RAMBlock *)0x55555801c100
+ * $5 = {rcu = {next = 0x0, func = 0x0}, mr = 0x55555800a0d0, host = 0x7ffee2c00000 "", colo_cache = 0x0, offset = 4295491584, used_length = 16777216, max_length = 16777216,
+ *   resized = 0x0, flags = 16, idstr = "0000:00:02.0/vga.vram", '\000' <repeats 234 times>, next = {le_next = 0x555557b2c820, le_prev = 0x5555577123c0},
+ *   ramblock_notifiers = {lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0, file_bmap = 0x0, bitmap_offset = 0, pages_offset = 0,
+ *   receivedmap = 0x0, clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ *
+ * (gdb) p *(RAMBlock *)0x555557b2c820
+ * $6 = {rcu = {next = 0x0, func = 0x0}, mr = 0x55555742c000, host = 0x7fffe8600000 "FACS@", colo_cache = 0x0, offset = 4312793088, used_length = 131072,
+ *   max_length = 2097152, resized = 0x5555559402c4 <fw_cfg_resized>, flags = 20, idstr = "/rom@etc/acpi/tables", '\000' <repeats 235 times>, next = {
+ *     le_next = 0x555557b19940, le_prev = 0x55555801c250}, ramblock_notifiers = {lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0,
+ *   file_bmap = 0x0, bitmap_offset = 0, pages_offset = 0, receivedmap = 0x0, clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ *
+ * (gdb) p *(RAMBlock *)0x555557b19940
+ * $7 = {rcu = {next = 0x0, func = 0x0}, mr = 0x5555576793a0, host = 0x7fffe9000000 "", colo_cache = 0x0, offset = 4294967296, used_length = 262144, max_length = 262144,
+ *   resized = 0x0, flags = 16, idstr = "pc.bios", '\000' <repeats 248 times>, next = {le_next = 0x5555585cf3a0, le_prev = 0x555557b2c970}, ramblock_notifiers = {
+ *     lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0, file_bmap = 0x0, bitmap_offset = 0, pages_offset = 0, receivedmap = 0x0,
+ *   clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ *
+ * (gdb) p *(RAMBlock *)0x5555585cf3a0
+ * $8 = {rcu = {next = 0x0, func = 0x0}, mr = 0x555558446d50, host = 0x7fffe8a00000 "U\252\207", <incomplete sequence \351\242>, colo_cache = 0x0, offset = 4312530944,
+ *   used_length = 262144, max_length = 262144, resized = 0x0, flags = 16, idstr = "0000:00:03.0/virtio-net-pci.rom", '\000' <repeats 224 times>, next = {
+ *     le_next = 0x555557680e90, le_prev = 0x555557b19a90}, ramblock_notifiers = {lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0,
+ *   file_bmap = 0x0, bitmap_offset = 0, pages_offset = 0, receivedmap = 0x0, clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ *
+ * (gdb) p *(RAMBlock *)0x555557680e90
+ * $9 = {rcu = {next = 0x0, func = 0x0}, mr = 0x555557565000, host = 0x7fffe8e00000 "", colo_cache = 0x0, offset = 4295229440, used_length = 131072, max_length = 131072,
+ *   resized = 0x0, flags = 16, idstr = "pc.rom", '\000' <repeats 249 times>, next = {le_next = 0x5555581e99c0, le_prev = 0x5555585cf4f0}, ramblock_notifiers = {
+ *     lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0, file_bmap = 0x0, bitmap_offset = 0, pages_offset = 0, receivedmap = 0x0,
+ *   clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ *
+ * (gdb) p *(RAMBlock *)0x5555581e99c0
+ * $10 = {rcu = {next = 0x0, func = 0x0}, mr = 0x555558009f20, host = 0x7fffe8c00000 "U\252M\351\220U\211", colo_cache = 0x0, offset = 4312268800, used_length = 65536,
+ *   max_length = 65536, resized = 0x0, flags = 16, idstr = "0000:00:02.0/vga.rom", '\000' <repeats 235 times>, next = {le_next = 0x555557b2c3f0, le_prev = 0x555557680fe0},
+ *   ramblock_notifiers = {lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0, file_bmap = 0x0, bitmap_offset = 0, pages_offset = 0,
+ *   receivedmap = 0x0, clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ *
+ * (gdb) p *(RAMBlock *)0x555557b2c3f0
+ * $11 = {rcu = {next = 0x0, func = 0x0}, mr = 0x5555578920d0, host = 0x7fffe8400000 "\001", colo_cache = 0x0, offset = 4314890240, used_length = 4096, max_length = 65536,
+ *   resized = 0x5555559402c4 <fw_cfg_resized>, flags = 20, idstr = "/rom@etc/table-loader", '\000' <repeats 234 times>, next = {le_next = 0x55555780b600,
+ *     le_prev = 0x5555581e9b10}, ramblock_notifiers = {lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0, file_bmap = 0x0,
+ *   bitmap_offset = 0, pages_offset = 0, receivedmap = 0x0, clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ *
+ * (gdb) p *(RAMBlock *)0x55555780b600
+ * $12 = {rcu = {next = 0x0, func = 0x0}, mr = 0x555557b67eb0, host = 0x7fffe8200000 "RSD PTR ", colo_cache = 0x0, offset = 4315152384, used_length = 4096,
+ *   max_length = 4096, resized = 0x5555559402c4 <fw_cfg_resized>, flags = 20, idstr = "/rom@etc/acpi/rsdp", '\000' <repeats 237 times>, next = {le_next = 0x0,
+ *     le_prev = 0x555557b2c540}, ramblock_notifiers = {lh_first = 0x0}, fd = -1, fd_offset = 0, guest_memfd = -1, page_size = 4096, bmap = 0x0, file_bmap = 0x0,
+ *   bitmap_offset = 0, pages_offset = 0, receivedmap = 0x0, clear_bmap = 0x0, clear_bmap_shift = 0 '\000', postcopy_length = 0}
+ */
+
 struct RAMBlock {
     struct rcu_head rcu;
     struct MemoryRegion *mr;
@@ -41,6 +97,19 @@ struct RAMBlock {
     QLIST_HEAD(, RAMBlockNotifier) ramblock_notifiers;
     int fd;
     uint64_t fd_offset;
+    /*
+     * 在以下使用RAMBlock->guest_memfd:
+     *   - system/physmem.c|2170| <<qemu_ram_alloc_internal>> new_block->guest_memfd = -1;
+     *   - accel/kvm/kvm-all.c|1534| <<kvm_set_phys_mem>> mem->guest_memfd = mr->ram_block->guest_memfd;
+     *   - system/memory.c|1895| <<memory_region_has_guest_memfd>> return mr->ram_block && mr->ram_block->guest_memfd >= 0;
+     *   - system/physmem.c|1954| <<ram_block_add>> assert(new_block->guest_memfd < 0);
+     *   - system/physmem.c|1964| <<ram_block_add>> new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
+     *   - system/physmem.c|1966| <<ram_block_add>> if (new_block->guest_memfd < 0) {
+     *   - system/physmem.c|2075| <<qemu_ram_alloc_from_fd>> new_block->guest_memfd = -1;
+     *   - system/physmem.c|2237| <<reclaim_ramblock>> if (block->guest_memfd >= 0) {
+     *   - system/physmem.c|2238| <<reclaim_ramblock>> close(block->guest_memfd);
+     *   - system/physmem.c|3847| <<ram_block_discard_guest_memfd_range>> ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
+     */
     int guest_memfd;
     size_t page_size;
     /* dirty bitmap used during migration */
diff --git a/include/hw/core/cpu.h b/include/hw/core/cpu.h
index c3ca0babc..370f28660 100644
--- a/include/hw/core/cpu.h
+++ b/include/hw/core/cpu.h
@@ -498,6 +498,19 @@ struct CPUState {
     sigjmp_buf jmp_env;
 
     QemuMutex work_mutex;
+    /*
+     * 在以下使用CPUState->work_list:
+     *   - cpu-common.c|137| <<queue_work_on_cpu>> QSIMPLEQ_INSERT_TAIL(&cpu->work_list, wi, node);
+     *   - cpu-common.c|340| <<free_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|341| <<free_queued_cpu_work>> struct qemu_work_item *wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|342| <<free_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - cpu-common.c|354| <<process_queued_cpu_work>> if (QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|358| <<process_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|359| <<process_queued_cpu_work>> wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|360| <<process_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - hw/core/cpu-common.c|257| <<cpu_common_initfn>> QSIMPLEQ_INIT(&cpu->work_list);
+     *   - system/cpus.c|83| <<cpu_work_list_empty>> return QSIMPLEQ_EMPTY_ATOMIC(&cpu->work_list);
+     */
     QSIMPLEQ_HEAD(, qemu_work_item) work_list;
 
     struct CPUAddressSpace *cpu_ases;
@@ -824,6 +837,15 @@ const char *parse_cpu_option(const char *cpu_option);
  *
  * Returns: %true if the CPU has work, %false otherwise.
  */
+/*
+ * called by:
+ *   - hw/ppc/spapr_hcall.c|506| <<h_cede>> if (!cpu_has_work(cs)) {
+ *   - system/cpus.c|94| <<cpu_thread_is_idle>> if (!cpu->halted || cpu_has_work(cpu)) {
+ *   - target/arm/cpu.c|1147| <<arm_cpu_exec_halt>> bool leave_halt = cpu_has_work(cs);
+ *   - target/arm/tcg/op_helper.c|388| <<HELPER>> if (cpu_has_work(cs)) {
+ *   - target/arm/tcg/op_helper.c|434| <<HELPER>> if (cpu_has_work(cs) || cntvct >= timeout) {
+ *   - target/i386/tcg/sysemu/seg_helper.c|143| <<x86_cpu_exec_halt>> if (!cpu_has_work(cpu)) {
+ */
 static inline bool cpu_has_work(CPUState *cpu)
 {
     CPUClass *cc = CPU_GET_CLASS(cpu);
diff --git a/include/hw/pci/pci_device.h b/include/hw/pci/pci_device.h
index 8eaf0d58b..35904259f 100644
--- a/include/hw/pci/pci_device.h
+++ b/include/hw/pci/pci_device.h
@@ -113,6 +113,18 @@ struct PCIDevice {
 
     /* Space to store MSIX table & pending bit array */
     uint8_t *msix_table;
+    /*
+     * 在以下使用PCIDevice->msix_pba:
+     *   - hw/pci/msix.c|71| <<msix_pending_byte>> return dev->msix_pba + vector / 8;
+     *   - hw/pci/msix.c|257| <<msix_pba_mmio_read>> return pci_get_long(dev->msix_pba + addr);
+     *   - hw/pci/msix.c|369| <<msix_init>> dev->msix_pba = g_malloc0(pba_size);
+     *   - hw/pci/msix.c|460| <<msix_uninit>> g_free(dev->msix_pba);
+     *   - hw/pci/msix.c|461| <<msix_uninit>> dev->msix_pba = NULL;
+     *   - hw/pci/msix.c|487| <<msix_save>> qemu_put_buffer(f, dev->msix_pba, DIV_ROUND_UP(n, 8));
+     *   - hw/pci/msix.c|502| <<msix_load>> qemu_get_buffer(f, dev->msix_pba, DIV_ROUND_UP(n, 8));
+     *   - hw/pci/msix.c|554| <<msix_reset>> memset(dev->msix_pba, 0, QEMU_ALIGN_UP(dev->msix_entries_nr, 64) / 8);
+     *   - hw/usb/hcd-xhci-pci.c|170| <<usb_xhci_pci_exit>> if (dev->msix_table && dev->msix_pba && dev->msix_entry_used) {
+     */
     uint8_t *msix_pba;
 
     /* May be used by INTx or MSI during interrupt notification */
@@ -126,6 +138,15 @@ struct PCIDevice {
     MemoryRegion msix_exclusive_bar;
     /* Memory Regions for MSIX table and pending bit entries. */
     MemoryRegion msix_table_mmio;
+    /*
+     * 在以下使用PCIDevice->msix_pba_mmio:
+     *   -  hw/pci/msix.c|377| <<msix_init>> memory_region_init_io(&dev->msix_pba_mmio, OBJECT(dev), &msix_pba_mmio_ops, dev,
+     *   - hw/pci/msix.c|379| <<msix_init>> memory_region_add_subregion(pba_bar, pba_offset, &dev->msix_pba_mmio);
+     *   - hw/pci/msix.c|459| <<msix_uninit>> memory_region_del_subregion(pba_bar, &dev->msix_pba_mmio);
+     *   - hw/vfio/pci.c|360| <<vfio_msi_interrupt>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, true);
+     *   - hw/vfio/pci.c|607| <<vfio_msix_vector_do_use>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+     *   - hw/vfio/pci.c|1684| <<vfio_msix_setup>> memory_region_set_enabled(&vdev->pdev.msix_pba_mmio, false);
+     */
     MemoryRegion msix_pba_mmio;
     /* Reference-count for entries actually in use by driver. */
     unsigned *msix_entry_used;
@@ -156,6 +177,16 @@ struct PCIDevice {
     /* MSI-X notifiers */
     MSIVectorUseNotifier msix_vector_use_notifier;
     MSIVectorReleaseNotifier msix_vector_release_notifier;
+    /*
+     * 在以下使用PCIDevice->msix_vector_poll_notifier:
+     *   - hw/pci/msix.c|251| <<msix_pba_mmio_read>> if (dev->msix_vector_poll_notifier) {
+     *   - hw/pci/msix.c|254| <<msix_pba_mmio_read>> dev->msix_vector_poll_notifier(dev, vector_start, vector_end);
+     *   - hw/pci/msix.c|629| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier = poll_notifier;
+     *   - hw/pci/msix.c|640| <<msix_set_vector_notifiers>> if (dev->msix_vector_poll_notifier) {
+     *   - hw/pci/msix.c|641| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier(dev, 0, dev->msix_entries_nr);
+     *   - hw/pci/msix.c|651| <<msix_set_vector_notifiers>> dev->msix_vector_poll_notifier = NULL;
+     *   - hw/pci/msix.c|670| <<msix_unset_vector_notifiers>> dev->msix_vector_poll_notifier = NULL;
+     */
     MSIVectorPollNotifier msix_vector_poll_notifier;
 
     /* SPDM */
diff --git a/include/hw/virtio/vhost.h b/include/hw/virtio/vhost.h
index 461c168c3..ff4f012bd 100644
--- a/include/hw/virtio/vhost.h
+++ b/include/hw/virtio/vhost.h
@@ -122,6 +122,25 @@ struct vhost_dev {
     uint64_t backend_cap;
     /* @started: is the vhost device started? */
     bool started;
+    /*
+     * 在以下设置vhost_dev->log_enabled;
+     *   - hw/virtio/vhost.c|1261| <<vhost_migration_log>> dev->log_enabled = enable;
+     *   - hw/virtio/vhost.c|1301| <<vhost_migration_log>> dev->log_enabled = enable;
+     *   - hw/virtio/vhost.c|1316| <<vhost_migration_log>> dev->log_enabled = false;
+     *   - hw/virtio/vhost.c|1817| <<vhost_dev_init>> hdev->log_enabled = false;
+     * 在以下使用vhost_dev->log_enabled;
+     *   - hw/virtio/vhost.c|203| <<vhost_sync_dirty_bitmap>> if (!dev->log_enabled || !dev->started) {
+     *   - hw/virtio/vhost.c|817| <<vhost_commit>> if (!dev->log_enabled) {
+     *   - hw/virtio/vhost.c|1240| <<vhost_dev_set_log>> vhost_virtqueue_set_addr(dev, dev->vqs + i, idx, dev->log_enabled);
+     *   - hw/virtio/vhost.c|1242| <<vhost_dev_set_log>> vhost_dev_set_features(dev, dev->log_enabled);
+     *   - hw/virtio/vhost.c|1257| <<vhost_migration_log>> if (enable == dev->log_enabled) {
+     *   - hw/virtio/vhost.c|1522| <<vhost_virtqueue_start>> r = vhost_virtqueue_set_addr(dev, vq, vhost_vq_index, dev->log_enabled);
+     *   - hw/virtio/vhost.c|2145| <<vhost_dev_prepare_inflight>> r = vhost_dev_set_features(hdev, hdev->log_enabled);
+     *   - hw/virtio/vhost.c|2227| <<vhost_dev_start>> r = vhost_dev_set_features(hdev, hdev->log_enabled);
+     *   - hw/virtio/vhost.c|2262| <<vhost_dev_start>> if (hdev->log_enabled) {
+     *   - hw/virtio/virtio-hmp-cmds.c|171| <<hmp_virtio_status>> s->vhost_dev->log_enabled ? "true" : "false");
+     *   - hw/virtio/virtio-qmp.c|791| <<qmp_x_query_virtio_status>> status->vhost_dev->log_enabled = hdev->log_enabled;
+     */
     bool log_enabled;
     uint64_t log_size;
     Error *migration_blocker;
diff --git a/include/hw/virtio/virtio-access.h b/include/hw/virtio/virtio-access.h
index 07aae6904..c4086a3a5 100644
--- a/include/hw/virtio/virtio-access.h
+++ b/include/hw/virtio/virtio-access.h
@@ -156,6 +156,50 @@ static inline uint16_t virtio_tswap16(VirtIODevice *vdev, uint16_t s)
 #endif
 }
 
+/*
+ * (gdb) bt
+ * #0  lduw_he_p (ptr=0x7fb12d3b100a) at /home/zhang/kvm/qemu-9.2.0/include/qemu/bswap.h:252
+ * #1  0x0000557c152e15ef in lduw_le_p (ptr=0x7fb12d3b100a) at /home/zhang/kvm/qemu-9.2.0/include/qemu/bswap.h:301
+ * #2  0x0000557c152e197d in address_space_lduw_le_cached (cache=0x7fb00c064df0, addr=10, attrs=..., result=0x0)
+ *     at /home/zhang/kvm/qemu-9.2.0/include/exec/memory_ldst_cached.h.inc:33
+ * #3  0x0000557c152e1c2c in lduw_le_phys_cached (cache=0x7fb00c064df0, addr=10)
+ *     at /home/zhang/kvm/qemu-9.2.0/include/exec/memory_ldst_phys.h.inc:67
+ * #4  0x0000557c152e23c2 in virtio_lduw_phys_cached (vdev=0x557c50ebdc30, cache=0x7fb00c064df0, pa=10)
+ *     at /home/zhang/kvm/qemu-9.2.0/include/hw/virtio/virtio-access.h:166
+ * #5  0x0000557c152e2e83 in vring_avail_ring (vq=0x557c50f19a40, i=3) at ../hw/virtio/virtio.c:390
+ * #6  0x0000557c152e4da8 in virtqueue_get_head (vq=0x557c50f19a40, idx=3, head=0x7ffe4d5e0bb0) at ../hw/virtio/virtio.c:1209
+ * #7  0x0000557c152e6256 in virtqueue_split_pop (vq=0x557c50f19a40, sz=240) at ../hw/virtio/virtio.c:1708
+ * #8  0x0000557c152e72a4 in virtqueue_pop (vq=0x557c50f19a40, sz=240) at ../hw/virtio/virtio.c:1977
+ * #9  0x0000557c1527d3a9 in virtio_blk_get_request (s=0x557c50ebdc30, vq=0x557c50f19a40) at ../hw/block/virtio-blk.c:177
+ * #10 0x0000557c1527f68a in virtio_blk_handle_vq (s=0x557c50ebdc30, vq=0x557c50f19a40) at ../hw/block/virtio-blk.c:988
+ * #11 0x0000557c1527f782 in virtio_blk_handle_output (vdev=0x557c50ebdc30, vq=0x557c50f19a40) at ../hw/block/virtio-blk.c:1022
+ * #12 0x0000557c152e89fb in virtio_queue_notify_vq (vq=0x557c50f19a40) at ../hw/virtio/virtio.c:2484
+ * #13 0x0000557c152ec235 in virtio_queue_host_notifier_read (n=0x557c50f19ab4) at ../hw/virtio/virtio.c:3869
+ * #14 0x0000557c1561dc88 in aio_dispatch_handler (ctx=0x557c4fe7ec90, node=0x7fb014006010) at ../util/aio-posix.c:373
+ * #15 0x0000557c1561de59 in aio_dispatch_handlers (ctx=0x557c4fe7ec90) at ../util/aio-posix.c:415
+ * #16 0x0000557c1561deb5 in aio_dispatch (ctx=0x557c4fe7ec90) at ../util/aio-posix.c:425
+ * #17 0x0000557c1563f552 in aio_ctx_dispatch (source=0x557c4fe7ec90, callback=0x0, user_data=0x0) at ../util/async.c:361
+ * #18 0x00007fb44d92494b in g_main_dispatch (context=0x557c4fe7f180) at ../glib/gmain.c:3325
+ * #19 g_main_context_dispatch (context=0x557c4fe7f180) at ../glib/gmain.c:4043
+ * #20 0x0000557c15640c2a in glib_pollfds_poll () at ../util/main-loop.c:287
+ * #21 0x0000557c15640cb8 in os_host_main_loop_wait (timeout=947384) at ../util/main-loop.c:310
+ * #22 0x0000557c15640de7 in main_loop_wait (nonblocking=0) at ../util/main-loop.c:589
+ * #23 0x0000557c150914f9 in qemu_main_loop () at ../system/runstate.c:835
+ * #24 0x0000557c1554b052 in qemu_default_main () at ../system/main.c:37
+ * #25 0x0000557c1554b08f in main (argc=19, argv=0x7ffe4d5e71e8) at ../system/main.c:48
+ *
+ * called by:
+ *   - hw/virtio/virtio.c|322| <<vring_packed_event_read>> e->flags = virtio_lduw_phys_cached(vdev, cache, off_flags);
+ *   - hw/virtio/virtio.c|325| <<vring_packed_event_read>> e->off_wrap = virtio_lduw_phys_cached(vdev, cache, off_off);
+ *   - hw/virtio/virtio.c|363| <<vring_avail_flags>> return virtio_lduw_phys_cached(vq->vdev, &caches->avail, pa);
+ *   - hw/virtio/virtio.c|376| <<vring_avail_idx>> vq->shadow_avail_idx = virtio_lduw_phys_cached(vq->vdev, &caches->avail, pa);
+ *   - hw/virtio/virtio.c|414| <<vring_avail_ring>> return virtio_lduw_phys_cached(vq->vdev, &caches->avail, pa);
+ *   - hw/virtio/virtio.c|457| <<vring_used_flags>> return virtio_lduw_phys_cached(vq->vdev, &caches->used, pa);
+ *   - hw/virtio/virtio.c|470| <<vring_used_idx>> return virtio_lduw_phys_cached(vq->vdev, &caches->used, pa);
+ *   - hw/virtio/virtio.c|499| <<vring_used_flags_set_bit>> flags = virtio_lduw_phys_cached(vq->vdev, &caches->used, pa);
+ *   - hw/virtio/virtio.c|516| <<vring_used_flags_unset_bit>> flags = virtio_lduw_phys_cached(vq->vdev, &caches->used, pa);
+ *   - hw/virtio/virtio.c|622| <<vring_packed_desc_read_flags>> *flags = virtio_lduw_phys_cached(vdev, cache, off);
+ */
 static inline uint16_t virtio_lduw_phys_cached(VirtIODevice *vdev,
                                                MemoryRegionCache *cache,
                                                hwaddr pa)
@@ -163,6 +207,44 @@ static inline uint16_t virtio_lduw_phys_cached(VirtIODevice *vdev,
     if (virtio_access_is_big_endian(vdev)) {
         return lduw_be_phys_cached(cache, pa);
     }
+    /*
+     * include/exec/memory_ldst_phys.h.inc:
+     *
+     * 65	static inline uint16_t glue(lduw_le_phys, SUFFIX)(ARG1_DECL, hwaddr addr)
+     * 66	{
+     * 67	    return glue(address_space_lduw_le, SUFFIX)(ARG1, addr,
+     * 68	                                               MEMTXATTRS_UNSPECIFIED, NULL);
+     * 69	}
+     * 70
+     * 71	static inline uint16_t glue(lduw_be_phys, SUFFIX)(ARG1_DECL, hwaddr addr)
+     * 72	{
+     * 73	    return glue(address_space_lduw_be, SUFFIX)(ARG1, addr,
+     * 74	                                               MEMTXATTRS_UNSPECIFIED, NULL);
+     * 75	}
+     *
+     * include/exec/memory_ldst_cached.h.inc:
+     *
+     * 20 #define ADDRESS_SPACE_LD_CACHED(size) \
+     * 21     glue(glue(address_space_ld, size), glue(ENDIANNESS, _cached))
+     * 22 #define ADDRESS_SPACE_LD_CACHED_SLOW(size) \
+     * 23     glue(glue(address_space_ld, size), glue(ENDIANNESS, _cached_slow))
+     * 24 #define LD_P(size) \
+     * 25     glue(glue(ld, size), glue(ENDIANNESS, _p))
+     * 26
+     * 27 static inline uint16_t ADDRESS_SPACE_LD_CACHED(uw)(MemoryRegionCache *cache,
+     * 28     hwaddr addr, MemTxAttrs attrs, MemTxResult *result)
+     * 29 {
+     * 30     assert(addr < cache->len && 2 <= cache->len - addr);
+     * 31     fuzz_dma_read_cb(cache->xlat + addr, 2, cache->mrs.mr);
+     * 32     if (likely(cache->ptr)) {
+     * 33         return LD_P(uw)(cache->ptr + addr);
+     * 34     } else {
+     * 35         return ADDRESS_SPACE_LD_CACHED_SLOW(uw)(cache, addr, attrs, result);
+     * 36     }
+     * 37 }
+     *
+     * 只在此处调用
+     */
     return lduw_le_phys_cached(cache, pa);
 }
 
diff --git a/include/hw/virtio/virtio-scsi.h b/include/hw/virtio/virtio-scsi.h
index 7be010591..9fcf89541 100644
--- a/include/hw/virtio/virtio-scsi.h
+++ b/include/hw/virtio/virtio-scsi.h
@@ -82,6 +82,14 @@ struct VirtIOSCSI {
 
     SCSIBus bus;
     int resetting; /* written from main loop thread, read from any thread */
+    /*
+     * 在以下使用VirtIOSCSI->events_dropped:
+     *   - hw/scsi/virtio-scsi.c|1012| <<virtio_scsi_reset>> s->events_dropped = false;
+     *   - hw/scsi/virtio-scsi.c|1049| <<virtio_scsi_push_event>> s->events_dropped = true;
+     *   - hw/scsi/virtio-scsi.c|1053| <<virtio_scsi_push_event>> if (s->events_dropped) {
+     *   - hw/scsi/virtio-scsi.c|1055| <<virtio_scsi_push_event>> s->events_dropped = false;
+     *   - hw/scsi/virtio-scsi.c|1084| <<virtio_scsi_handle_event_vq>> if (s->events_dropped) {
+     */
     bool events_dropped;
 
     /*
diff --git a/include/net/filter.h b/include/net/filter.h
index f15f7932b..91fd24c59 100644
--- a/include/net/filter.h
+++ b/include/net/filter.h
@@ -43,6 +43,16 @@ struct NetFilterClass {
     FilterCleanup *cleanup;
     FilterStatusChanged *status_changed;
     FilterHandleEvent *handle_event;
+    /*
+     * 在以下使用NetFilterClass->receive_iov:
+     *   - net/dump.c|251| <<filter_dump_class_init>> nfc->receive_iov = filter_dump_receive_iov;
+     *   - net/filter-buffer.c|185| <<filter_buffer_class_init>> nfc->receive_iov = filter_buffer_receive_iov;
+     *   - net/filter-mirror.c|425| <<filter_mirror_class_init>> nfc->receive_iov = filter_mirror_receive_iov;
+     *   - net/filter-mirror.c|442| <<filter_redirector_class_init>> nfc->receive_iov = filter_redirector_receive_iov;
+     *   - net/filter-replay.c|72| <<filter_replay_class_init>> nfc->receive_iov = filter_replay_receive_iov;
+     *   - net/filter-rewriter.c|424| <<colo_rewriter_class_init>> nfc->receive_iov = colo_rewriter_receive_iov;
+     *   - net/filter.c|41| <<qemu_netfilter_receive>> return NETFILTER_GET_CLASS(OBJECT(nf))->receive_iov(
+     */
     /* mandatory */
     FilterReceiveIOV *receive_iov;
 };
diff --git a/include/sysemu/dump.h b/include/sysemu/dump.h
index d70285485..f41c395d2 100644
--- a/include/sysemu/dump.h
+++ b/include/sysemu/dump.h
@@ -210,6 +210,28 @@ typedef struct DumpState {
                                   * this could be used to calculate
                                   * how much work we have
                                   * finished. */
+    /*
+     * 在以下使用guest_note:
+     *   - dump/dump.c|107| <<dump_cleanup>> g_free(s->guest_note);
+     *   - dump/dump.c|109| <<dump_cleanup>> s->guest_note = NULL;
+     *   - dump/dump.c|287| <<write_guest_note>> if (s->guest_note) {
+     *   - dump/dump.c|288| <<write_guest_note>> ret = f(s->guest_note, s->guest_note_size, s);
+     *   - dump/dump.c|1024| <<create_header32>> if (s->guest_note &&
+     *   - dump/dump.c|1025| <<create_header32>> note_name_equal(s, s->guest_note, "VMCOREINFO")) {
+     *   - dump/dump.c|1028| <<create_header32>> get_note_sizes(s, s->guest_note,
+     *   - dump/dump.c|1135| <<create_header64>> if (s->guest_note &&
+     *   - dump/dump.c|1136| <<create_header64>> note_name_equal(s, s->guest_note, "VMCOREINFO")) {
+     *   - dump/dump.c|1139| <<create_header64>> get_note_sizes(s, s->guest_note,
+     *   - dump/dump.c|1746| <<vmcoreinfo_update_phys_base>> if (!note_name_equal(s, s->guest_note, "VMCOREINFO")) {
+     *   - dump/dump.c|1750| <<vmcoreinfo_update_phys_base>> get_note_sizes(s, s->guest_note, &note_head_size, &name_size, &size);
+     *   - dump/dump.c|1753| <<vmcoreinfo_update_phys_base>> vmci = s->guest_note + note_head_size + ROUND_UP(name_size, 4);
+     *   - dump/dump.c|1890| <<dump_init>> s->guest_note = g_malloc(size + 1);
+     *   - dump/dump.c|1891| <<dump_init>> cpu_physical_memory_read(addr, s->guest_note, size);
+     *   - dump/dump.c|1893| <<dump_init>> get_note_sizes(s, s->guest_note, NULL, &name_size, &desc_size);
+     *   - dump/dump.c|1900| <<dump_init>> g_free(s->guest_note);
+     *   - dump/dump.c|1901| <<dump_init>> s->guest_note = NULL;
+     *   - dump/win_dump.c|410| <<create_win_dump>> WinDumpHeader *h = (void *)(s->guest_note + VMCOREINFO_ELF_NOTE_HDR_SIZE);
+     */
     uint8_t *guest_note;         /* ELF note content */
     size_t guest_note_size;
 } DumpState;
diff --git a/migration/migration.c b/migration/migration.c
index 8c5bd0a75..4425bfd75 100644
--- a/migration/migration.c
+++ b/migration/migration.c
@@ -783,6 +783,26 @@ static void process_incoming_migration_bh(void *opaque)
     migration_incoming_state_destroy();
 }
 
+/*
+ * Target QEMU.
+ * (gdb) bt
+ * #0  0x00007ffff52bf413 in __memmove_avx_unaligned_erms_rtm () from /lib64/libc.so.6
+ * #1  0x0000555555f59607 in qemu_get_buffer (f=0x555557804800, buf=0x7ffee8000000 "\002", size=4096) at ../migration/qemu-file.c:644
+ * #2  0x0000555555e8adc4 in ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4228
+ * #3  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #4  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #5  0x0000555555c32c88 in qemu_loadvm_section_part_end (f=0x555557804800, type=2 '\002') at ../migration/savevm.c:2672
+ * #6  0x0000555555c334b8 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2880
+ * #7  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #8  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #9  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #10 0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #11 0x00007fffffffc7d0 in ?? ()
+ * #12 0x0000000000000000 in ?? ()
+ *
+ * 在以下使用process_incoming_migration_co():
+ *   - migration/migration.c|892| <<migration_incoming_process>> Coroutine *co = qemu_coroutine_create(process_incoming_migration_co, NULL);
+ */
 static void coroutine_fn
 process_incoming_migration_co(void *opaque)
 {
@@ -870,6 +890,27 @@ static void migration_incoming_setup(QEMUFile *f)
     qemu_file_set_blocking(f, false);
 }
 
+/*
+ * (gdb) bt
+ * #0  migration_incoming_process () at ../migration/migration.c:875
+ * #1  0x0000555555c13d04 in migration_ioc_process_incoming (ioc=0x5555574b3a00, errp=0x7fffffffd8f8) at ../migration/migration.c:1008
+ * #2  0x0000555555c05c0d in migration_channel_process_incoming (ioc=0x5555574b3a00) at ../migration/channel.c:45
+ * #3  0x0000555555c0a722 in exec_accept_incoming_migration (ioc=0x5555574b3a00, condition=G_IO_IN, opaque=0x0) at ../migration/exec.c:66
+ * #4  0x0000555555f61bcf in qio_channel_fd_pair_source_dispatch (source=0x555557a05410, callback=0x555555c0a703 <exec_accept_incoming_migration>, user_data=0x0)
+ *     at ../io/channel-watch.c:217
+ * #5  0x00007ffff6fd3854 in g_main_dispatch (context=0x55555740af10) at ../glib/gmain.c:3325
+ * #6  g_main_context_dispatch (context=0x55555740af10) at ../glib/gmain.c:4043
+ * #7  0x000055555618fc2a in glib_pollfds_poll () at ../util/main-loop.c:287
+ * #8  0x000055555618fcb8 in os_host_main_loop_wait (timeout=2224360793) at ../util/main-loop.c:310
+ * #9  0x000055555618fde7 in main_loop_wait (nonblocking=0) at ../util/main-loop.c:589
+ * #10 0x0000555555be04f9 in qemu_main_loop () at ../system/runstate.c:835
+ * #11 0x000055555609a052 in qemu_default_main () at ../system/main.c:37
+ * #12 0x000055555609a08f in main (argc=20, argv=0x7fffffffdbd8) at ../system/main.c:48
+ *
+ * called by:
+ *   - migration/migration.c|935| <<migration_fd_process_incoming>> migration_incoming_process();
+ *   - migration/migration.c|1025| <<migration_ioc_process_incoming>> migration_incoming_process();
+ */
 void migration_incoming_process(void)
 {
     Coroutine *co = qemu_coroutine_create(process_incoming_migration_co, NULL);
@@ -3213,6 +3254,10 @@ typedef enum {
  * Return true if continue to the next iteration directly, false
  * otherwise.
  */
+/*
+ * called by:
+ *   migration/migration.c|3513| <<migration_thread>> MigIterateState iter_state = migration_iteration_run(s);
+ */
 static MigIterateState migration_iteration_run(MigrationState *s)
 {
     uint64_t must_precopy, can_postcopy, pending_size;
diff --git a/migration/migration.h b/migration/migration.h
index 3857905c0..1b1743d1b 100644
--- a/migration/migration.h
+++ b/migration/migration.h
@@ -470,6 +470,13 @@ struct MigrationState {
      */
     bool switchover_acked;
     /* Is this a rdma migration */
+    /*
+     * 在以下使用MigrationState->rdma_migration:
+     *   - migration/migration.c|1703| <<migrate_init>> s->rdma_migration = false;
+     *   - migration/options.c|367| <<migrate_rdma>> return s->rdma_migration;
+     *   - migration/rdma.c|4101| <<rdma_start_incoming_migration>> s->rdma_migration = true;
+     *   - migration/rdma.c|4176| <<rdma_start_outgoing_migration>> s->rdma_migration = true;
+     */
     bool rdma_migration;
 };
 
diff --git a/migration/multifd-nocomp.c b/migration/multifd-nocomp.c
index 55191152f..46daea58d 100644
--- a/migration/multifd-nocomp.c
+++ b/migration/multifd-nocomp.c
@@ -298,11 +298,31 @@ static inline bool multifd_queue_full(MultiFDPages_t *pages)
     return pages->num == multifd_ram_page_count();
 }
 
+/*
+ * called by:
+ *   - migration/multifd-nocomp.c|322| <<multifd_queue_page>> multifd_enqueue(pages, offset);
+ *   - migration/multifd-nocomp.c|342| <<multifd_queue_page>> multifd_enqueue(pages, offset);
+ */
 static inline void multifd_enqueue(MultiFDPages_t *pages, ram_addr_t offset)
 {
+    /*
+     * 76 typedef struct {
+     * 77     // number of used pages
+     * 78     uint32_t num;
+     * 79     // number of normal pages
+     * 80     uint32_t normal_num;
+     * 81     RAMBlock *block;
+     * 82     // offset of each page
+     * 83     ram_addr_t offset[];
+     * 84 } MultiFDPages_t;
+     */
     pages->offset[pages->num++] = offset;
 }
 
+/*
+ * called by:
+ *   - migration/ram.c|1384| <<ram_save_multifd_page>> if (!multifd_queue_page(block, offset)) {
+ */
 /* Returns true if enqueue successful, false otherwise */
 bool multifd_queue_page(RAMBlock *block, ram_addr_t offset)
 {
diff --git a/migration/options.c b/migration/options.c
index ad8d6989a..2a29dbefe 100644
--- a/migration/options.c
+++ b/migration/options.c
@@ -304,6 +304,32 @@ bool migrate_rdma_pin_all(void)
     return s->capabilities[MIGRATION_CAPABILITY_RDMA_PIN_ALL];
 }
 
+/*
+ * 默认:
+ * (qemu) info migrate_capabilities
+ * xbzrle: off
+ * rdma-pin-all: off
+ * auto-converge: off
+ * zero-blocks: off
+ * events: off
+ * postcopy-ram: off
+ * x-colo: off
+ * release-ram: off
+ * return-path: off
+ * pause-before-switchover: off
+ * multifd: off
+ * dirty-bitmaps: off
+ * postcopy-blocktime: off
+ * late-block-activate: off
+ * x-ignore-shared: off
+ * validate-uuid: off
+ * background-snapshot: off
+ * zero-copy-send: off
+ * postcopy-preempt: off
+ * switchover-ack: off
+ * dirty-limit: off
+ * mapped-ram: off
+ */
 bool migrate_release_ram(void)
 {
     MigrationState *s = migrate_get_current();
@@ -364,6 +390,13 @@ bool migrate_rdma(void)
 {
     MigrationState *s = migrate_get_current();
 
+    /*
+     * 在以下使用MigrationState->rdma_migration:
+     *   - migration/migration.c|1703| <<migrate_init>> s->rdma_migration = false;
+     *   - migration/options.c|367| <<migrate_rdma>> return s->rdma_migration;
+     *   - migration/rdma.c|4101| <<rdma_start_incoming_migration>> s->rdma_migration = true;
+     *   - migration/rdma.c|4176| <<rdma_start_outgoing_migration>> s->rdma_migration = true;
+     */
     return s->rdma_migration;
 }
 
diff --git a/migration/qemu-file.c b/migration/qemu-file.c
index b6d2f588b..d01dcfa94 100644
--- a/migration/qemu-file.c
+++ b/migration/qemu-file.c
@@ -421,6 +421,10 @@ static void add_buf_to_iovec(QEMUFile *f, size_t len)
     }
 }
 
+/*
+ * called by:
+ *   - migration/ram.c|1306| <<save_normal_page>> qemu_put_buffer_async(file, buf, TARGET_PAGE_SIZE,
+ */
 void qemu_put_buffer_async(QEMUFile *f, const uint8_t *buf, size_t size,
                            bool may_free)
 {
@@ -431,6 +435,55 @@ void qemu_put_buffer_async(QEMUFile *f, const uint8_t *buf, size_t size,
     add_to_iovec(f, buf, size, may_free);
 }
 
+/*
+ * called by:
+ *   - hw/display/virtio-gpu.c|1244| <<virtio_gpu_save>> qemu_put_buffer(f, (void *)pixman_image_get_data(res->image),
+ *   - hw/intc/s390_flic_kvm.c|446| <<kvm_flic_save>> qemu_put_buffer(f, (uint8_t *) buf,
+ *   - hw/pci/msix.c|486| <<msix_save>> qemu_put_buffer(f, dev->msix_table, n * PCI_MSIX_ENTRY_SIZE);
+ *   - hw/pci/msix.c|487| <<msix_save>> qemu_put_buffer(f, dev->msix_pba, DIV_ROUND_UP(n, 8));
+ *   - hw/pci/pci.c|692| <<put_pci_config_device>> qemu_put_buffer(f, *v, size);
+ *   - hw/pci/shpc.c|766| <<shpc_save>> qemu_put_buffer(f, d->shpc->config, SHPC_SIZEOF(d));
+ *   - hw/ppc/spapr.c|2175| <<htab_save_chunk>> qemu_put_buffer(f, HPTE(spapr->htab, chunkstart),
+ *   - hw/s390x/s390-skeys.c|375| <<s390_storage_keys_save>> qemu_put_buffer(f, buf, cur_pages);
+ *   - hw/scsi/mptsas.c|1221| <<mptsas_save_request>> qemu_put_buffer(f, (unsigned char *)&req->scsi_io, sizeof(req->scsi_io));
+ *   - hw/scsi/scsi-bus.c|1828| <<put_scsi_req>> qemu_put_buffer(f, req->cmd.buf, sizeof(req->cmd.buf));
+ *   - hw/scsi/scsi-disk.c|166| <<scsi_disk_save_request>> qemu_put_buffer(f, r->iov.iov_base, r->iov.iov_len);
+ *   - hw/scsi/scsi-disk.c|170| <<scsi_disk_save_request>> qemu_put_buffer(f, r->iov.iov_base, r->iov.iov_len);
+ *   - hw/scsi/scsi-generic.c|51| <<scsi_generic_save_request>> qemu_put_buffer(f, r->buf, r->req.cmd.xfer);
+ *   - hw/usb/redirect.c|2254| <<usbredir_put_parser>> qemu_put_buffer(f, data, len);
+ *   - hw/usb/redirect.c|2320| <<usbredir_put_bufpq>> qemu_put_buffer(f, bufp->data + bufp->offset, len);
+ *   - hw/vfio/migration.c|391| <<vfio_save_block>> qemu_put_buffer(f, migration->data_buffer, data_size);
+ *   - hw/virtio/vhost.c|2520| <<vhost_save_backend_state>> qemu_put_buffer(f, transfer_buf, read_ret);
+ *   - hw/virtio/virtio.c|2181| <<qemu_put_virtqueue_element>> qemu_put_buffer(f, (uint8_t *)&data, sizeof(VirtQueueElementOld));
+ *   - hw/virtio/virtio.c|3042| <<virtio_save>> qemu_put_buffer(f, vdev->config, vdev->config_len);
+ *   - migration/block-dirty-bitmap.c|461| <<send_bitmap_bits>> qemu_put_buffer(f, buf, buf_size);
+ *   - migration/colo.c|485| <<colo_do_checkpoint_transaction>> qemu_put_buffer(s->to_dst_file, bioc->data, bioc->usage);
+ *   - migration/migration.c|455| <<migrate_send_rp_message>> qemu_put_buffer(mis->to_src_file, data, len);
+ *   - migration/migration.c|2869| <<bg_migration_completion>> qemu_put_buffer(s->to_dst_file, s->bioc->data, s->bioc->usage);
+ *   - migration/qemu-file.c|807| <<qemu_put_counted_string>> qemu_put_buffer(f, (const uint8_t *)str, len);
+ *   - migration/ram.c|327| <<ramblock_recv_bitmap_send>> qemu_put_buffer(file, (const uint8_t *)le_bitmap, size);
+ *   - migration/ram.c|534| <<save_page_header>> qemu_put_buffer(f, (uint8_t *)block->idstr, len);
+ *   - migration/ram.c|699| <<save_xbzrle_page>> qemu_put_buffer(file, XBZRLE.encoded_buf, encoded_len);
+ *   - migration/ram.c|1261| <<save_normal_page>> qemu_put_buffer(file, buf, TARGET_PAGE_SIZE);
+ *   - migration/ram.c|2995| <<mapped_ram_setup_ramblock>> qemu_put_buffer(file, (uint8_t *) header, header_size);
+ *   - migration/ram.c|3072| <<ram_save_setup>> qemu_put_buffer(f, (uint8_t *)block->idstr, strlen(block->idstr));
+ *   - migration/savevm.c|413| <<put_capability>> qemu_put_buffer(f, (uint8_t *)capability_str, len);
+ *   - migration/savevm.c|975| <<save_section_header>> qemu_put_buffer(f, (uint8_t *)se->idstr, len);
+ *   - migration/savevm.c|1051| <<qemu_savevm_command_send>> qemu_put_buffer(f, data, len);
+ *   - migration/savevm.c|1104| <<qemu_savevm_send_packaged>> qemu_put_buffer(f, buf, len);
+ *   - migration/savevm.c|1574| <<qemu_savevm_state_complete_precopy_non_iterable>> qemu_put_buffer(f, (uint8_t *)json_writer_get(vmdesc), vmdesc_len);
+ *   - migration/vmstate-types.c|464| <<put_buffer>> qemu_put_buffer(f, v, size);
+ *   - migration/vmstate-types.c|500| <<put_unused_buffer>> qemu_put_buffer(f, buf, block_len);
+ *   - migration/vmstate.c|550| <<vmstate_subsection_save>> qemu_put_buffer(f, (uint8_t *)vmsdsub->name, len);
+ *   - net/slirp.c|392| <<net_slirp_stream_write>> qemu_put_buffer(f, buf, size);
+ *   - target/ppc/kvm.c|2730| <<kvmppc_save_htab>> qemu_put_buffer(f, (void *)(head + 1),
+ *   - tests/unit/test-vmstate.c|81| <<save_buffer>> qemu_put_buffer(fsave, buf, buf_size);
+ *   - tests/unit/test-vmstate.c|113| <<load_vmstate_one>> qemu_put_buffer(f, wire, size);
+ *   - tests/unit/test-vmstate.c|768| <<test_load_q>> qemu_put_buffer(fsave, wire_q, sizeof(wire_q));
+ *   - tests/unit/test-vmstate.c|1124| <<test_gtree_load_domain>> qemu_put_buffer(fsave, first_domain_dump, sizeof(first_domain_dump));
+ *   - tests/unit/test-vmstate.c|1239| <<test_gtree_load_iommu>> qemu_put_buffer(fsave, iommu_dump, sizeof(iommu_dump));
+ *   - tests/unit/test-vmstate.c|1374| <<test_load_qlist>> qemu_put_buffer(fsave, qlist_dump, sizeof(qlist_dump));
+ */
 void qemu_put_buffer(QEMUFile *f, const uint8_t *buf, size_t size)
 {
     size_t l;
@@ -628,6 +681,63 @@ size_t coroutine_mixed_fn qemu_peek_buffer(QEMUFile *f, uint8_t **buf, size_t si
  * return as many as it managed to read (assuming blocking fd's which
  * all current QEMUFile are)
  */
+/*
+ * called by:
+ *   - hw/display/virtio-gpu.c|1333| <<virtio_gpu_load>> qemu_get_buffer(f, (void *)pixman_image_get_data(res->image),
+ *   - hw/intc/s390_flic_kvm.c|487| <<kvm_flic_load>> if (qemu_get_buffer(f, (uint8_t *) buf, len) != len) {
+ *   - hw/pci/msix.c|501| <<msix_load>> qemu_get_buffer(f, dev->msix_table, n * PCI_MSIX_ENTRY_SIZE);
+ *   - hw/pci/msix.c|502| <<msix_load>> qemu_get_buffer(f, dev->msix_pba, DIV_ROUND_UP(n, 8));
+ *   - hw/pci/pci.c|659| <<get_pci_config_device>> qemu_get_buffer(f, config, size);
+ *   - hw/pci/shpc.c|775| <<shpc_load>> int ret = qemu_get_buffer(f, d->shpc->config, SHPC_SIZEOF(d));
+ *   - hw/ppc/spapr.c|2452| <<htab_load>> qemu_get_buffer(f, HPTE(spapr->htab, index),
+ *   - hw/s390x/s390-skeys.c|433| <<s390_storage_keys_load>> qemu_get_buffer(f, buf, cur_count);
+ *   - hw/s390x/s390-stattrib.c|138| <<cmma_load>> qemu_get_buffer(f, buf, count);
+ *   - hw/scsi/mptsas.c|1238| <<mptsas_load_request>> qemu_get_buffer(f, (unsigned char *)&req->scsi_io, sizeof(req->scsi_io));
+ *   - hw/scsi/scsi-bus.c|1862| <<get_scsi_requests>> qemu_get_buffer(f, buf, sizeof(buf));
+ *   - hw/scsi/scsi-disk.c|194| <<scsi_disk_load_request>> qemu_get_buffer(f, r->iov.iov_base, r->iov.iov_len);
+ *   - hw/scsi/scsi-disk.c|200| <<scsi_disk_load_request>> qemu_get_buffer(f, r->iov.iov_base, r->iov.iov_len);
+ *   - hw/scsi/scsi-generic.c|62| <<scsi_generic_load_request>> qemu_get_buffer(f, r->buf, r->req.cmd.xfer);
+ *   - hw/usb/redirect.c|2288| <<usbredir_get_parser>> qemu_get_buffer(f, data, len);
+ *   - hw/usb/redirect.c|2348| <<usbredir_get_bufpq>> qemu_get_buffer(f, bufp->data, bufp->len);
+ *   - hw/virtio/vhost.c|2607| <<vhost_load_backend_state>> if (qemu_get_buffer(f, transfer_buf, this_chunk_size) <
+ *   - hw/virtio/virtio.c|2106| <<qemu_get_virtqueue_element>> qemu_get_buffer(f, (uint8_t *)&data, sizeof(VirtQueueElementOld));
+ *   - hw/virtio/virtio.c|3270| <<virtio_load>> qemu_get_buffer(f, vdev->config, MIN(config_len, vdev->config_len));
+ *   - migration/block-dirty-bitmap.c|1015| <<dirty_bitmap_load_bits>> ret = qemu_get_buffer(f, buf, buf_size);
+ *   - migration/colo.c|710| <<colo_incoming_process_checkpoint>> total_size = qemu_get_buffer(mis->from_src_file, bioc->data, value);
+ *   - migration/migration.c|2320| <<source_return_path_thread>> res = qemu_get_buffer(rp, buf, header_len);
+ *   - migration/qemu-file.c|740| <<qemu_get_buffer_in_place>> return qemu_get_buffer(f, *buf, size);
+ *   - migration/qemu-file.c|843| <<qemu_get_counted_string>> size_t res = qemu_get_buffer(f, (uint8_t *)buf, len);
+ *   - migration/ram.c|3097| <<mapped_ram_read_header>> ret = qemu_get_buffer(file, (uint8_t *)header, header_size);
+ *   - migration/ram.c|3546| <<ram_block_from_stream>> qemu_get_buffer(f, (uint8_t *)id, len);
+ *   - migration/ram.c|3920| <<ram_load_postcopy>> qemu_get_buffer(f, page_buffer, TARGET_PAGE_SIZE);
+ *   - migration/ram.c|4236| <<parse_ramblocks>> qemu_get_buffer(f, (uint8_t *)id, len);
+ *   - migration/ram.c|4375| <<ram_load_precopy>> qemu_get_buffer(f, host, TARGET_PAGE_SIZE);
+ *   - migration/ram.c|4548| <<ram_dirty_bitmap_reload>> size = qemu_get_buffer(file, (uint8_t *)le_bitmap, local_size);
+ *   - migration/savevm.c|392| <<get_capability>> qemu_get_buffer(f, (uint8_t *)capability_str, len);
+ *   - migration/savevm.c|2316| <<loadvm_handle_cmd_packaged>> ret = qemu_get_buffer(mis->from_src_file,
+ *   - migration/savevm.c|3014| <<qemu_loadvm_state>> qemu_get_buffer(f, buf, read_chunk);
+ *   - migration/vmstate-types.c|456| <<get_buffer>> qemu_get_buffer(f, v, size);
+ *   - migration/vmstate-types.c|486| <<get_unused_buffer>> qemu_get_buffer(f, buf, block_len);
+ *   - net/slirp.c|384| <<net_slirp_stream_read>> return qemu_get_buffer(f, buf, size);
+ *   - target/ppc/kvm.c|2756| <<kvmppc_load_htab_chunk>> qemu_get_buffer(f, (void *)(buf + 1), HASH_PTE_SIZE_64 * n_valid);
+ *   - tests/unit/test-vmstate.c|92| <<compare_vmstate>> g_assert_cmpint(qemu_get_buffer(f, result, size), ==, size);
+ *
+ * Target QEMU.
+ * (gdb) bt
+ * #0  0x00007ffff52bf413 in __memmove_avx_unaligned_erms_rtm () from /lib64/libc.so.6
+ * #1  0x0000555555f59607 in qemu_get_buffer (f=0x555557804800, buf=0x7ffee8000000 "\002", size=4096) at ../migration/qemu-file.c:644
+ * #2  0x0000555555e8adc4 in ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4228
+ * #3  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #4  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #5  0x0000555555c32c88 in qemu_loadvm_section_part_end (f=0x555557804800, type=2 '\002') at ../migration/savevm.c:2672
+ * #6  0x0000555555c334b8 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2880
+ * #7  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #8  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #9  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #10 0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #11 0x00007fffffffc7d0 in ?? ()
+ * #12 0x0000000000000000 in ?? ()
+ */
 size_t coroutine_mixed_fn qemu_get_buffer(QEMUFile *f, uint8_t *buf, size_t size)
 {
     size_t pending = size;
diff --git a/migration/ram.c b/migration/ram.c
index 05ff9eb32..5c7a6e862 100644
--- a/migration/ram.c
+++ b/migration/ram.c
@@ -362,6 +362,16 @@ struct RAMState {
     int uffdio_fd;
     /* total ram size in bytes */
     uint64_t ram_bytes_total;
+    /*
+     * 在以下使用RAMState->last_seen_block:
+     *   - migration/ram.c|1312| <<find_dirty_block>> if (pss->complete_round && pss->block == rs->last_seen_block &&
+     *   - migration/ram.c|2260| <<ram_find_and_save_block>> if (!rs->last_seen_block) {
+     *   - migration/ram.c|2261| <<ram_find_and_save_block>> rs->last_seen_block = QLIST_FIRST_RCU(&ram_list.blocks);
+     *   - migration/ram.c|2265| <<ram_find_and_save_block>> pss_init(pss, rs->last_seen_block, rs->last_page);
+     *   - migration/ram.c|2288| <<ram_find_and_save_block>> rs->last_seen_block = pss->block;
+     *   - migration/ram.c|2408| <<ram_state_reset>> rs->last_seen_block = NULL;
+     *   - migration/ram.c|2601| <<ram_postcopy_send_discard_bitmap>> rs->last_seen_block = NULL;
+     */
     /* Last block that we have visited searching for dirty pages */
     RAMBlock *last_seen_block;
     /* Last dirty target page we have sent */
@@ -383,6 +393,13 @@ struct RAMState {
     uint64_t xbzrle_pages_prev;
     /* Amount of xbzrle encoded bytes since the beginning of the period */
     uint64_t xbzrle_bytes_prev;
+    /*
+     * 在以下使用RAMState->xbzrle_started:
+     *   - migration/ram.c|1240| <<save_zero_page>> if (rs->xbzrle_started) {
+     *   - migration/ram.c|1340| <<ram_save_page>> if (rs->xbzrle_started && !migration_in_postcopy()) {
+     *   - migration/ram.c|1428| <<find_dirty_block>> rs->xbzrle_started = true;
+     *   - migration/ram.c|2516| <<ram_state_reset>> rs->xbzrle_started = false;
+     */
     /* Are we really using XBZRLE (e.g., after the first round). */
     bool xbzrle_started;
     /* Are we on the last stage of migration */
@@ -456,6 +473,16 @@ uint64_t ram_bytes_remaining(void)
                        0;
 }
 
+/*
+ * called by:
+ *   - migration/ram.c|706| <<save_xbzrle_page>> ram_transferred_add(bytes_xbzrle);
+ *   - migration/ram.c|1192| <<save_zero_page>> ram_transferred_add(len);
+ *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+ *   - migration/ram.c|1264| <<save_normal_page>> ram_transferred_add(TARGET_PAGE_SIZE);
+ *   - migration/ram.c|3142| <<ram_save_file_bmap>> ram_transferred_add(bitmap_size);
+ *   - migration/ram.c|3265| <<ram_save_iterate>> ram_transferred_add(8);
+ *   - migration/rdma.c|2219| <<qemu_rdma_write_one>> ram_transferred_add(sge.length);
+ */
 void ram_transferred_add(uint64_t bytes)
 {
     if (runstate_is_running()) {
@@ -506,6 +533,12 @@ static bool pss_overlap(PageSearchStatus *pss1, PageSearchStatus *pss2)
  * @offset: offset inside the block for the page
  *          in the lower bits, it contains flags
  */
+/*
+ * called by:
+ *   - migration/ram.c|695| <<save_xbzrle_page>> bytes_xbzrle = save_page_header(pss, pss->pss_channel, block,
+ *   - migration/ram.c|1188| <<save_zero_page>> len += save_page_header(pss, file, pss->block, offset | RAM_SAVE_FLAG_ZERO);
+ *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+ */
 static size_t save_page_header(PageSearchStatus *pss, QEMUFile *f,
                                RAMBlock *block, ram_addr_t offset)
 {
@@ -693,6 +726,16 @@ static int save_xbzrle_page(RAMState *rs, PageSearchStatus *pss,
      * RAM_SAVE_FLAG_CONTINUE.
      */
     xbzrle_counters.bytes += bytes_xbzrle - 8;
+    /*
+     * called by:
+     *   - migration/ram.c|706| <<save_xbzrle_page>> ram_transferred_add(bytes_xbzrle);
+     *   - migration/ram.c|1192| <<save_zero_page>> ram_transferred_add(len);
+     *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+     *   - migration/ram.c|1264| <<save_normal_page>> ram_transferred_add(TARGET_PAGE_SIZE);
+     *   - migration/ram.c|3142| <<ram_save_file_bmap>> ram_transferred_add(bitmap_size);
+     *   - migration/ram.c|3265| <<ram_save_iterate>> ram_transferred_add(8);
+     *   - migration/rdma.c|2219| <<qemu_rdma_write_one>> ram_transferred_add(sge.length);
+     */
     ram_transferred_add(bytes_xbzrle);
 
     return 1;
@@ -709,6 +752,12 @@ static int save_xbzrle_page(RAMState *rs, PageSearchStatus *pss,
  *
  * @pss: the current page search status
  */
+/*
+ * called by:
+ *   - migration/ram.c|1310| <<find_dirty_block>> pss_find_next_dirty(pss);
+ *   - migration/ram.c|2131| <<ram_save_host_page_urgent>> pss_find_next_dirty(pss);
+ *   - migration/ram.c|2216| <<ram_save_host_page>> pss_find_next_dirty(pss);
+ */
 static void pss_find_next_dirty(PageSearchStatus *pss)
 {
     RAMBlock *rb = pss->block;
@@ -730,6 +779,25 @@ static void pss_find_next_dirty(PageSearchStatus *pss)
         size = MIN(size, pss->host_page_end);
     }
 
+    /*
+     * 116 struct PageSearchStatus {
+     * 117     // The migration channel used for a specific host page
+     * 118     QEMUFile    *pss_channel;
+     * 119     // Last block from where we have sent data
+     * 120     RAMBlock *last_sent_block;
+     * 121     // Current block being searched
+     * 122     RAMBlock    *block;
+     * 123     // Current page to search from
+     * 124     unsigned long page;
+     * 125     // Set once we wrap around
+     * 126     bool         complete_round;
+     * 127     // Whether we're sending a host page
+     * 128     bool          host_page_sending;
+     * 129     // The start/end of current host page.  Invalid if host_page_sending==false
+     * 130     unsigned long host_page_start;
+     * 131     unsigned long host_page_end;
+     * 132 };
+     */
     pss->page = find_next_bit(bitmap, size, pss->page);
 }
 
@@ -1109,6 +1177,11 @@ void migration_bitmap_sync_precopy(bool last_stage)
     }
 }
 
+/*
+ * called by:
+ *   - migration/multifd-zero-page.c|73| <<multifd_send_zero_page_detect>> ram_release_page(rb->idstr, offset);
+ *   - migration/ram.c|1191| <<save_zero_page>> ram_release_page(pss->block->idstr, offset);
+ */
 void ram_release_page(const char *rbname, uint64_t offset)
 {
     if (!migrate_release_ram() || !migration_in_postcopy()) {
@@ -1127,9 +1200,20 @@ void ram_release_page(const char *rbname, uint64_t offset)
  * @pss: current PSS channel
  * @offset: offset inside the block for the page
  */
+/*
+ * called by:
+ *   - migration/ram.c|2040| <<ram_save_target_page_legacy>> if (save_zero_page(rs, pss, offset)) {
+ *   - migration/ram.c|2065| <<ram_save_target_page_multifd>> if (save_zero_page(rs, pss, offset)) {
+ */
 static int save_zero_page(RAMState *rs, PageSearchStatus *pss,
                           ram_addr_t offset)
 {
+    /*
+     * PageSearchStatus *pss:
+     * -> RAMBlock *block;
+     *    -> struct MemoryRegion *mr;
+     *    -> uint8_t *host;
+     */
     uint8_t *p = pss->block->host + offset;
     QEMUFile *file = pss->pss_channel;
     int len = 0;
@@ -1154,6 +1238,16 @@ static int save_zero_page(RAMState *rs, PageSearchStatus *pss,
     qemu_put_byte(file, 0);
     len += 1;
     ram_release_page(pss->block->idstr, offset);
+    /*
+     * called by:
+     *   - migration/ram.c|706| <<save_xbzrle_page>> ram_transferred_add(bytes_xbzrle);
+     *   - migration/ram.c|1192| <<save_zero_page>> ram_transferred_add(len);
+     *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+     *   - migration/ram.c|1264| <<save_normal_page>> ram_transferred_add(TARGET_PAGE_SIZE);
+     *   - migration/ram.c|3142| <<ram_save_file_bmap>> ram_transferred_add(bitmap_size);
+     *   - migration/ram.c|3265| <<ram_save_iterate>> ram_transferred_add(8);
+     *   - migration/rdma.c|2219| <<qemu_rdma_write_one>> ram_transferred_add(sge.length);
+     */
     ram_transferred_add(len);
 
     /*
@@ -1206,6 +1300,10 @@ static bool control_save_page(PageSearchStatus *pss,
  * @buf: the page to be sent
  * @async: send to page asyncly
  */
+/*
+ * called by:
+ *   - migration/ram.c|1360| <<ram_save_page>> pages = save_normal_page(pss, block, offset, p, send_async);
+ */
 static int save_normal_page(PageSearchStatus *pss, RAMBlock *block,
                             ram_addr_t offset, uint8_t *buf, bool async)
 {
@@ -1216,6 +1314,26 @@ static int save_normal_page(PageSearchStatus *pss, RAMBlock *block,
                            block->pages_offset + offset);
         set_bit(offset >> TARGET_PAGE_BITS, block->file_bmap);
     } else {
+        /*
+	 * called by:                        
+	 *   - migration/ram.c|706| <<save_xbzrle_page>> ram_transferred_add(bytes_xbzrle);
+	 *   - migration/ram.c|1192| <<save_zero_page>> ram_transferred_add(len);
+	 *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+	 *   - migration/ram.c|1264| <<save_normal_page>> ram_transferred_add(TARGET_PAGE_SIZE);
+	 *   - migration/ram.c|3142| <<ram_save_file_bmap>> ram_transferred_add(bitmap_size);
+	 *   - migration/ram.c|3265| <<ram_save_iterate>> ram_transferred_add(8);
+	 *   - migration/rdma.c|2219| <<qemu_rdma_write_one>> ram_transferred_add(sge.length);
+	 *
+	 * 在以下使用RAM_SAVE_FLAG_PAGE:
+	 *   - migration/ram.c|87| <<global>> #define RAM_SAVE_FLAG_PAGE 0x08
+	 *   - migration/ram.c|1308| <<save_normal_page>> ram_transferred_add(save_page_header(pss,
+	 *                      pss->pss_channel, block, offset | RAM_SAVE_FLAG_PAGE));
+	 *   - migration/ram.c|3839| <<ram_load_postcopy>> if (flags & (RAM_SAVE_FLAG_ZERO | RAM_SAVE_FLAG_PAGE)) {
+	 *   - migration/ram.c|3916| <<ram_load_postcopy>> case RAM_SAVE_FLAG_PAGE:
+	 *   - migration/ram.c|4292| <<ram_load_precopy>> RAM_SAVE_FLAG_PAGE | RAM_SAVE_FLAG_XBZRLE |
+	 *   - migration/ram.c|4329| <<ram_load_precopy>> if (flags & (RAM_SAVE_FLAG_ZERO | RAM_SAVE_FLAG_PAGE |
+	 *   - migration/ram.c|4395| <<ram_load_precopy>> case RAM_SAVE_FLAG_PAGE:
+	 */
         ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
                                              offset | RAM_SAVE_FLAG_PAGE));
         if (async) {
@@ -1226,6 +1344,16 @@ static int save_normal_page(PageSearchStatus *pss, RAMBlock *block,
             qemu_put_buffer(file, buf, TARGET_PAGE_SIZE);
         }
     }
+    /*
+     * called by:
+     *   - migration/ram.c|706| <<save_xbzrle_page>> ram_transferred_add(bytes_xbzrle);
+     *   - migration/ram.c|1192| <<save_zero_page>> ram_transferred_add(len);
+     *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+     *   - migration/ram.c|1264| <<save_normal_page>> ram_transferred_add(TARGET_PAGE_SIZE);
+     *   - migration/ram.c|3142| <<ram_save_file_bmap>> ram_transferred_add(bitmap_size);
+     *   - migration/ram.c|3265| <<ram_save_iterate>> ram_transferred_add(8);
+     *   - migration/rdma.c|2219| <<qemu_rdma_write_one>> ram_transferred_add(sge.length);
+     */
     ram_transferred_add(TARGET_PAGE_SIZE);
     stat64_add(&mig_stats.normal_pages, 1);
     return 1;
@@ -1243,6 +1371,10 @@ static int save_normal_page(PageSearchStatus *pss, RAMBlock *block,
  * @block: block that contains the page we want to send
  * @offset: offset inside the block for the page
  */
+/*
+ * called by:
+ *   - migration/ram.c|2098| <<ram_save_target_page_legacy>> return ram_save_page(rs, pss);
+ */
 static int ram_save_page(RAMState *rs, PageSearchStatus *pss)
 {
     int pages = -1;
@@ -1256,6 +1388,13 @@ static int ram_save_page(RAMState *rs, PageSearchStatus *pss)
     trace_ram_save_page(block->idstr, (uint64_t)offset, p);
 
     XBZRLE_cache_lock();
+    /*
+     * 在以下使用RAMState->xbzrle_started:
+     *   - migration/ram.c|1240| <<save_zero_page>> if (rs->xbzrle_started) {
+     *   - migration/ram.c|1340| <<ram_save_page>> if (rs->xbzrle_started && !migration_in_postcopy()) {
+     *   - migration/ram.c|1428| <<find_dirty_block>> rs->xbzrle_started = true;
+     *   - migration/ram.c|2516| <<ram_state_reset>> rs->xbzrle_started = false;
+     */
     if (rs->xbzrle_started && !migration_in_postcopy()) {
         pages = save_xbzrle_page(rs, pss, &p, current_addr,
                                  block, offset);
@@ -1269,6 +1408,9 @@ static int ram_save_page(RAMState *rs, PageSearchStatus *pss)
 
     /* XBZRLE overflow or normal page */
     if (pages == -1) {
+        /*
+	 * 只在此处调用
+	 */
         pages = save_normal_page(pss, block, offset, p, send_async);
     }
 
@@ -1993,19 +2135,43 @@ int ram_save_queue_pages(const char *rbname, ram_addr_t start, ram_addr_t len,
  * @rs: current RAM state
  * @pss: data about the page we want to send
  */
+/*
+ * 3156     migration_ops = g_malloc0(sizeof(MigrationOps));
+ * 3157 
+ * 3158     if (migrate_multifd()) {
+ * 3159         multifd_ram_save_setup();
+ * 3160         migration_ops->ram_save_target_page = ram_save_target_page_multifd;
+ * 3161     } else {
+ * 3162         migration_ops->ram_save_target_page = ram_save_target_page_legacy;
+ * 3163     }
+ *
+ * 在以下使用ram_save_target_page_legacy():
+ *   - migration/ram.c|3108| <<ram_save_setup>> migration_ops->ram_save_target_page = ram_save_target_page_legacy;
+ */
 static int ram_save_target_page_legacy(RAMState *rs, PageSearchStatus *pss)
 {
     ram_addr_t offset = ((ram_addr_t)pss->page) << TARGET_PAGE_BITS;
     int res;
 
+    /*
+     * 不支持rdma不用
+     */
     if (control_save_page(pss, offset, &res)) {
         return res;
     }
 
+    /*
+     * called by:
+     *   - migration/ram.c|2040| <<ram_save_target_page_legacy>> if (save_zero_page(rs, pss, offset)) {
+     *   - migration/ram.c|2065| <<ram_save_target_page_multifd>> if (save_zero_page(rs, pss, offset)) {
+     */
     if (save_zero_page(rs, pss, offset)) {
         return 1;
     }
 
+    /*
+     * 只在此处调用
+     */
     return ram_save_page(rs, pss);
 }
 
@@ -2235,6 +2401,11 @@ static int ram_save_host_page(RAMState *rs, PageSearchStatus *pss)
  * On systems where host-page-size > target-page-size it will send all the
  * pages in a host page that are dirty.
  */
+/*
+ * called by:
+ *   - migration/ram.c|3168| <<ram_save_iterate>> pages = ram_find_and_save_block(rs);
+ *   - migration/ram.c|3267| <<ram_save_complete>> pages = ram_find_and_save_block(rs);
+ */
 static int ram_find_and_save_block(RAMState *rs)
 {
     PageSearchStatus *pss = &rs->pss[RAM_CHANNEL_PRECOPY];
@@ -2769,6 +2940,10 @@ static void migration_bitmap_clear_discarded_pages(RAMState *rs)
     }
 }
 
+/*
+ * called by:
+ *   - migration/ram.c|2816| <<ram_init_all>> if (!ram_init_bitmaps(*rsp, errp)) {
+ */
 static bool ram_init_bitmaps(RAMState *rs, Error **errp)
 {
     bool ret = true;
@@ -3095,6 +3270,16 @@ static void ram_save_file_bmap(QEMUFile *f)
 
         qemu_put_buffer_at(f, (uint8_t *)block->file_bmap, bitmap_size,
                            block->bitmap_offset);
+	/*
+	 * called by:
+	 *   - migration/ram.c|706| <<save_xbzrle_page>> ram_transferred_add(bytes_xbzrle);
+	 *   - migration/ram.c|1192| <<save_zero_page>> ram_transferred_add(len);
+	 *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+	 *   - migration/ram.c|1264| <<save_normal_page>> ram_transferred_add(TARGET_PAGE_SIZE);
+	 *   - migration/ram.c|3142| <<ram_save_file_bmap>> ram_transferred_add(bitmap_size);
+	 *   - migration/ram.c|3265| <<ram_save_iterate>> ram_transferred_add(8);
+	 *   - migration/rdma.c|2219| <<qemu_rdma_write_one>> ram_transferred_add(sge.length);
+	 */
         ram_transferred_add(bitmap_size);
 
         /*
@@ -3218,6 +3403,16 @@ out:
         }
 
         qemu_put_be64(f, RAM_SAVE_FLAG_EOS);
+	/*
+	 * called by:
+	 *   - migration/ram.c|706| <<save_xbzrle_page>> ram_transferred_add(bytes_xbzrle);
+	 *   - migration/ram.c|1192| <<save_zero_page>> ram_transferred_add(len);
+	 *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+	 *   - migration/ram.c|1264| <<save_normal_page>> ram_transferred_add(TARGET_PAGE_SIZE);
+	 *   - migration/ram.c|3142| <<ram_save_file_bmap>> ram_transferred_add(bitmap_size);
+	 *   - migration/ram.c|3265| <<ram_save_iterate>> ram_transferred_add(8);
+	 *   - migration/rdma.c|2219| <<qemu_rdma_write_one>> ram_transferred_add(sge.length);
+	 */
         ram_transferred_add(8);
         ret = qemu_fflush(f);
     }
@@ -3779,6 +3974,17 @@ int ram_load_postcopy(QEMUFile *f, int channel)
             break;
 
         case RAM_SAVE_FLAG_PAGE:
+            /*
+	     * 在以下使用RAM_SAVE_FLAG_PAGE:
+	     *   - migration/ram.c|87| <<global>> #define RAM_SAVE_FLAG_PAGE 0x08
+	     *   - migration/ram.c|1308| <<save_normal_page>> ram_transferred_add(save_page_header(pss,
+	     *                      pss->pss_channel, block, offset | RAM_SAVE_FLAG_PAGE));
+	     *   - migration/ram.c|3839| <<ram_load_postcopy>> if (flags & (RAM_SAVE_FLAG_ZERO | RAM_SAVE_FLAG_PAGE)) {
+	     *   - migration/ram.c|3916| <<ram_load_postcopy>> case RAM_SAVE_FLAG_PAGE:
+	     *   - migration/ram.c|4292| <<ram_load_precopy>> RAM_SAVE_FLAG_PAGE | RAM_SAVE_FLAG_XBZRLE |
+	     *   - migration/ram.c|4329| <<ram_load_precopy>> if (flags & (RAM_SAVE_FLAG_ZERO | RAM_SAVE_FLAG_PAGE |
+	     *   - migration/ram.c|4395| <<ram_load_precopy>> case RAM_SAVE_FLAG_PAGE:
+	     */
             tmp_page->all_zero = false;
             if (!matches_target_page_size) {
                 /* For huge pages, we always use temporary buffer */
@@ -3906,6 +4112,10 @@ static size_t ram_load_multifd_pages(void *host_addr, size_t size,
     return size;
 }
 
+/*
+ * called by:
+ *   - migration/ram.c|4010| <<parse_ramblock_mapped_ram>> if (!read_ramblock_mapped_ram(f, block, num_pages, bitmap, errp)) {
+ */
 static bool read_ramblock_mapped_ram(QEMUFile *f, RAMBlock *block,
                                      long num_pages, unsigned long *bitmap,
                                      Error **errp)
@@ -3961,6 +4171,10 @@ err:
     return false;
 }
 
+/*
+ * called by:
+ *   - migration/ram.c|4031| <<parse_ramblock>> parse_ramblock_mapped_ram(f, block, length, &local_err);
+ */
 static void parse_ramblock_mapped_ram(QEMUFile *f, RAMBlock *block,
                                       ram_addr_t length, Error **errp)
 {
@@ -4008,6 +4222,10 @@ static void parse_ramblock_mapped_ram(QEMUFile *f, RAMBlock *block,
     return;
 }
 
+/*
+ * called by:
+ *   - migration/ram.c|4104| <<parse_ramblocks>> ret = parse_ramblock(f, block, length);
+ */
 static int parse_ramblock(QEMUFile *f, RAMBlock *block, ram_addr_t length)
 {
     int ret = 0;
@@ -4075,6 +4293,10 @@ static int parse_ramblock(QEMUFile *f, RAMBlock *block, ram_addr_t length)
     return ret;
 }
 
+/*
+ * called by:
+ *   - migration/ram.c|4351| <<ram_load_precopy>> ret = parse_ramblocks(f, addr);
+ */
 static int parse_ramblocks(QEMUFile *f, ram_addr_t total_ram_bytes)
 {
     int ret = 0;
@@ -4114,6 +4336,39 @@ static int parse_ramblocks(QEMUFile *f, ram_addr_t total_ram_bytes)
  *
  * @f: QEMUFile where to send the data
  */
+/*
+ * (gdb) bt
+ * #0  ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4119
+ * #1  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #2  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #3  0x0000555555c32a8e in qemu_loadvm_section_start_full (f=0x555557804800, type=1 '\001') at ../migration/savevm.c:2619
+ * #4  0x0000555555c33498 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2873
+ * #5  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #6  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #7  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #8  0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #9  0x00007fffffffc7d0 in ?? ()
+ * #10 0x0000000000000000 in ?? ()
+ *
+ * Target QEMU.
+ * (gdb) bt
+ * #0  0x00007ffff52bf413 in __memmove_avx_unaligned_erms_rtm () from /lib64/libc.so.6
+ * #1  0x0000555555f59607 in qemu_get_buffer (f=0x555557804800, buf=0x7ffee8000000 "\002", size=4096) at ../migration/qemu-file.c:644
+ * #2  0x0000555555e8adc4 in ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4228
+ * #3  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #4  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #5  0x0000555555c32c88 in qemu_loadvm_section_part_end (f=0x555557804800, type=2 '\002') at ../migration/savevm.c:2672
+ * #6  0x0000555555c334b8 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2880
+ * #7  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #8  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #9  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #10 0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #11 0x00007fffffffc7d0 in ?? ()
+ * #12 0x0000000000000000 in ?? ()
+ *
+ * called by:
+ *   - migration/ram.c|4454| <<ram_load>> ret = ram_load_precopy(f);
+ */
 static int ram_load_precopy(QEMUFile *f)
 {
     MigrationIncomingState *mis = migration_incoming_get_current();
@@ -4158,6 +4413,17 @@ static int ram_load_precopy(QEMUFile *f)
             break;
         }
 
+	/*
+	 * 在以下使用RAM_SAVE_FLAG_PAGE:
+	 *   - migration/ram.c|87| <<global>> #define RAM_SAVE_FLAG_PAGE 0x08
+	 *   - migration/ram.c|1308| <<save_normal_page>> ram_transferred_add(save_page_header(pss,
+	 *                      pss->pss_channel, block, offset | RAM_SAVE_FLAG_PAGE));
+	 *   - migration/ram.c|3839| <<ram_load_postcopy>> if (flags & (RAM_SAVE_FLAG_ZERO | RAM_SAVE_FLAG_PAGE)) {
+	 *   - migration/ram.c|3916| <<ram_load_postcopy>> case RAM_SAVE_FLAG_PAGE:
+	 *   - migration/ram.c|4292| <<ram_load_precopy>> RAM_SAVE_FLAG_PAGE | RAM_SAVE_FLAG_XBZRLE |
+	 *   - migration/ram.c|4329| <<ram_load_precopy>> if (flags & (RAM_SAVE_FLAG_ZERO | RAM_SAVE_FLAG_PAGE |
+	 *   - migration/ram.c|4395| <<ram_load_precopy>> case RAM_SAVE_FLAG_PAGE:
+	 */
         if (flags & (RAM_SAVE_FLAG_ZERO | RAM_SAVE_FLAG_PAGE |
                      RAM_SAVE_FLAG_XBZRLE)) {
             RAMBlock *block = ram_block_from_stream(mis, f, flags,
@@ -4272,6 +4538,38 @@ static int ram_load_precopy(QEMUFile *f)
     return ret;
 }
 
+/*
+ * Target QEMU.
+ * (gdb) bt
+ * #0  0x00007ffff52bf413 in __memmove_avx_unaligned_erms_rtm () from /lib64/libc.so.6
+ * #1  0x0000555555f59607 in qemu_get_buffer (f=0x555557804800, buf=0x7ffee8000000 "\002", size=4096) at ../migration/qemu-file.c:644
+ * #2  0x0000555555e8adc4 in ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4228
+ * #3  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #4  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #5  0x0000555555c32c88 in qemu_loadvm_section_part_end (f=0x555557804800, type=2 '\002') at ../migration/savevm.c:2672
+ * #6  0x0000555555c334b8 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2880
+ * #7  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #8  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #9  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #10 0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #11 0x00007fffffffc7d0 in ?? ()
+ * #12 0x0000000000000000 in ?? ()
+ *
+ * 4704 static SaveVMHandlers savevm_ram_handlers = {
+ * 4705     .save_setup = ram_save_setup,
+ * 4706     .save_live_iterate = ram_save_iterate,
+ * 4707     .save_live_complete_postcopy = ram_save_complete,
+ * 4708     .save_live_complete_precopy = ram_save_complete,
+ * 4709     .has_postcopy = ram_has_postcopy,
+ * 4710     .state_pending_exact = ram_state_pending_exact,
+ * 4711     .state_pending_estimate = ram_state_pending_estimate,
+ * 4712     .load_state = ram_load,
+ * 4713     .save_cleanup = ram_save_cleanup,
+ * 4714     .load_setup = ram_load_setup,
+ * 4715     .load_cleanup = ram_load_cleanup,
+ * 4716     .resume_prepare = ram_resume_prepare,
+ * 4717 };
+ */
 static int ram_load(QEMUFile *f, void *opaque, int version_id)
 {
     int ret = 0;
diff --git a/migration/rdma.c b/migration/rdma.c
index 855753c67..281bc6f0b 100644
--- a/migration/rdma.c
+++ b/migration/rdma.c
@@ -1734,6 +1734,11 @@ static int qemu_rdma_post_send_control(RDMAContext *rdma, uint8_t *buf,
     }
 
 
+    /*
+     * 在以下调用ibv_post_send():
+     *   - migration/rdma.c|1737| <<qemu_rdma_post_send_control>> ret = ibv_post_send(rdma->qp, &send_wr, &bad_wr);
+     *   - migration/rdma.c|2188| <<qemu_rdma_write_one>> ret = ibv_post_send(rdma->qp, &send_wr, &bad_wr);
+     */
     ret = ibv_post_send(rdma->qp, &send_wr, &bad_wr);
 
     if (ret > 0) {
@@ -1991,6 +1996,11 @@ static int qemu_rdma_exchange_recv(RDMAContext *rdma, RDMAControlHeader *head,
  * If we're using dynamic registration on the dest-side, we have to
  * send a registration command first.
  */
+/*
+ * called by:
+ *   - migration/rdma.c|2239| <<qemu_rdma_write_flush>> ret = qemu_rdma_write_one(rdma,
+ *                  rdma->current_index, rdma->current_addr, rdma->current_length, errp);
+ */
 static int qemu_rdma_write_one(RDMAContext *rdma,
                                int current_index, uint64_t current_addr,
                                uint64_t length, Error **errp)
@@ -2185,6 +2195,11 @@ retry:
      * ibv_post_send() does not return negative error numbers,
      * per the specification they are positive - no idea why.
      */
+    /*
+     * 在以下调用ibv_post_send():
+     *   - migration/rdma.c|1737| <<qemu_rdma_post_send_control>> ret = ibv_post_send(rdma->qp, &send_wr, &bad_wr);
+     *   - migration/rdma.c|2188| <<qemu_rdma_write_one>> ret = ibv_post_send(rdma->qp, &send_wr, &bad_wr);
+     */
     ret = ibv_post_send(rdma->qp, &send_wr, &bad_wr);
 
     if (ret == ENOMEM) {
@@ -2216,6 +2231,16 @@ retry:
      * but this being RDMA, who knows.
      */
     stat64_add(&mig_stats.rdma_bytes, sge.length);
+    /*
+     * called by:
+     *   - migration/ram.c|706| <<save_xbzrle_page>> ram_transferred_add(bytes_xbzrle);
+     *   - migration/ram.c|1192| <<save_zero_page>> ram_transferred_add(len);
+     *   - migration/ram.c|1254| <<save_normal_page>> ram_transferred_add(save_page_header(pss, pss->pss_channel, block,
+     *   - migration/ram.c|1264| <<save_normal_page>> ram_transferred_add(TARGET_PAGE_SIZE);
+     *   - migration/ram.c|3142| <<ram_save_file_bmap>> ram_transferred_add(bitmap_size);
+     *   - migration/ram.c|3265| <<ram_save_iterate>> ram_transferred_add(8);
+     *   - migration/rdma.c|2219| <<qemu_rdma_write_one>> ram_transferred_add(sge.length);
+     */
     ram_transferred_add(sge.length);
     rdma->total_writes++;
 
diff --git a/migration/savevm.c b/migration/savevm.c
index 98821c812..244ce8f69 100644
--- a/migration/savevm.c
+++ b/migration/savevm.c
@@ -930,6 +930,23 @@ void vmstate_unregister(VMStateIf *obj, const VMStateDescription *vmsd,
     }
 }
 
+/*
+ * Target QEMU.
+ * (gdb) bt
+ * #0  0x00007ffff52bf413 in __memmove_avx_unaligned_erms_rtm () from /lib64/libc.so.6
+ * #1  0x0000555555f59607 in qemu_get_buffer (f=0x555557804800, buf=0x7ffee8000000 "\002", size=4096) at ../migration/qemu-file.c:644
+ * #2  0x0000555555e8adc4 in ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4228
+ * #3  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #4  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #5  0x0000555555c32c88 in qemu_loadvm_section_part_end (f=0x555557804800, type=2 '\002') at ../migration/savevm.c:2672
+ * #6  0x0000555555c334b8 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2880
+ * #7  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #8  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #9  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #10 0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #11 0x00007fffffffc7d0 in ?? ()
+ * #12 0x0000000000000000 in ?? ()
+ */
 static int vmstate_load(QEMUFile *f, SaveStateEntry *se)
 {
     trace_vmstate_load(se->idstr, se->vmsd ? se->vmsd->name : "(old)");
@@ -1513,6 +1530,11 @@ int qemu_savevm_state_complete_precopy_iterable(QEMUFile *f, bool in_postcopy)
     return 0;
 }
 
+/*
+ * called by:
+ *   - migration/migration.c|3667| <<bg_migration_thread>> if (qemu_savevm_state_complete_precopy_non_iterable(fb, false, false)) {
+ *   - migration/savevm.c|1629| <<qemu_savevm_state_complete_precopy>> ret = qemu_savevm_state_complete_precopy_non_iterable(f, in_postcopy,
+ */
 int qemu_savevm_state_complete_precopy_non_iterable(QEMUFile *f,
                                                     bool in_postcopy,
                                                     bool inactivate_disks)
@@ -1583,6 +1605,14 @@ int qemu_savevm_state_complete_precopy_non_iterable(QEMUFile *f,
     return 0;
 }
 
+/*
+ * called by:
+ *   - migration/migration.c|2567| <<postcopy_start>> qemu_savevm_state_complete_precopy(ms->to_dst_file, true, false);
+ *   - migration/migration.c|2612| <<postcopy_start>> qemu_savevm_state_complete_precopy(fb, false, false);
+ *   - migration/migration.c|2762| <<migration_completion_precopy>> ret = qemu_savevm_state_complete_precopy(s->to_dst_file, false,
+ *   - migration/savevm.c|1733| <<qemu_savevm_state>> qemu_savevm_state_complete_precopy(f, false, false);
+ *   - migration/savevm.c|1759| <<qemu_savevm_live_state>> qemu_savevm_state_complete_precopy(f, true, false);
+ */
 int qemu_savevm_state_complete_precopy(QEMUFile *f, bool iterable_only,
                                        bool inactivate_disks)
 {
@@ -2558,6 +2588,10 @@ static bool check_section_footer(QEMUFile *f, SaveStateEntry *se)
     return true;
 }
 
+/*
+ * called by:
+ *   - migration/savevm.c|2873| <<qemu_loadvm_state_main>> ret = qemu_loadvm_section_start_full(f, section_type);
+ */
 static int
 qemu_loadvm_section_start_full(QEMUFile *f, uint8_t type)
 {
@@ -2636,6 +2670,23 @@ qemu_loadvm_section_start_full(QEMUFile *f, uint8_t type)
     return 0;
 }
 
+/*
+ * Target QEMU.
+ * (gdb) bt
+ * #0  0x00007ffff52bf413 in __memmove_avx_unaligned_erms_rtm () from /lib64/libc.so.6
+ * #1  0x0000555555f59607 in qemu_get_buffer (f=0x555557804800, buf=0x7ffee8000000 "\002", size=4096) at ../migration/qemu-file.c:644
+ * #2  0x0000555555e8adc4 in ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4228
+ * #3  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #4  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #5  0x0000555555c32c88 in qemu_loadvm_section_part_end (f=0x555557804800, type=2 '\002') at ../migration/savevm.c:2672
+ * #6  0x0000555555c334b8 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2880
+ * #7  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #8  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #9  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #10 0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #11 0x00007fffffffc7d0 in ?? ()
+ * #12 0x0000000000000000 in ?? ()
+ */
 static int
 qemu_loadvm_section_part_end(QEMUFile *f, uint8_t type)
 {
@@ -2852,6 +2903,30 @@ static bool postcopy_pause_incoming(MigrationIncomingState *mis)
     return true;
 }
 
+/*
+ * Target QEMU.
+ * (gdb) bt
+ * #0  0x00007ffff52bf413 in __memmove_avx_unaligned_erms_rtm () from /lib64/libc.so.6
+ * #1  0x0000555555f59607 in qemu_get_buffer (f=0x555557804800, buf=0x7ffee8000000 "\002", size=4096) at ../migration/qemu-file.c:644
+ * #2  0x0000555555e8adc4 in ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4228
+ * #3  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #4  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #5  0x0000555555c32c88 in qemu_loadvm_section_part_end (f=0x555557804800, type=2 '\002') at ../migration/savevm.c:2672
+ * #6  0x0000555555c334b8 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2880
+ * #7  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #8  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #9  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #10 0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #11 0x00007fffffffc7d0 in ?? ()
+ * #12 0x0000000000000000 in ?? ()
+ *
+ * called by:
+ *   - migration/colo.c|686| <<colo_incoming_process_checkpoint>> ret = qemu_loadvm_state_main(mis->from_src_file, mis);
+ *   - migration/savevm.c|1999| <<postcopy_ram_listen_thread>> load_res = qemu_loadvm_state_main(f, mis);
+ *   - migration/savevm.c|2351| <<loadvm_handle_cmd_packaged>> ret = qemu_loadvm_state_main(packf, mis);
+ *   - migration/savevm.c|2957| <<qemu_loadvm_state>> ret = qemu_loadvm_state_main(f, mis);
+ *   - migration/savevm.c|3020| <<qemu_load_device_state>> ret = qemu_loadvm_state_main(f, mis);
+ */
 int qemu_loadvm_state_main(QEMUFile *f, MigrationIncomingState *mis)
 {
     uint8_t section_type;
@@ -2927,6 +3002,23 @@ out:
     return ret;
 }
 
+/*
+ * Target QEMU.
+ * (gdb) bt
+ * #0  0x00007ffff52bf413 in __memmove_avx_unaligned_erms_rtm () from /lib64/libc.so.6
+ * #1  0x0000555555f59607 in qemu_get_buffer (f=0x555557804800, buf=0x7ffee8000000 "\002", size=4096) at ../migration/qemu-file.c:644
+ * #2  0x0000555555e8adc4 in ram_load_precopy (f=0x555557804800) at ../migration/ram.c:4228
+ * #3  0x0000555555e8af76 in ram_load (f=0x555557804800, opaque=0x555557334c60 <ram_state>, version_id=4) at ../migration/ram.c:4307
+ * #4  0x0000555555c2ee96 in vmstate_load (f=0x555557804800, se=0x555557711b10) at ../migration/savevm.c:937
+ * #5  0x0000555555c32c88 in qemu_loadvm_section_part_end (f=0x555557804800, type=2 '\002') at ../migration/savevm.c:2672
+ * #6  0x0000555555c334b8 in qemu_loadvm_state_main (f=0x555557804800, mis=0x5555574093d0) at ../migration/savevm.c:2880
+ * #7  0x0000555555c33652 in qemu_loadvm_state (f=0x555557804800) at ../migration/savevm.c:2957
+ * #8  0x0000555555c13760 in process_incoming_migration_co (opaque=0x0) at ../migration/migration.c:803
+ * #9  0x0000555556192d6f in coroutine_trampoline (i0=1466557760, i1=21845) at ../util/coroutine-ucontext.c:175
+ * #10 0x00007ffff5233120 in ?? () from /lib64/libc.so.6
+ * #11 0x00007fffffffc7d0 in ?? ()
+ * #12 0x0000000000000000 in ?? ()
+ */
 int qemu_loadvm_state(QEMUFile *f)
 {
     MigrationIncomingState *mis = migration_incoming_get_current();
@@ -2954,6 +3046,14 @@ int qemu_loadvm_state(QEMUFile *f)
 
     cpu_synchronize_all_pre_loadvm();
 
+    /*
+     * called by:
+     *   - migration/colo.c|686| <<colo_incoming_process_checkpoint>> ret = qemu_loadvm_state_main(mis->from_src_file, mis);
+     *   - migration/savevm.c|1999| <<postcopy_ram_listen_thread>> load_res = qemu_loadvm_state_main(f, mis);
+     *   - migration/savevm.c|2351| <<loadvm_handle_cmd_packaged>> ret = qemu_loadvm_state_main(packf, mis);
+     *   - migration/savevm.c|2957| <<qemu_loadvm_state>> ret = qemu_loadvm_state_main(f, mis);
+     *   - migration/savevm.c|3020| <<qemu_load_device_state>> ret = qemu_loadvm_state_main(f, mis);
+     */
     ret = qemu_loadvm_state_main(f, mis);
     qemu_event_set(&mis->main_thread_load_event);
 
diff --git a/net/dump.c b/net/dump.c
index 956e34a12..b8c6253d9 100644
--- a/net/dump.c
+++ b/net/dump.c
@@ -61,6 +61,10 @@ struct pcap_sf_pkthdr {
     uint32_t len;
 };
 
+/*
+ * called by:
+ *   - net/dump.c|162| <<filter_dump_receive_iov>> dump_receive_iov(&nfds->ds, iov, iovcnt, qemu_get_vnet_hdr_len(nf->netdev));
+ */
 static ssize_t dump_receive_iov(DumpState *s, const struct iovec *iov, int cnt,
                                 int offset)
 {
@@ -149,6 +153,10 @@ struct NetFilterDumpState {
     uint32_t maxlen;
 };
 
+/*
+ * 在以下使用filter_dump_receive_iov():
+ *   - net/dump.c|247| <<filter_dump_class_init>> nfc->receive_iov = filter_dump_receive_iov;
+ */
 static ssize_t filter_dump_receive_iov(NetFilterState *nf, NetClientState *sndr,
                                        unsigned flags, const struct iovec *iov,
                                        int iovcnt, NetPacketSent *sent_cb)
@@ -244,6 +252,16 @@ static void filter_dump_class_init(ObjectClass *oc, void *data)
 
     nfc->setup = filter_dump_setup;
     nfc->cleanup = filter_dump_cleanup;
+    /*
+     * 在以下使用NetFilterClass->receive_iov:
+     *   - net/dump.c|251| <<filter_dump_class_init>> nfc->receive_iov = filter_dump_receive_iov;
+     *   - net/filter-buffer.c|185| <<filter_buffer_class_init>> nfc->receive_iov = filter_buffer_receive_iov;
+     *   - net/filter-mirror.c|425| <<filter_mirror_class_init>> nfc->receive_iov = filter_mirror_receive_iov;
+     *   - net/filter-mirror.c|442| <<filter_redirector_class_init>> nfc->receive_iov = filter_redirector_receive_iov;
+     *   - net/filter-replay.c|72| <<filter_replay_class_init>> nfc->receive_iov = filter_replay_receive_iov;
+     *   - net/filter-rewriter.c|424| <<colo_rewriter_class_init>> nfc->receive_iov = colo_rewriter_receive_iov;
+     *   - net/filter.c|41| <<qemu_netfilter_receive>> return NETFILTER_GET_CLASS(OBJECT(nf))->receive_iov(
+     */
     nfc->receive_iov = filter_dump_receive_iov;
 }
 
diff --git a/net/filter.c b/net/filter.c
index 333590877..33995aafe 100644
--- a/net/filter.c
+++ b/net/filter.c
@@ -25,6 +25,12 @@ static inline bool qemu_can_skip_netfilter(NetFilterState *nf)
     return !nf->on;
 }
 
+/*
+ * called by:
+ *   - net/filter.c|99| <<qemu_netfilter_pass_to_next>> ret = qemu_netfilter_receive(next, direction, sender, flags, iov,
+ *   - net/net.c|631| <<filter_receive_iov>> ret = qemu_netfilter_receive(nf, direction, sender, flags, iov,
+ *   - net/net.c|639| <<filter_receive_iov>> ret = qemu_netfilter_receive(nf, direction, sender, flags, iov,
+ */
 ssize_t qemu_netfilter_receive(NetFilterState *nf,
                                NetFilterDirection direction,
                                NetClientState *sender,
@@ -38,6 +44,16 @@ ssize_t qemu_netfilter_receive(NetFilterState *nf,
     }
     if (nf->direction == direction ||
         nf->direction == NET_FILTER_DIRECTION_ALL) {
+        /*
+	 * 在以下使用NetFilterClass->receive_iov:
+	 *   - net/dump.c|251| <<filter_dump_class_init>> nfc->receive_iov = filter_dump_receive_iov;
+	 *   - net/filter-buffer.c|185| <<filter_buffer_class_init>> nfc->receive_iov = filter_buffer_receive_iov;
+	 *   - net/filter-mirror.c|425| <<filter_mirror_class_init>> nfc->receive_iov = filter_mirror_receive_iov;
+	 *   - net/filter-mirror.c|442| <<filter_redirector_class_init>> nfc->receive_iov = filter_redirector_receive_iov;
+	 *   - net/filter-replay.c|72| <<filter_replay_class_init>> nfc->receive_iov = filter_replay_receive_iov;
+	 *   - net/filter-rewriter.c|424| <<colo_rewriter_class_init>> nfc->receive_iov = colo_rewriter_receive_iov;
+	 *   - net/filter.c|41| <<qemu_netfilter_receive>> return NETFILTER_GET_CLASS(OBJECT(nf))->receive_iov(
+	 */
         return NETFILTER_GET_CLASS(OBJECT(nf))->receive_iov(
                                    nf, sender, flags, iov, iovcnt, sent_cb);
     }
diff --git a/net/net.c b/net/net.c
index 7ef688587..84a715859 100644
--- a/net/net.c
+++ b/net/net.c
@@ -615,6 +615,12 @@ int qemu_can_send_packet(NetClientState *sender)
     return qemu_can_receive_packet(sender->peer);
 }
 
+/*
+ * called by:
+ *   - net/net.c|663| <<filter_receive>> return filter_receive_iov(nc, direction, sender, flags, &iov, 1, sent_cb);
+ *   - net/net.c|861| <<qemu_sendv_packet_async>> ret = filter_receive_iov(sender, NET_FILTER_DIRECTION_TX, sender,
+ *   - net/net.c|867| <<qemu_sendv_packet_async>> ret = filter_receive_iov(sender->peer, NET_FILTER_DIRECTION_RX, sender,
+ */
 static ssize_t filter_receive_iov(NetClientState *nc,
                                   NetFilterDirection direction,
                                   NetClientState *sender,
@@ -647,6 +653,11 @@ static ssize_t filter_receive_iov(NetClientState *nc,
     return ret;
 }
 
+/*
+ * called by:
+ *   - net/net.c|718| <<qemu_send_packet_async_with_flags>> ret = filter_receive(sender, NET_FILTER_DIRECTION_TX,
+ *   - net/net.c|724| <<qemu_send_packet_async_with_flags>> ret = filter_receive(sender->peer, NET_FILTER_DIRECTION_RX,
+ */
 static ssize_t filter_receive(NetClientState *nc,
                               NetFilterDirection direction,
                               NetClientState *sender,
@@ -660,6 +671,12 @@ static ssize_t filter_receive(NetClientState *nc,
         .iov_len = size
     };
 
+    /*
+     * called by:
+     *   - net/net.c|663| <<filter_receive>> return filter_receive_iov(nc, direction, sender, flags, &iov, 1, sent_cb);
+     *   - net/net.c|861| <<qemu_sendv_packet_async>> ret = filter_receive_iov(sender, NET_FILTER_DIRECTION_TX, sender,
+     *   - net/net.c|867| <<qemu_sendv_packet_async>> ret = filter_receive_iov(sender->peer, NET_FILTER_DIRECTION_RX, sender,
+     */
     return filter_receive_iov(nc, direction, sender, flags, &iov, 1, sent_cb);
 }
 
@@ -841,6 +858,13 @@ static ssize_t qemu_deliver_packet_iov(NetClientState *sender,
     return ret;
 }
 
+/*
+ * called by:
+ *   - hw/net/virtio-net.c|2806| <<virtio_net_flush_tx>> ret = qemu_sendv_packet_async(qemu_get_subqueue(n->nic, queue_index),
+ *   - net/af-xdp.c|240| <<af_xdp_send>> if (!qemu_sendv_packet_async(&s->nc, &iov, 1,
+ *   - net/net.c|883| <<qemu_sendv_packet>> return qemu_sendv_packet_async(nc, iov, iovcnt, NULL);
+ *   - net/netmap.c|283| <<netmap_send>> iovsize = qemu_sendv_packet_async(&s->nc, s->iov, iovcnt,
+ */
 ssize_t qemu_sendv_packet_async(NetClientState *sender,
                                 const struct iovec *iov, int iovcnt,
                                 NetPacketSent *sent_cb)
@@ -857,6 +881,12 @@ ssize_t qemu_sendv_packet_async(NetClientState *sender,
         return size;
     }
 
+    /*
+     * called by:
+     *   - net/net.c|663| <<filter_receive>> return filter_receive_iov(nc, direction, sender, flags, &iov, 1, sent_cb);
+     *   - net/net.c|861| <<qemu_sendv_packet_async>> ret = filter_receive_iov(sender, NET_FILTER_DIRECTION_TX, sender,
+     *   - net/net.c|867| <<qemu_sendv_packet_async>> ret = filter_receive_iov(sender->peer, NET_FILTER_DIRECTION_RX, sender,
+     */
     /* Let filters handle the packet first */
     ret = filter_receive_iov(sender, NET_FILTER_DIRECTION_TX, sender,
                              QEMU_NET_PACKET_FLAG_NONE, iov, iovcnt, sent_cb);
@@ -864,6 +894,12 @@ ssize_t qemu_sendv_packet_async(NetClientState *sender,
         return ret;
     }
 
+    /*
+     * called by:
+     *   - net/net.c|663| <<filter_receive>> return filter_receive_iov(nc, direction, sender, flags, &iov, 1, sent_cb);
+     *   - net/net.c|861| <<qemu_sendv_packet_async>> ret = filter_receive_iov(sender, NET_FILTER_DIRECTION_TX, sender,
+     *   - net/net.c|867| <<qemu_sendv_packet_async>> ret = filter_receive_iov(sender->peer, NET_FILTER_DIRECTION_RX, sender,
+     */
     ret = filter_receive_iov(sender->peer, NET_FILTER_DIRECTION_RX, sender,
                              QEMU_NET_PACKET_FLAG_NONE, iov, iovcnt, sent_cb);
     if (ret) {
diff --git a/qom/object.c b/qom/object.c
index 9edc06d39..bf11f0519 100644
--- a/qom/object.c
+++ b/qom/object.c
@@ -1561,6 +1561,41 @@ bool object_property_set_int(Object *obj, const char *name,
     return ok;
 }
 
+/*
+ * called by:
+ *   - hw/acpi/erst.c|967| <<erst_realizefn>> s->storage_size = object_property_get_int(OBJECT(s->hostmem), "size", errp);
+ *   - hw/acpi/memory_hotplug.c|236| <<acpi_memory_slot_status>> int slot = object_property_get_int(OBJECT(dev), PC_DIMM_SLOT_PROP, &local_err);
+ *   - hw/acpi/nvdimm.c|194| <<nvdimm_get_device_by_handle>> int slot = object_property_get_int(OBJECT(nvd), PC_DIMM_SLOT_PROP, NULL);
+ *   - hw/acpi/nvdimm.c|218| <<nvdimm_build_structure_spa>> int slot = object_property_get_int(OBJECT(dev), PC_DIMM_SLOT_PROP, NULL);
+ *   - hw/acpi/nvdimm.c|263| <<nvdimm_build_structure_memdev>> int slot = object_property_get_int(OBJECT(dev), PC_DIMM_SLOT_PROP, NULL);
+ *   - hw/acpi/nvdimm.c|301| <<nvdimm_build_structure_dcr>> int slot = object_property_get_int(OBJECT(dev), PC_DIMM_SLOT_PROP, NULL);
+ *   - hw/acpi/nvdimm.c|1440| <<nvdimm_build_srat>> node = object_property_get_int(obj, PC_DIMM_NODE_PROP, &error_abort);
+ *   - hw/arm/boot.c|446| <<fdt_add_psci_node>> psci_conduit = object_property_get_int(OBJECT(armcpu), "psci-conduit", &error_abort);
+ *   - hw/core/numa.c|743| <<numa_cpu_pre_plug>> int node_id = object_property_get_int(OBJECT(dev), "node-id", &error_abort);
+ *   - hw/hyperv/hv-balloon.c|221| <<get_current_ram_size>> size += object_property_get_int(obj, PC_DIMM_SIZE_PROP, &error_abort);
+ *   - hw/i386/acpi-build.c|2322| <<build_amd_iommu>> object_property_get_int(OBJECT(&s->pci), "addr", &error_abort), 2);
+ *   - hw/i386/acpi-build.c|2357| <<build_amd_iommu>> object_property_get_int(OBJECT(&s->pci), "addr", &error_abort), 2);
+ *   - hw/i386/microvm-dt.c|191| <<dt_add_isa_serial>> uint32_t irq = object_property_get_int(OBJECT(dev), "irq", &error_fatal);
+ *   - hw/i386/microvm-dt.c|192| <<dt_add_isa_serial>> hwaddr base = object_property_get_int(OBJECT(dev), "iobase", &error_fatal);
+ *   - hw/mem/pc-dimm.c|52| <<pc_dimm_pre_plug>> slot = object_property_get_int(OBJECT(dimm), PC_DIMM_SLOT_PROP, &error_abort);
+ *   - hw/pci-host/pnv_phb.c|255| <<pnv_phb_root_port_realize>> chip_id = object_property_get_int(OBJECT(bus), "chip-id", &local_err);
+ *   - hw/pci-host/pnv_phb.c|260| <<pnv_phb_root_port_realize>> index = object_property_get_int(OBJECT(bus), "phb-id", &local_err);
+ *   - hw/ppc/pnv.c|556| <<pnv_dt_ipmi_bt>> io_base = object_property_get_int(OBJECT(d), "ioport", &error_fatal);
+ *   - hw/ppc/pnv.c|559| <<pnv_dt_ipmi_bt>> irq = object_property_get_int(OBJECT(d), "irq", &error_fatal);
+ *   - hw/ppc/spapr.c|3577| <<spapr_memory_plug>> slot = object_property_get_int(OBJECT(dimm), PC_DIMM_SLOT_PROP, &error_abort);
+ *   - hw/ppc/spapr_nvdimm.c|88| <<spapr_nvdimm_validate>> if (object_property_get_int(OBJECT(nvdimm), NVDIMM_LABEL_SIZE_PROP, &error_abort) == 0) {
+ *   - hw/ppc/spapr_nvdimm.c|154| <<spapr_dt_nvdimm>> uint64_t size = object_property_get_int(OBJECT(nvdimm), PC_DIMM_SIZE_PROP, NULL);
+ *   - hw/ppc/spapr_nvdimm.c|752| <<h_scm_unbind_mem>> size = object_property_get_int(OBJECT(nvdimm), PC_DIMM_SIZE_PROP, &error_abort);
+ *   - hw/ppc/spapr_nvdimm.c|754| <<h_scm_unbind_mem>> addr = object_property_get_int(OBJECT(nvdimm), PC_DIMM_ADDR_PROP, &error_abort);
+ *   - hw/ppc/spapr_nvdimm.c|797| <<h_scm_unbind_all>> size = object_property_get_int(OBJECT(nvdimm), PC_DIMM_SIZE_PROP, &error_abort);
+ *   - hw/ppc/spapr_nvdimm.c|807| <<h_scm_unbind_all>> size = object_property_get_int(OBJECT(nvdimm), PC_DIMM_SIZE_PROP, &error_abort);
+ *   - hw/s390x/ccw-device.c|63| <<ccw_device_set_loadparm>> index = object_property_get_int(obj, "bootindex", NULL);
+ *   - hw/scsi/scsi-disk.c|3150| <<scsi_property_set_loadparm>> if (object_property_get_int(obj, "bootindex", NULL) < 0) {
+ *   - linux-user/elfload.c|260| <<get_elf_platform>> int family = object_property_get_int(OBJECT(thread_cpu), "family", NULL);
+ *   - linux-user/uname.c|58| <<cpu_to_uname_machine>> int family = object_property_get_int(OBJECT(cpu), "family", NULL);
+ *   - target/i386/cpu.c|5404| <<max_x86_cpu_realize>> if (!object_property_get_int(obj, "family", &error_abort)) {
+ *   - target/i386/kvm/kvm.c|3319| <<kvm_vm_set_nr_mmu_pages>> shadow_mem = object_property_get_int(OBJECT(s), "kvm-shadow-mem", &error_abort);
+ */
 int64_t object_property_get_int(Object *obj, const char *name,
                                 Error **errp)
 {
diff --git a/system/cpus.c b/system/cpus.c
index 1c818ff68..85c180b31 100644
--- a/system/cpus.c
+++ b/system/cpus.c
@@ -80,6 +80,19 @@ bool cpu_is_stopped(CPUState *cpu)
 
 bool cpu_work_list_empty(CPUState *cpu)
 {
+    /*
+     * 在以下使用CPUState->work_list:
+     *   - cpu-common.c|137| <<queue_work_on_cpu>> QSIMPLEQ_INSERT_TAIL(&cpu->work_list, wi, node);
+     *   - cpu-common.c|340| <<free_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|341| <<free_queued_cpu_work>> struct qemu_work_item *wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|342| <<free_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - cpu-common.c|354| <<process_queued_cpu_work>> if (QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|358| <<process_queued_cpu_work>> while (!QSIMPLEQ_EMPTY(&cpu->work_list)) {
+     *   - cpu-common.c|359| <<process_queued_cpu_work>> wi = QSIMPLEQ_FIRST(&cpu->work_list);
+     *   - cpu-common.c|360| <<process_queued_cpu_work>> QSIMPLEQ_REMOVE_HEAD(&cpu->work_list, node);
+     *   - hw/core/cpu-common.c|257| <<cpu_common_initfn>> QSIMPLEQ_INIT(&cpu->work_list);
+     *   - system/cpus.c|83| <<cpu_work_list_empty>> return QSIMPLEQ_EMPTY_ATOMIC(&cpu->work_list);
+     */
     return QSIMPLEQ_EMPTY_ATOMIC(&cpu->work_list);
 }
 
@@ -182,6 +195,9 @@ void cpu_synchronize_post_reset(CPUState *cpu)
 
 void cpu_synchronize_post_init(CPUState *cpu)
 {
+    /*
+     * kvm_cpu_synchronize_post_init()
+     */
     if (cpus_accel->synchronize_post_init) {
         cpus_accel->synchronize_post_init(cpu);
     }
@@ -441,6 +457,14 @@ static void qemu_cpu_stop(CPUState *cpu, bool exit)
     qemu_cond_broadcast(&qemu_pause_cond);
 }
 
+/*
+ * called by:
+ *   - accel/tcg/tcg-accel-ops-rr.c|120| <<rr_wait_io_event>> qemu_wait_io_event_common(cpu);
+ *   - accel/tcg/tcg-accel-ops-rr.c|206| <<rr_cpu_thread_fn>> qemu_wait_io_event_common(cpu);
+ *   - system/cpus.c|471| <<qemu_wait_io_event>> qemu_wait_io_event_common(cpu);
+ *   - target/i386/nvmm/nvmm-accel-ops.c|53| <<qemu_nvmm_cpu_thread_fn>> qemu_wait_io_event_common(cpu);
+ *   - target/i386/whpx/whpx-accel-ops.c|53| <<whpx_cpu_thread_fn>> qemu_wait_io_event_common(cpu);
+ */
 void qemu_wait_io_event_common(CPUState *cpu)
 {
     qatomic_set_mb(&cpu->thread_kicked, false);
@@ -450,6 +474,13 @@ void qemu_wait_io_event_common(CPUState *cpu)
     process_queued_cpu_work(cpu);
 }
 
+/*
+ * called by:
+ *   - accel/dummy-cpus.c|59| <<dummy_cpu_thread_fn>> qemu_wait_io_event(cpu);
+ *   - accel/hvf/hvf-accel-ops.c|452| <<hvf_cpu_thread_fn>> qemu_wait_io_event(cpu);
+ *   - accel/kvm/kvm-accel-ops.c|55| <<kvm_vcpu_thread_fn>> qemu_wait_io_event(cpu);
+ *   - accel/tcg/tcg-accel-ops-mttcg.c|118| <<mttcg_cpu_thread_fn>> qemu_wait_io_event(cpu);
+ */
 void qemu_wait_io_event(CPUState *cpu)
 {
     bool slept = false;
@@ -662,6 +693,28 @@ const AccelOpsClass *cpus_get_accel(void)
     return cpus_accel;
 }
 
+/*
+ * called by:
+ *   - target/alpha/cpu.c|108| <<alpha_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/arm/cpu.c|2606| <<arm_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/avr/cpu.c|119| <<avr_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/hexagon/cpu.c|312| <<hexagon_cpu_realize>> qemu_init_vcpu(cs);
+ *   - target/hppa/cpu.c|178| <<hppa_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/i386/cpu.c|8379| <<x86_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/loongarch/cpu.c|610| <<loongarch_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/m68k/cpu.c|334| <<m68k_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/microblaze/cpu.c|248| <<mb_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/mips/cpu.c|492| <<mips_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/openrisc/cpu.c|162| <<openrisc_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/ppc/cpu_init.c|6912| <<ppc_cpu_realize>> qemu_init_vcpu(cs);
+ *   - target/riscv/cpu.c|1189| <<riscv_cpu_realize>> qemu_init_vcpu(cs);
+ *   - target/rx/cpu.c|133| <<rx_cpu_realize>> qemu_init_vcpu(cs);
+ *   - target/s390x/cpu.c|272| <<s390_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/sh4/cpu.c|222| <<superh_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/sparc/cpu.c|824| <<sparc_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/tricore/cpu.c|113| <<tricore_cpu_realizefn>> qemu_init_vcpu(cs);
+ *   - target/xtensa/cpu.c|178| <<xtensa_cpu_realizefn>> qemu_init_vcpu(cs);
+ */
 void qemu_init_vcpu(CPUState *cpu)
 {
     MachineState *ms = MACHINE(qdev_get_machine());
diff --git a/system/dma-helpers.c b/system/dma-helpers.c
index cbcd89dfa..dc8f29eed 100644
--- a/system/dma-helpers.c
+++ b/system/dma-helpers.c
@@ -211,6 +211,23 @@ static const AIOCBInfo dma_aiocb_info = {
     .cancel_async       = dma_aio_cancel,
 };
 
+/*
+ * called by:
+ *   - hw/ide/core.c|971| <<ide_dma_cb>> s->bus->dma->aiocb = dma_blk_io(blk_get_aio_context(s->blk),
+ *     &s->sg, offset, BDRV_SECTOR_SIZE, ide_issue_trim, s, ide_dma_cb, s, DMA_DIRECTION_TO_DEVICE);
+ *   - hw/ide/macio.c|190| <<pmac_ide_transfer_cb>> s->bus->dma->aiocb = dma_blk_io(blk_get_aio_context(s->blk),
+ *     &s->sg, offset, 0x1, ide_issue_trim, s, pmac_ide_transfer_cb, io, DMA_DIRECTION_TO_DEVICE);
+ *   - hw/scsi/scsi-disk.c|491| <<scsi_do_read>> r->req.aiocb = dma_blk_io(blk_get_aio_context(s->qdev.conf.blk),
+ *     r->req.sg, r->sector << BDRV_SECTOR_BITS, BDRV_SECTOR_SIZE, sdc->dma_readv, r, scsi_dma_complete, r,
+ *     DMA_DIRECTION_FROM_DEVICE);
+ *   - hw/scsi/scsi-disk.c|654| <<scsi_write_data>> r->req.aiocb = dma_blk_io(blk_get_aio_context(s->qdev.conf.blk),
+ *     r->req.sg, r->sector << BDRV_SECTOR_BITS, BDRV_SECTOR_SIZE, sdc->dma_writev, r, scsi_dma_complete, r,
+ *     DMA_DIRECTION_TO_DEVICE);
+ *   - system/dma-helpers.c|254| <<dma_blk_io>> return dma_blk_io(blk_get_aio_context(blk), sg, offset, align,
+ *     dma_blk_read_io_func, blk, cb, opaque, DMA_DIRECTION_FROM_DEVICE);
+ *   - system/dma-helpers.c|272| <<dma_blk_io>> return dma_blk_io(blk_get_aio_context(blk), sg, offset, align,
+ *     dma_blk_write_io_func, blk, cb, opaque, DMA_DIRECTION_TO_DEVICE);
+ */
 BlockAIOCB *dma_blk_io(AioContext *ctx,
     QEMUSGList *sg, uint64_t offset, uint32_t align,
     DMAIOFunc *io_func, void *io_func_opaque,
diff --git a/system/memory.c b/system/memory.c
index 85f6834cb..2adeece51 100644
--- a/system/memory.c
+++ b/system/memory.c
@@ -1588,6 +1588,14 @@ bool memory_region_init_ram_nomigrate(MemoryRegion *mr,
                                                   size, 0, errp);
 }
 
+/*
+ * clled by:
+ *   - backends/hostmem-ram.c|34| <<ram_backend_memory_alloc>> return memory_region_init_ram_flags_nomigrate(&backend->mr, OBJECT(backend),
+ *   - hw/m68k/next-cube.c|1013| <<next_cube_init>> memory_region_init_ram_flags_nomigrate(&m->bmapm1, NULL, "next.bmapmem",
+ *   - system/memory.c|1587| <<memory_region_init_ram_nomigrate>> return memory_region_init_ram_flags_nomigrate(mr, owner, name,
+ *   - system/memory.c|1748| <<memory_region_init_rom_nomigrate>> if (!memory_region_init_ram_flags_nomigrate(mr, owner, name,
+ *   - system/memory.c|3718| <<memory_region_init_ram_guest_memfd>> if (!memory_region_init_ram_flags_nomigrate(mr, owner, name, size,
+ */
 bool memory_region_init_ram_flags_nomigrate(MemoryRegion *mr,
                                             Object *owner,
                                             const char *name,
@@ -1884,6 +1892,19 @@ bool memory_region_is_protected(MemoryRegion *mr)
 
 bool memory_region_has_guest_memfd(MemoryRegion *mr)
 {
+    /*
+     * 在以下使用RAMBlock->guest_memfd:
+     *   - system/physmem.c|2170| <<qemu_ram_alloc_internal>> new_block->guest_memfd = -1;
+     *   - accel/kvm/kvm-all.c|1534| <<kvm_set_phys_mem>> mem->guest_memfd = mr->ram_block->guest_memfd;
+     *   - system/memory.c|1895| <<memory_region_has_guest_memfd>> return mr->ram_block && mr->ram_block->guest_memfd >= 0;
+     *   - system/physmem.c|1954| <<ram_block_add>> assert(new_block->guest_memfd < 0);
+     *   - system/physmem.c|1964| <<ram_block_add>> new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
+     *   - system/physmem.c|1966| <<ram_block_add>> if (new_block->guest_memfd < 0) {
+     *   - system/physmem.c|2075| <<qemu_ram_alloc_from_fd>> new_block->guest_memfd = -1;
+     *   - system/physmem.c|2237| <<reclaim_ramblock>> if (block->guest_memfd >= 0) {
+     *   - system/physmem.c|2238| <<reclaim_ramblock>> close(block->guest_memfd);
+     *   - system/physmem.c|3847| <<ram_block_discard_guest_memfd_range>> ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
+     */
     return mr->ram_block && mr->ram_block->guest_memfd >= 0;
 }
 
diff --git a/system/physmem.c b/system/physmem.c
index dc1db3a38..91b899706 100644
--- a/system/physmem.c
+++ b/system/physmem.c
@@ -84,6 +84,43 @@
 
 //#define DEBUG_SUBPAGE
 
+/*
+ * 在以下使用ram_list:
+ *   - system/physmem.c|949| <<global>> blocks = qatomic_rcu_read(&ram_list.dirty_memory[client]);
+ *   - hw/core/numa.c|846| <<ram_block_notifier_add>> QLIST_INSERT_HEAD(&ram_list.ramblock_notifiers, n, next);
+ *   - hw/core/numa.c|868| <<ram_block_notify_add>> QLIST_FOREACH_SAFE(notifier, &ram_list.ramblock_notifiers, next, next) {
+ *   - hw/core/numa.c|880| <<ram_block_notify_remove>> QLIST_FOREACH_SAFE(notifier, &ram_list.ramblock_notifiers, next, next) {
+ *   - hw/core/numa.c|892| <<ram_block_notify_resize>> QLIST_FOREACH_SAFE(notifier, &ram_list.ramblock_notifiers, next, next) {
+ *   - include/exec/ram_addr.h|169| <<cpu_physical_memory_get_dirty>> blocks = qatomic_rcu_read(&ram_list.dirty_memory[client]);
+ *   - include/exec/ram_addr.h|210| <<cpu_physical_memory_all_dirty>> blocks = qatomic_rcu_read(&ram_list.dirty_memory[client]);
+ *   - include/exec/ram_addr.h|283| <<cpu_physical_memory_set_dirty_flag>> blocks = qatomic_rcu_read(&ram_list.dirty_memory[client]);
+ *   - include/exec/ram_addr.h|306| <<cpu_physical_memory_set_dirty_range>> blocks[i] = qatomic_rcu_read(&ram_list.dirty_memory[i]);
+ *   - include/exec/ram_addr.h|376| <<cpu_physical_memory_set_dirty_lebitmap>> qatomic_rcu_read(&ram_list.dirty_memory[i])->blocks;
+ *   - include/exec/ram_addr.h|500| <<cpu_physical_memory_sync_dirty_bitmap>> &ram_list.dirty_memory[DIRTY_MEMORY_MIGRATION])->blocks;
+ *   - include/exec/ramlist.h|61| <<INTERNAL_RAMBLOCK_FOREACH>> QLIST_FOREACH_RCU(block, &ram_list.blocks, next)
+ *   - migration/ram.c|1342| <<find_dirty_block>> pss->block = QLIST_FIRST_RCU(&ram_list.blocks);
+ *   - migration/ram.c|2256| <<ram_find_and_save_block>> rs->last_seen_block = QLIST_FIRST_RCU(&ram_list.blocks);
+ *   - migration/ram.c|2405| <<ram_state_reset>> rs->last_version = ram_list.version;
+ *   - migration/ram.c|3145| <<ram_save_iterate>> if (ram_list.version != rs->last_version) {
+ *   - migration/ram.c|3863| <<colo_flush_ram_cache>> block = QLIST_FIRST_RCU(&ram_list.blocks);
+ *   - system/physmem.c|819| <<qemu_get_ram_block>> block = qatomic_rcu_read(&ram_list.mru_block);
+ *   - system/physmem.c|849| <<qemu_get_ram_block>> ram_list.mru_block = block;
+ *   - system/physmem.c|893| <<cpu_physical_memory_test_and_clear_dirty>> blocks = qatomic_rcu_read(&ram_list.dirty_memory[client]);
+ *   - system/physmem.c|1148| <<qemu_mutex_lock_ramlist>> qemu_mutex_lock(&ram_list.mutex);
+ *   - system/physmem.c|1153| <<qemu_mutex_unlock_ramlist>> qemu_mutex_unlock(&ram_list.mutex);
+ *   - system/physmem.c|1492| <<find_ram_offset>> if (QLIST_EMPTY_RCU(&ram_list.blocks)) {
+ *   - system/physmem.c|1792| <<dirty_memory_extend>> unsigned int old_num_blocks = ram_list.num_dirty_blocks;
+ *   - system/physmem.c|1807| <<dirty_memory_extend>> old_blocks = qatomic_rcu_read(&ram_list.dirty_memory[i]);
+ *   - system/physmem.c|1820| <<dirty_memory_extend>> qatomic_rcu_set(&ram_list.dirty_memory[i], new_blocks);
+ *   - system/physmem.c|1827| <<dirty_memory_extend>> ram_list.num_dirty_blocks = new_num_blocks;
+ *   - system/physmem.c|1907| <<ram_block_add>> QLIST_INSERT_HEAD_RCU(&ram_list.blocks, new_block, next);
+ *   - system/physmem.c|1909| <<ram_block_add>> ram_list.mru_block = NULL;
+ *   - system/physmem.c|1913| <<ram_block_add>> ram_list.version++;
+ *   - system/physmem.c|2161| <<qemu_ram_free>> ram_list.mru_block = NULL;
+ *   - system/physmem.c|2164| <<qemu_ram_free>> ram_list.version++;
+ *   - system/physmem.c|2313| <<qemu_ram_block_from_host>> block = qatomic_rcu_read(&ram_list.mru_block);
+ *   - system/physmem.c|3129| <<cpu_exec_init_all>> qemu_mutex_init(&ram_list.mutex);
+ */
 /* ram_list is read under rcu_read_lock()/rcu_read_unlock().  Writes
  * are protected by the ramlist lock.
  */
@@ -1827,6 +1864,51 @@ static void dirty_memory_extend(ram_addr_t new_ram_size)
     ram_list.num_dirty_blocks = new_num_blocks;
 }
 
+/*
+ * 如果只是普通的"-m xxxx"
+ *
+ * (gdb) bt
+ * #0  ram_block_add (new_block=0x555557712270, errp=0x7fffffffd688) at ../system/physmem.c:1831
+ * #1  0x0000555555e77d15 in qemu_ram_alloc_internal (size=4294967296, max_size=4294967296, resized=0x0, host=0x0, ram_flags=0, mr=0x5555575482e0, errp=0x7fffffffd720)
+ *     at ../system/physmem.c:2092
+ * #2  0x0000555555e77e41 in qemu_ram_alloc (size=4294967296, ram_flags=0, mr=0x5555575482e0, errp=0x7fffffffd720) at ../system/physmem.c:2112
+ * #3  0x0000555555e69caa in memory_region_init_ram_flags_nomigrate (mr=0x5555575482e0, owner=0x555557548270, name=0x555557407540 "pc.ram", size=4294967296, ram_flags=0,
+ *     errp=0x7fffffffd848) at ../system/memory.c:1603
+ * #4  0x0000555555bf0197 in ram_backend_memory_alloc (backend=0x555557548270, errp=0x7fffffffd848) at ../backends/hostmem-ram.c:34
+ * #5  0x0000555555bf0fee in host_memory_backend_memory_complete (uc=0x555557548270, errp=0x7fffffffd848) at ../backends/hostmem.c:345
+ * #6  0x0000555555efe460 in user_creatable_complete (uc=0x555557548270, errp=0x7fffffffd900) at ../qom/object_interfaces.c:28
+ * #7  0x00005555559475a1 in create_default_memdev (ms=0x5555576791f0, path=0x0, errp=0x7fffffffd900) at ../hw/core/machine.c:1046
+ * #8  0x0000555555949399 in machine_run_board_init (machine=0x5555576791f0, mem_path=0x0, errp=0x7fffffffd900) at ../hw/core/machine.c:1584
+ * #9  0x0000555555be76cb in qemu_init_board () at ../system/vl.c:2632
+ * #10 0x0000555555be7a2b in qmp_x_exit_preconfig (errp=0x555557350860 <error_fatal>) at ../system/vl.c:2718
+ * #11 0x0000555555bea569 in qemu_init (argc=18, argv=0x7fffffffdbf8) at ../system/vl.c:3753
+ * #12 0x000055555609a086 in main (argc=18, argv=0x7fffffffdbf8) at ../system/main.c:47
+ *
+ * (gdb) bt
+ * #0  ram_block_add (new_block=0x555557680e90, errp=0x7fffffffd558) at ../system/physmem.c:1831
+ * #1  0x0000555555e77d15 in qemu_ram_alloc_internal (size=131072, max_size=131072, resized=0x0, host=0x0, ram_flags=0, mr=0x555557565000, errp=0x7fffffffd5f0)
+ *     at ../system/physmem.c:2092
+ * #2  0x0000555555e77e41 in qemu_ram_alloc (size=131072, ram_flags=0, mr=0x555557565000, errp=0x7fffffffd5f0) at ../system/physmem.c:2112
+ * #3  0x0000555555e69caa in memory_region_init_ram_flags_nomigrate (mr=0x555557565000, owner=0x0, name=0x55555635dacf "pc.rom", size=131072, ram_flags=0,
+ *     errp=0x555557350860 <error_fatal>) at ../system/memory.c:1603
+ * #4  0x0000555555e69c0f in memory_region_init_ram_nomigrate (mr=0x555557565000, owner=0x0, name=0x55555635dacf "pc.rom", size=131072, errp=0x555557350860 <error_fatal>)
+ *     at ../system/memory.c:1587
+ * #5  0x0000555555e705f4 in memory_region_init_ram (mr=0x555557565000, owner=0x0, name=0x55555635dacf "pc.rom", size=131072, errp=0x555557350860 <error_fatal>)
+ *     at ../system/memory.c:3695
+ * #6  0x0000555555d1d904 in pc_memory_init (pcms=0x5555576791f0, system_memory=0x5555575feae0, rom_memory=0x555557407190, pci_hole64_size=2147483648) at ../hw/i386/pc.c:975
+ * #7  0x0000555555cf82d9 in pc_init1 (machine=0x5555576791f0, pci_type=0x5555563555ea "i440FX") at ../hw/i386/pc_piix.c:225
+ * #8  0x0000555555cf8c82 in pc_i440fx_init (machine=0x5555576791f0) at ../hw/i386/pc_piix.c:445
+ * #9  0x0000555555cf8e7a in pc_i440fx_machine_9_2_init (machine=0x5555576791f0) at ../hw/i386/pc_piix.c:484
+ * #10 0x0000555555949537 in machine_run_board_init (machine=0x5555576791f0, mem_path=0x0, errp=0x7fffffffd900) at ../hw/core/machine.c:1630
+ * #11 0x0000555555be76cb in qemu_init_board () at ../system/vl.c:2632
+ * #12 0x0000555555be7a2b in qmp_x_exit_preconfig (errp=0x555557350860 <error_fatal>) at ../system/vl.c:2718
+ * #13 0x0000555555bea569 in qemu_init (argc=18, argv=0x7fffffffdbf8) at ../system/vl.c:3753
+ * #14 0x000055555609a086 in main (argc=18, argv=0x7fffffffdbf8) at ../system/main.c:47
+ *
+ * called by:
+ *   - system/physmem.c|2001| <<qemu_ram_alloc_from_fd>> ram_block_add(new_block, &local_err);
+ *   - system/physmem.c|2092| <<qemu_ram_alloc_from_fd>> ram_block_add(new_block, &local_err);
+ */
 static void ram_block_add(RAMBlock *new_block, Error **errp)
 {
     const bool noreserve = qemu_ram_is_noreserve(new_block);
@@ -1879,6 +1961,19 @@ static void ram_block_add(RAMBlock *new_block, Error **errp)
             goto out_free;
         }
 
+        /*
+	 * 在以下使用RAMBlock->guest_memfd:
+         *   - system/physmem.c|2170| <<qemu_ram_alloc_internal>> new_block->guest_memfd = -1;
+         *   - accel/kvm/kvm-all.c|1534| <<kvm_set_phys_mem>> mem->guest_memfd = mr->ram_block->guest_memfd;
+         *   - system/memory.c|1895| <<memory_region_has_guest_memfd>> return mr->ram_block && mr->ram_block->guest_memfd >= 0;
+         *   - system/physmem.c|1954| <<ram_block_add>> assert(new_block->guest_memfd < 0);
+         *   - system/physmem.c|1964| <<ram_block_add>> new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
+         *   - system/physmem.c|1966| <<ram_block_add>> if (new_block->guest_memfd < 0) {
+         *   - system/physmem.c|2075| <<qemu_ram_alloc_from_fd>> new_block->guest_memfd = -1;
+         *   - system/physmem.c|2237| <<reclaim_ramblock>> if (block->guest_memfd >= 0) {
+         *   - system/physmem.c|2238| <<reclaim_ramblock>> close(block->guest_memfd);
+         *   - system/physmem.c|3847| <<ram_block_discard_guest_memfd_range>> ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
+	 */
         new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
                                                         0, errp);
         if (new_block->guest_memfd < 0) {
@@ -1990,6 +2085,19 @@ RAMBlock *qemu_ram_alloc_from_fd(ram_addr_t size, MemoryRegion *mr,
     new_block->used_length = size;
     new_block->max_length = size;
     new_block->flags = ram_flags;
+    /*
+     * 在以下使用RAMBlock->guest_memfd:
+     *   - system/physmem.c|2170| <<qemu_ram_alloc_internal>> new_block->guest_memfd = -1;
+     *   - accel/kvm/kvm-all.c|1534| <<kvm_set_phys_mem>> mem->guest_memfd = mr->ram_block->guest_memfd;
+     *   - system/memory.c|1895| <<memory_region_has_guest_memfd>> return mr->ram_block && mr->ram_block->guest_memfd >= 0;
+     *   - system/physmem.c|1954| <<ram_block_add>> assert(new_block->guest_memfd < 0);
+     *   - system/physmem.c|1964| <<ram_block_add>> new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
+     *   - system/physmem.c|1966| <<ram_block_add>> if (new_block->guest_memfd < 0) {
+     *   - system/physmem.c|2075| <<qemu_ram_alloc_from_fd>> new_block->guest_memfd = -1;
+     *   - system/physmem.c|2237| <<reclaim_ramblock>> if (block->guest_memfd >= 0) {
+     *   - system/physmem.c|2238| <<reclaim_ramblock>> close(block->guest_memfd);
+     *   - system/physmem.c|3847| <<ram_block_discard_guest_memfd_range>> ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
+     */
     new_block->guest_memfd = -1;
     new_block->host = file_ram_alloc(new_block, size, fd, !file_size, offset,
                                      errp);
@@ -2085,6 +2193,19 @@ RAMBlock *qemu_ram_alloc_internal(ram_addr_t size, ram_addr_t max_size,
     new_block->max_length = max_size;
     assert(max_size >= size);
     new_block->fd = -1;
+    /*
+     * 在以下使用RAMBlock->guest_memfd: 
+     *   - system/physmem.c|2170| <<qemu_ram_alloc_internal>> new_block->guest_memfd = -1;
+     *   - accel/kvm/kvm-all.c|1534| <<kvm_set_phys_mem>> mem->guest_memfd = mr->ram_block->guest_memfd;
+     *   - system/memory.c|1895| <<memory_region_has_guest_memfd>> return mr->ram_block && mr->ram_block->guest_memfd >= 0;
+     *   - system/physmem.c|1954| <<ram_block_add>> assert(new_block->guest_memfd < 0);
+     *   - system/physmem.c|1964| <<ram_block_add>> new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
+     *   - system/physmem.c|1966| <<ram_block_add>> if (new_block->guest_memfd < 0) {
+     *   - system/physmem.c|2075| <<qemu_ram_alloc_from_fd>> new_block->guest_memfd = -1;
+     *   - system/physmem.c|2237| <<reclaim_ramblock>> if (block->guest_memfd >= 0) {
+     *   - system/physmem.c|2238| <<reclaim_ramblock>> close(block->guest_memfd);
+     *   - system/physmem.c|3847| <<ram_block_discard_guest_memfd_range>> ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
+     */
     new_block->guest_memfd = -1;
     new_block->page_size = qemu_real_host_page_size();
     new_block->host = host;
@@ -2105,6 +2226,21 @@ RAMBlock *qemu_ram_alloc_from_ptr(ram_addr_t size, void *host,
                                    errp);
 }
 
+/*
+ * (gdb) bt
+ * #0  qemu_ram_alloc (size=4294967296, ram_flags=0, mr=0x5555575482e0, errp=0x7fffffffd720) at ../system/physmem.c:2111
+ * #1  0x0000555555e69caa in memory_region_init_ram_flags_nomigrate (mr=0x5555575482e0, owner=0x555557548270, name=0x555557407540 "pc.ram", size=4294967296, ram_flags=0,
+ *     errp=0x7fffffffd848) at ../system/memory.c:1603
+ * #2  0x0000555555bf0197 in ram_backend_memory_alloc (backend=0x555557548270, errp=0x7fffffffd848) at ../backends/hostmem-ram.c:34
+ * #3  0x0000555555bf0fee in host_memory_backend_memory_complete (uc=0x555557548270, errp=0x7fffffffd848) at ../backends/hostmem.c:345
+ * #4  0x0000555555efe460 in user_creatable_complete (uc=0x555557548270, errp=0x7fffffffd900) at ../qom/object_interfaces.c:28
+ * #5  0x00005555559475a1 in create_default_memdev (ms=0x5555576791f0, path=0x0, errp=0x7fffffffd900) at ../hw/core/machine.c:1046
+ * #6  0x0000555555949399 in machine_run_board_init (machine=0x5555576791f0, mem_path=0x0, errp=0x7fffffffd900) at ../hw/core/machine.c:1584
+ * #7  0x0000555555be76cb in qemu_init_board () at ../system/vl.c:2632
+ * #8  0x0000555555be7a2b in qmp_x_exit_preconfig (errp=0x555557350860 <error_fatal>) at ../system/vl.c:2718
+ * #9  0x0000555555bea569 in qemu_init (argc=18, argv=0x7fffffffdbf8) at ../system/vl.c:3753
+ * #10 0x000055555609a086 in main (argc=18, argv=0x7fffffffdbf8) at ../system/main.c:47
+ */
 RAMBlock *qemu_ram_alloc(ram_addr_t size, uint32_t ram_flags,
                          MemoryRegion *mr, Error **errp)
 {
@@ -2137,6 +2273,19 @@ static void reclaim_ramblock(RAMBlock *block)
         qemu_anon_ram_free(block->host, block->max_length);
     }
 
+    /*
+     * 在以下使用RAMBlock->guest_memfd:
+     *   - system/physmem.c|2170| <<qemu_ram_alloc_internal>> new_block->guest_memfd = -1;
+     *   - accel/kvm/kvm-all.c|1534| <<kvm_set_phys_mem>> mem->guest_memfd = mr->ram_block->guest_memfd;
+     *   - system/memory.c|1895| <<memory_region_has_guest_memfd>> return mr->ram_block && mr->ram_block->guest_memfd >= 0;
+     *   - system/physmem.c|1954| <<ram_block_add>> assert(new_block->guest_memfd < 0);
+     *   - system/physmem.c|1964| <<ram_block_add>> new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
+     *   - system/physmem.c|1966| <<ram_block_add>> if (new_block->guest_memfd < 0) {
+     *   - system/physmem.c|2075| <<qemu_ram_alloc_from_fd>> new_block->guest_memfd = -1;
+     *   - system/physmem.c|2237| <<reclaim_ramblock>> if (block->guest_memfd >= 0) {
+     *   - system/physmem.c|2238| <<reclaim_ramblock>> close(block->guest_memfd);
+     *   - system/physmem.c|3847| <<ram_block_discard_guest_memfd_range>> ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
+     */
     if (block->guest_memfd >= 0) {
         close(block->guest_memfd);
         ram_block_discard_require(false);
@@ -3626,6 +3775,22 @@ int qemu_ram_foreach_block(RAMBlockIterFunc func, void *opaque)
  * Returns: 0 on success, none-0 on failure
  *
  */
+/*
+ * called by:
+ *   - accel/kvm/kvm-all.c|3086| <<kvm_convert_memory>> ret = ram_block_discard_range(rb, offset, size);
+ *   - hw/hyperv/hv-balloon-our_range_memslots.c|153| <<hvb_our_range_memslots_free>> ram_block_discard_range(rb, 0, qemu_ram_get_used_length(rb));
+ *   - hw/hyperv/hv-balloon.c|866| <<hv_balloon_handle_remove_host_addr_node>> if (ram_block_discard_range(rb, rb_offset, discard_size *
+ *   - hw/virtio/virtio-balloon.c|96| <<balloon_inflate_page>> ram_block_discard_range(rb, rb_offset, rb_page_size);
+ *   - hw/virtio/virtio-balloon.c|135| <<balloon_inflate_page>> ram_block_discard_range(rb, rb_aligned_offset, rb_page_size);
+ *   - hw/virtio/virtio-balloon.c|391| <<virtio_balloon_handle_report>> ram_block_discard_range(rb, ram_offset, size);
+ *   - hw/virtio/virtio-mem.c|598| <<virtio_mem_set_block_state>> if (ram_block_discard_range(rb, offset, size)) {
+ *   - hw/virtio/virtio-mem.c|652| <<virtio_mem_set_block_state>> ram_block_discard_range(vmem->memdev->mr.ram_block, offset, size);
+ *   - hw/virtio/virtio-mem.c|748| <<virtio_mem_unplug_all>> if (ram_block_discard_range(rb, 0, qemu_ram_get_used_length(rb))) {
+ *   - hw/virtio/virtio-mem.c|1082| <<virtio_mem_device_realize>> ret = ram_block_discard_range(rb, 0, qemu_ram_get_used_length(rb));
+ *   - hw/virtio/virtio-mem.c|1162| <<virtio_mem_discard_range_cb>> return ram_block_discard_range(rb, offset, size) ? -EINVAL : 0;
+ *   - hw/virtio/virtio-mem.c|1300| <<virtio_mem_post_load_early>> if (ram_block_discard_range(rb, 0, qemu_ram_get_used_length(rb))) {
+ *   - migration/ram.c|2777| <<ram_discard_range>> return ram_block_discard_range(rb, start, length);
+ */
 int ram_block_discard_range(RAMBlock *rb, uint64_t start, size_t length)
 {
     int ret = -1;
@@ -3747,6 +3912,19 @@ int ram_block_discard_guest_memfd_range(RAMBlock *rb, uint64_t start,
     int ret = -1;
 
 #ifdef CONFIG_FALLOCATE_PUNCH_HOLE
+    /*
+     * 在以下使用RAMBlock->guest_memfd:
+     *   - system/physmem.c|2170| <<qemu_ram_alloc_internal>> new_block->guest_memfd = -1;
+     *   - accel/kvm/kvm-all.c|1534| <<kvm_set_phys_mem>> mem->guest_memfd = mr->ram_block->guest_memfd;
+     *   - system/memory.c|1895| <<memory_region_has_guest_memfd>> return mr->ram_block && mr->ram_block->guest_memfd >= 0;
+     *   - system/physmem.c|1954| <<ram_block_add>> assert(new_block->guest_memfd < 0);
+     *   - system/physmem.c|1964| <<ram_block_add>> new_block->guest_memfd = kvm_create_guest_memfd(new_block->max_length,
+     *   - system/physmem.c|1966| <<ram_block_add>> if (new_block->guest_memfd < 0) {
+     *   - system/physmem.c|2075| <<qemu_ram_alloc_from_fd>> new_block->guest_memfd = -1;
+     *   - system/physmem.c|2237| <<reclaim_ramblock>> if (block->guest_memfd >= 0) {
+     *   - system/physmem.c|2238| <<reclaim_ramblock>> close(block->guest_memfd);
+     *   - system/physmem.c|3847| <<ram_block_discard_guest_memfd_range>> ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
+     */
     ret = fallocate(rb->guest_memfd, FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
                     start, length);
 
diff --git a/target/arm/arm-qmp-cmds.c b/target/arm/arm-qmp-cmds.c
index 3cc8cc738..d457d55d7 100644
--- a/target/arm/arm-qmp-cmds.c
+++ b/target/arm/arm-qmp-cmds.c
@@ -41,11 +41,29 @@ static GICCapability *gic_cap_new(int version)
     return cap;
 }
 
+/*
+ * called by:
+ *   - target/arm/arm-qmp-cmds.c|89| <<qmp_query_gic_capabilities>> gic_cap_kvm_probe(v2, v3);
+ */
 static inline void gic_cap_kvm_probe(GICCapability *v2, GICCapability *v3)
 {
 #ifdef CONFIG_KVM
     int fdarray[3];
 
+    /*
+     * 在以下调用kvm_arm_create_scratch_host_vcpu():
+     *   - target/arm/arm-qmp-cmds.c|49| <<gic_cap_kvm_probe>> if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, NULL)) {
+     *   - target/arm/kvm.c|303| <<kvm_arm_get_host_cpu_features>> if (!kvm_arm_create_scratch_host_vcpu(cpus_to_try, fdarray, &init)) {
+     *   - target/arm/kvm.c|1838| <<kvm_arm_sve_get_vls>> if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, &init)) {
+     *
+     * 注释:
+     * Create a scratch vcpu in its own VM of the type preferred by the host
+     * kernel (as would be used for '-cpu host'), for purposes of probing it
+     * for capabilities.
+     *
+     * Returns: true on success (and fdarray and init are filled in),
+     * false on failure (and fdarray and init are not valid).
+     */
     if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, NULL)) {
         return;
     }
diff --git a/target/arm/cpu64.c b/target/arm/cpu64.c
index 458d1cee0..4abf06e95 100644
--- a/target/arm/cpu64.c
+++ b/target/arm/cpu64.c
@@ -36,6 +36,10 @@
 #include "cpu-features.h"
 #include "cpregs.h"
 
+/*
+ * called by:
+ *   - target/arm/cpu.c|1930| <<arm_cpu_finalize_features>> arm_cpu_sve_finalize(cpu, &local_err);
+ */
 void arm_cpu_sve_finalize(ARMCPU *cpu, Error **errp)
 {
     /*
diff --git a/target/arm/kvm.c b/target/arm/kvm.c
index 7b6812c0d..65423887e 100644
--- a/target/arm/kvm.c
+++ b/target/arm/kvm.c
@@ -100,6 +100,20 @@ static int kvm_arm_vcpu_finalize(ARMCPU *cpu, int feature)
     return kvm_vcpu_ioctl(CPU(cpu), KVM_ARM_VCPU_FINALIZE, &feature);
 }
 
+/*
+ * 在以下调用kvm_arm_create_scratch_host_vcpu():
+ *   - target/arm/arm-qmp-cmds.c|49| <<gic_cap_kvm_probe>> if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, NULL)) {
+ *   - target/arm/kvm.c|303| <<kvm_arm_get_host_cpu_features>> if (!kvm_arm_create_scratch_host_vcpu(cpus_to_try, fdarray, &init)) {
+ *   - target/arm/kvm.c|1838| <<kvm_arm_sve_get_vls>> if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, &init)) {
+ *
+ * 注释:
+ * Create a scratch vcpu in its own VM of the type preferred by the host
+ * kernel (as would be used for '-cpu host'), for purposes of probing it
+ * for capabilities.
+ *
+ * Returns: true on success (and fdarray and init are filled in),
+ * false on failure (and fdarray and init are not valid).
+ */
 bool kvm_arm_create_scratch_host_vcpu(const uint32_t *cpus_to_try,
                                       int *fdarray,
                                       struct kvm_vcpu_init *init)
@@ -300,6 +314,20 @@ static bool kvm_arm_get_host_cpu_features(ARMHostCPUFeatures *ahcf)
         features |= 1ULL << ARM_FEATURE_PMU;
     }
 
+    /*
+     * 在以下调用kvm_arm_create_scratch_host_vcpu():
+     *   - target/arm/arm-qmp-cmds.c|49| <<gic_cap_kvm_probe>> if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, NULL)) {
+     *   - target/arm/kvm.c|303| <<kvm_arm_get_host_cpu_features>> if (!kvm_arm_create_scratch_host_vcpu(cpus_to_try, fdarray, &init)) {
+     *   - target/arm/kvm.c|1838| <<kvm_arm_sve_get_vls>> if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, &init)) {
+     *
+     * 注释:
+     * Create a scratch vcpu in its own VM of the type preferred by the host
+     * kernel (as would be used for '-cpu host'), for purposes of probing it
+     * for capabilities.
+     *
+     * Returns: true on success (and fdarray and init are filled in),
+     * false on failure (and fdarray and init are not valid).
+     */
     if (!kvm_arm_create_scratch_host_vcpu(cpus_to_try, fdarray, &init)) {
         return false;
     }
@@ -1809,6 +1837,10 @@ bool kvm_arm_mte_supported(void)
 
 QEMU_BUILD_BUG_ON(KVM_ARM64_SVE_VQ_MIN != 1);
 
+/*
+ * called by:
+ *   - target/arm/cpu64.c|70| <<arm_cpu_sve_finalize>> cpu->sve_vq.supported = kvm_arm_sve_get_vls(cpu);
+ */
 uint32_t kvm_arm_sve_get_vls(ARMCPU *cpu)
 {
     /* Only call this function if kvm_arm_sve_supported() returns true. */
@@ -1835,6 +1867,20 @@ uint32_t kvm_arm_sve_get_vls(ARMCPU *cpu)
 
         probed = true;
 
+	/*
+	 * 在以下调用kvm_arm_create_scratch_host_vcpu():
+	 *   - target/arm/arm-qmp-cmds.c|49| <<gic_cap_kvm_probe>> if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, NULL)) {
+	 *   - target/arm/kvm.c|303| <<kvm_arm_get_host_cpu_features>> if (!kvm_arm_create_scratch_host_vcpu(cpus_to_try, fdarray, &init)) {
+	 *   - target/arm/kvm.c|1838| <<kvm_arm_sve_get_vls>> if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, &init)) {
+	 *
+	 * 注释:
+	 * Create a scratch vcpu in its own VM of the type preferred by the host
+	 * kernel (as would be used for '-cpu host'), for purposes of probing it
+	 * for capabilities.
+	 *
+	 * Returns: true on success (and fdarray and init are filled in),
+	 * false on failure (and fdarray and init are not valid).
+	 */
         if (!kvm_arm_create_scratch_host_vcpu(NULL, fdarray, &init)) {
             error_report("failed to create scratch VCPU with SVE enabled");
             abort();
diff --git a/target/i386/cpu-sysemu.c b/target/i386/cpu-sysemu.c
index 227ac021f..224bc9019 100644
--- a/target/i386/cpu-sysemu.c
+++ b/target/i386/cpu-sysemu.c
@@ -150,6 +150,24 @@ out:
     visit_free(visitor);
 }
 
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ *
+ * called by:
+ *   - target/i386/cpu-sysemu.c|206| <<qmp_query_cpu_model_expansion>> xc = x86_cpu_from_model(model->name, model->props, "model.props", &err);
+ */
 /* Create X86CPU object according to model+props specification */
 static X86CPU *x86_cpu_from_model(const char *model, QObject *props,
                                   const char *props_arg_name, Error **errp)
@@ -172,6 +190,12 @@ static X86CPU *x86_cpu_from_model(const char *model, QObject *props,
         }
     }
 
+    /*
+     * called by:
+     *   - target/i386/cpu-sysemu.c|175| <<x86_cpu_from_model>> x86_cpu_expand_features(xc, &err);
+     *   - target/i386/cpu.c|6103| <<x86_cpu_class_check_missing_features>> x86_cpu_expand_features(xc, &err);
+     *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> x86_cpu_expand_features(cpu, &local_err);
+     */
     x86_cpu_expand_features(xc, &err);
     if (err) {
         goto out;
@@ -186,6 +210,21 @@ out:
     return xc;
 }
 
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ */
 CpuModelExpansionInfo *
 qmp_query_cpu_model_expansion(CpuModelExpansionType type,
                                                       CpuModelInfo *model,
diff --git a/target/i386/cpu.c b/target/i386/cpu.c
index 3725dbbc4..f1ece077b 100644
--- a/target/i386/cpu.c
+++ b/target/i386/cpu.c
@@ -1895,6 +1895,13 @@ uint32_t xsave_area_size(uint64_t mask, bool compacted)
     return ret;
 }
 
+/*
+ * called by:
+ *   - target/i386/cpu.c|6069| <<x86_cpu_class_check_missing_features>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+ *   - target/i386/cpu.c|7702| <<x86_cpu_filter_features>> prefix = accel_uses_host_cpuid()
+ *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> error_setg(&local_err, accel_uses_host_cpuid() ?
+ *   - target/i386/cpu.c|7896| <<x86_cpu_realizefn>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+ */
 static inline bool accel_uses_host_cpuid(void)
 {
     return kvm_enabled() || hvf_enabled();
@@ -1951,6 +1958,32 @@ static uint64_t x86_cpu_get_migratable_flags(X86CPU *cpu, FeatureWord w)
     return r;
 }
 
+/*
+ * called by:
+ *   - hw/i386/sgx.c|96| <<sgx_calc_host_epc_sections>> host_cpuid(0x12, i + 2, &eax, &ebx, &ecx, &edx);
+ *   - hw/i386/sgx.c|170| <<qmp_query_sgx_capabilities>> host_cpuid(0x7, 0, &eax, &ebx, &ecx, &edx);
+ *   - hw/i386/sgx.c|175| <<qmp_query_sgx_capabilities>> host_cpuid(0x12, 0, &eax, &ebx, &ecx, &edx);
+ *   - target/i386/cpu.c|6425| <<x86_cpu_get_cache_cpuid>> host_cpuid(0, 0, &level, &unused, &unused, &unused);
+ *   - target/i386/cpu.c|6430| <<x86_cpu_get_cache_cpuid>> host_cpuid(0x80000000, 0, &level, &unused, &unused, &unused);
+ *   - target/i386/cpu.c|6442| <<x86_cpu_get_cache_cpuid>> host_cpuid(func, index, eax, ebx, ecx, edx);
+ *   - target/i386/cpu.c|7031| <<cpu_x86_cpuid>> host_cpuid(index, 2, eax, ebx, ecx, edx);
+ *   - target/i386/host-cpu.c|23| <<host_cpu_phys_bits>> host_cpuid(0x80000000, 0, &eax, NULL, NULL, NULL);
+ *   - target/i386/host-cpu.c|25| <<host_cpu_phys_bits>> host_cpuid(0x80000008, 0, &eax, NULL, NULL, NULL);
+ *   - target/i386/host-cpu.c|99| <<host_cpu_fill_model_id>> host_cpuid(0x80000002 + i, 0, &eax, &ebx, &ecx, &edx);
+ *   - target/i386/host-cpu.c|112| <<host_cpu_vendor_fms>> host_cpuid(0x0, 0, &eax, &ebx, &ecx, &edx);
+ *   - target/i386/host-cpu.c|115| <<host_cpu_vendor_fms>> host_cpuid(0x1, 0, &eax, &ebx, &ecx, &edx);
+ *   - target/i386/host-cpu.c|135| <<host_cpu_instance_init>> host_cpuid(0, 0, NULL, &ebx, &ecx, &edx);
+ *   - target/i386/hvf/x86_cpuid.c|65| <<hvf_get_supported_cpuid>> host_cpuid(func, idx, &eax, &ebx, &ecx, &edx);
+ *   - target/i386/kvm/kvm-cpu.c|73| <<kvm_cpu_realizefn>> host_cpuid(5, 0, &cpu->mwait.eax, &cpu->mwait.ebx, &cpu->mwait.ecx, &cpu->mwait.edx);
+ *   - target/i386/kvm/kvm-cpu.c|146| <<kvm_cpu_xsave_init>> host_cpuid(0xd, i, &eax, &ebx, &ecx, &edx);
+ *   - target/i386/kvm/kvm.c|584| <<kvm_arch_get_supported_cpuid>> host_cpuid(7, 0, &unused, &ebx, &unused, &unused);
+ *   - target/i386/kvm/kvm.c|593| <<kvm_arch_get_supported_cpuid>> host_cpuid(7, 0, &unused, &unused, &unused, &edx);
+ *   - target/i386/kvm/kvm.c|607| <<kvm_arch_get_supported_cpuid>> host_cpuid(7, 1, &eax, &unused, &unused, &unused);
+ *   - target/i386/kvm/kvm.c|611| <<kvm_arch_get_supported_cpuid>> host_cpuid(7, 2, &unused, &unused, &unused, &edx);
+ *   - target/i386/kvm/kvm.c|6241| <<host_supports_vmx>> host_cpuid(1, 0, &unused, &unused, &ecx, &unused);
+ *   - target/i386/sev.c|620| <<sev_get_capabilities>> host_cpuid(0x8000001F, 0, NULL, &ebx, NULL, NULL);
+ *   - target/i386/sev.c|1449| <<sev_common_kvm_init>> host_cpuid(0x8000001F, 0, NULL, &ebx, NULL, NULL);
+ */
 void host_cpuid(uint32_t function, uint32_t count,
                 uint32_t *eax, uint32_t *ebx, uint32_t *ecx, uint32_t *edx)
 {
@@ -5471,11 +5504,27 @@ static char *feature_word_description(FeatureWordInfo *f, uint32_t bit)
     return NULL;
 }
 
+/*
+ * called by:
+ *   - target/i386/cpu.c|7927| <<x86_cpu_filter_features>> have_filtered_features = x86_cpu_have_filtered_features(cpu);
+ */
 static bool x86_cpu_have_filtered_features(X86CPU *cpu)
 {
     FeatureWord w;
 
     for (w = 0; w < FEATURE_WORDS; w++) {
+        /*
+	 * 在以下使用X86CPU->filtered_features (ArchCPU):
+         *   - target/i386/cpu.c|5486| <<x86_cpu_have_filtered_features>> if (cpu->filtered_features[w]) {
+         *   - target/i386/cpu.c|5517| <<mark_unavailable_features>> cpu->filtered_features[w] |= mask;
+         *   - target/i386/cpu.c|5945| <<x86_cpu_get_unavailable_features>> x86_cpu_list_feature_names(xc->filtered_features, &result);
+         *   - target/i386/cpu.c|6149| <<x86_cpu_class_check_missing_features>> x86_cpu_list_feature_names(xc->filtered_features, tail);
+         *   - target/i386/cpu.c|8454| <<x86_cpu_initfn>> object_property_add(obj, "filtered-features", "X86CPUFeatureWordInfo",
+         *                                    x86_cpu_get_feature_words,
+         *                                    NULL, NULL, (void *)cpu->filtered_features);
+         *
+         * Features that were filtered out because of missing host capabilities
+	 */
         if (cpu->filtered_features[w]) {
             return true;
         }
@@ -5484,6 +5533,34 @@ static bool x86_cpu_have_filtered_features(X86CPU *cpu)
     return false;
 }
 
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()      
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *  
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ *
+ *
+ * called by:
+ *   - target/i386/cpu.c|7593| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+ *            d->to.index, unavailable_features & env->user_features[d->to.index],
+ *            "This feature depends on other features that were not requested");
+ *   - target/i386/cpu.c|7630| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+ *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT,
+ *            "Intel PT need CPUID leaf 0x14, please set by \"-cpu ...,intel-pt=on,min-level=0x14\"");
+ *   - target/i386/cpu.c|7729| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+ *            w, unavailable_features, prefix);
+ *   - target/i386/cpu.c|7758| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+ *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT, prefix);
+ */
 static void mark_unavailable_features(X86CPU *cpu, FeatureWord w, uint64_t mask,
                                       const char *verbose_prefix)
 {
@@ -5491,9 +5568,29 @@ static void mark_unavailable_features(X86CPU *cpu, FeatureWord w, uint64_t mask,
     FeatureWordInfo *f = &feature_word_info[w];
     int i;
 
+    /*
+     * 只在以下使用X86CPU->force_features:
+     *   - target/i386/cpu.c|5545| <<mark_unavailable_features>> if (!cpu->force_features) {
+     *
+     * Force features to be enabled even if the host doesn't support them.
+     * This is dangerous and should be done only for testing CPUID
+     * compatibility.
+     */
     if (!cpu->force_features) {
         env->features[w] &= ~mask;
     }
+    /*
+     * 在以下使用X86CPU->filtered_features (ArchCPU):
+     *   - target/i386/cpu.c|5486| <<x86_cpu_have_filtered_features>> if (cpu->filtered_features[w]) {
+     *   - target/i386/cpu.c|5517| <<mark_unavailable_features>> cpu->filtered_features[w] |= mask;
+     *   - target/i386/cpu.c|5945| <<x86_cpu_get_unavailable_features>> x86_cpu_list_feature_names(xc->filtered_features, &result);
+     *   - target/i386/cpu.c|6149| <<x86_cpu_class_check_missing_features>> x86_cpu_list_feature_names(xc->filtered_features, tail);
+     *   - target/i386/cpu.c|8454| <<x86_cpu_initfn>> object_property_add(obj, "filtered-features", "X86CPUFeatureWordInfo",
+     *                                    x86_cpu_get_feature_words,
+     *                                    NULL, NULL, (void *)cpu->filtered_features);
+     *
+     * Features that were filtered out because of missing host capabilities
+     */
     cpu->filtered_features[w] |= mask;
 
     if (!verbose_prefix) {
@@ -5922,6 +6019,18 @@ static void x86_cpu_get_unavailable_features(Object *obj, Visitor *v,
     X86CPU *xc = X86_CPU(obj);
     strList *result = NULL;
 
+    /*
+     * 在以下使用X86CPU->filtered_features (ArchCPU):
+     *   - target/i386/cpu.c|5486| <<x86_cpu_have_filtered_features>> if (cpu->filtered_features[w]) {
+     *   - target/i386/cpu.c|5517| <<mark_unavailable_features>> cpu->filtered_features[w] |= mask;
+     *   - target/i386/cpu.c|5945| <<x86_cpu_get_unavailable_features>> x86_cpu_list_feature_names(xc->filtered_features, &result);
+     *   - target/i386/cpu.c|6149| <<x86_cpu_class_check_missing_features>> x86_cpu_list_feature_names(xc->filtered_features, tail);
+     *   - target/i386/cpu.c|8454| <<x86_cpu_initfn>> object_property_add(obj, "filtered-features", "X86CPUFeatureWordInfo",
+     *                                    x86_cpu_get_feature_words,
+     *                                    NULL, NULL, (void *)cpu->filtered_features);
+     *
+     * Features that were filtered out because of missing host capabilities
+     */
     x86_cpu_list_feature_names(xc->filtered_features, &result);
     visit_type_strList(v, "unavailable-features", &result, errp);
 }
@@ -6059,6 +6168,24 @@ void x86_cpu_list(void)
 /* Check for missing features that may prevent the CPU class from
  * running using the current machine and accelerator.
  */
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ *
+ * called by:
+ *   - target/i386/cpu.c|6135| <<x86_cpu_definition_entry>> x86_cpu_class_check_missing_features(cc, &info->unavailable_features);
+ */
 static void x86_cpu_class_check_missing_features(X86CPUClass *xcc,
                                                  strList **list)
 {
@@ -6066,6 +6193,13 @@ static void x86_cpu_class_check_missing_features(X86CPUClass *xcc,
     X86CPU *xc;
     Error *err = NULL;
 
+    /*
+     * called by:
+     *   - target/i386/cpu.c|6069| <<x86_cpu_class_check_missing_features>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+     *   - target/i386/cpu.c|7702| <<x86_cpu_filter_features>> prefix = accel_uses_host_cpuid()
+     *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> error_setg(&local_err, accel_uses_host_cpuid() ?
+     *   - target/i386/cpu.c|7896| <<x86_cpu_realizefn>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+     */
     if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
         QAPI_LIST_APPEND(tail, g_strdup("kvm"));
         return;
@@ -6073,6 +6207,12 @@ static void x86_cpu_class_check_missing_features(X86CPUClass *xcc,
 
     xc = X86_CPU(object_new_with_class(OBJECT_CLASS(xcc)));
 
+    /*
+     * called by:
+     *   - target/i386/cpu-sysemu.c|175| <<x86_cpu_from_model>> x86_cpu_expand_features(xc, &err);
+     *   - target/i386/cpu.c|6103| <<x86_cpu_class_check_missing_features>> x86_cpu_expand_features(xc, &err);
+     *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> x86_cpu_expand_features(cpu, &local_err);
+     */
     x86_cpu_expand_features(xc, &err);
     if (err) {
         /* Errors at x86_cpu_expand_features should never happen,
@@ -6083,13 +6223,53 @@ static void x86_cpu_class_check_missing_features(X86CPUClass *xcc,
         error_free(err);
     }
 
+    /*
+     * called by:
+     *   - target/i386/cpu.c|6086| <<x86_cpu_class_check_missing_features>> x86_cpu_filter_features(xc, false);
+     *   - target/i386/cpu.c|7863| <<x86_cpu_realizefn>> if (x86_cpu_filter_features(cpu, cpu->check_cpuid || cpu->enforce_cpuid)) {
+     *
+     * Finishes initialization of CPUID data, filters CPU feature
+     * words based on host availability of each feature.
+     *
+     * Returns: true if any flag is not supported by the host, false otherwise.
+     */
     x86_cpu_filter_features(xc, false);
 
+    /*
+     * 在以下使用X86CPU->filtered_features (ArchCPU):
+     *   - target/i386/cpu.c|5486| <<x86_cpu_have_filtered_features>> if (cpu->filtered_features[w]) {
+     *   - target/i386/cpu.c|5517| <<mark_unavailable_features>> cpu->filtered_features[w] |= mask;
+     *   - target/i386/cpu.c|5945| <<x86_cpu_get_unavailable_features>> x86_cpu_list_feature_names(xc->filtered_features, &result);
+     *   - target/i386/cpu.c|6149| <<x86_cpu_class_check_missing_features>> x86_cpu_list_feature_names(xc->filtered_features, tail);
+     *   - target/i386/cpu.c|8454| <<x86_cpu_initfn>> object_property_add(obj, "filtered-features", "X86CPUFeatureWordInfo",
+     *                                    x86_cpu_get_feature_words,
+     *                                    NULL, NULL, (void *)cpu->filtered_features);
+     *
+     * Features that were filtered out because of missing host capabilities
+     */
     x86_cpu_list_feature_names(xc->filtered_features, tail);
 
     object_unref(OBJECT(xc));
 }
 
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ *
+ * called by:
+ *   - target/i386/cpu.c|6161| <<qmp_query_cpu_definitions>> g_slist_foreach(list, x86_cpu_definition_entry, &cpu_list);
+ */
 static void x86_cpu_definition_entry(gpointer data, gpointer user_data)
 {
     ObjectClass *oc = data;
@@ -6121,6 +6301,21 @@ static void x86_cpu_definition_entry(gpointer data, gpointer user_data)
     QAPI_LIST_PREPEND(*cpu_list, info);
 }
 
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ */
 CpuDefinitionInfoList *qmp_query_cpu_definitions(Error **errp)
 {
     CpuDefinitionInfoList *cpu_list = NULL;
@@ -6210,6 +6405,17 @@ uint64_t x86_cpu_get_supported_feature_word(X86CPU *cpu, FeatureWord w)
     return r;
 }
 
+/*
+ * called by:
+ *   - target/i386/cpu.c|6718| <<cpu_x86_cpuid>> x86_cpu_get_supported_cpuid(0xA, count, eax, ebx, ecx, edx);
+ *   - target/i386/cpu.c|6758| <<cpu_x86_cpuid>> x86_cpu_get_supported_cpuid(0x1C, 0, eax, ebx, ecx, edx);
+ *   - target/i386/cpu.c|6809| <<cpu_x86_cpuid>> x86_cpu_get_supported_cpuid(0xD, count, eax, ebx, ecx, edx);
+ *   - target/i386/cpu.c|6861| <<cpu_x86_cpuid>> x86_cpu_get_supported_cpuid(0x12, count, eax, ebx, ecx, edx);
+ *   - target/i386/cpu.c|7564| <<x86_cpu_expand_features>> x86_cpu_get_supported_cpuid(0x24, 0, &eax, &ebx, &ecx, &edx);
+ *   - target/i386/cpu.c|7710| <<x86_cpu_filter_features>> x86_cpu_get_supported_cpuid(0x14, 0, &eax_0, &ebx_0, &ecx_0, &edx_0);
+ *   - target/i386/cpu.c|7712| <<x86_cpu_filter_features>> x86_cpu_get_supported_cpuid(0x14, 1, &eax_1, &ebx_1, &ecx_1, &edx_1);
+ *   - target/i386/cpu.c|7737| <<x86_cpu_filter_features>> x86_cpu_get_supported_cpuid(0x24, 0, &eax_0, &ebx_0, &ecx_0, &edx_0);
+ */
 static void x86_cpu_get_supported_cpuid(uint32_t func, uint32_t index,
                                         uint32_t *eax, uint32_t *ebx,
                                         uint32_t *ecx, uint32_t *edx)
@@ -6489,6 +6695,34 @@ uint32_t cpu_x86_virtual_addr_width(CPUX86State *env)
     }
 }
 
+/*
+ * called by:
+ *   - hw/i386/fw_cfg.c|183| <<fw_cfg_build_feature_control>> cpu_x86_cpuid(env, 1, 0, &unused, &unused, &ecx, &edx);
+ *   - hw/i386/fw_cfg.c|195| <<fw_cfg_build_feature_control>> cpu_x86_cpuid(env, 0x7, 0, &unused, &ebx, &ecx, &unused);
+ *   - target/i386/hvf/hvf.c|411| <<hvf_cpu_x86_cpuid>> cpu_x86_cpuid(env, index, count, eax, ebx, ecx, edx);
+ *   - target/i386/kvm/kvm.c|1836| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, 0, 0, &limit, &unused, &unused, &unused);
+ *   - target/i386/kvm/kvm.c|1850| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|1864| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|1881| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|1911| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|1933| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|1944| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|1951| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|1966| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, 0x0a, 0, &eax, &unused, &unused, &edx);
+ *   - target/i386/kvm/kvm.c|1990| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, 0x80000000, 0, &limit, &unused, &unused, &unused);
+ *   - target/i386/kvm/kvm.c|2006| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|2020| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm/kvm.c|2034| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, 0xC0000000, 0, &limit, &unused, &unused, &unused);
+ *   - target/i386/kvm/kvm.c|2045| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/tcg/fpu_helper.c|3191| <<helper_xsetbv>> cpu_x86_cpuid(env, 0x0d, 0, &ena_lo, &dummy, &dummy, &ena_hi);
+ *   - target/i386/tcg/misc_helper.c|56| <<helper_cpuid>> cpu_x86_cpuid(env, (uint32_t)env->regs[R_EAX], (uint32_t)env->regs[R_ECX],
+ *   - target/i386/whpx/whpx-all.c|1946| <<whpx_vcpu_run>> cpu_x86_cpuid(env, cpuid_fn, 0, (UINT32 *)&rax, (UINT32 *)&rbx,
+ *
+ * typedef uint64_t FeatureWordArray[FEATURE_WORDS];
+ *
+ * CPUX86State *env:
+ * -> FeatureWordArray features;
+ */
 void cpu_x86_cpuid(CPUX86State *env, uint32_t index, uint32_t count,
                    uint32_t *eax, uint32_t *ebx,
                    uint32_t *ecx, uint32_t *edx)
@@ -6550,6 +6784,10 @@ void cpu_x86_cpuid(CPUX86State *env, uint32_t index, uint32_t count,
             *edx |= CPUID_HT;
         }
         if (!cpu->enable_pmu) {
+            /*
+	     * 注释:
+	     * PDCM: perfmon and debug                 = true
+	     */
             *ecx &= ~CPUID_EXT_PDCM;
         }
         break;
@@ -7494,6 +7732,26 @@ static void x86_cpu_enable_xsave_components(X86CPU *cpu)
 /* Expand CPU configuration data, based on configured features
  * and host/accelerator capabilities when appropriate.
  */
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ *
+ * called by:
+ *   - target/i386/cpu-sysemu.c|175| <<x86_cpu_from_model>> x86_cpu_expand_features(xc, &err);
+ *   - target/i386/cpu.c|6103| <<x86_cpu_class_check_missing_features>> x86_cpu_expand_features(xc, &err);
+ *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> x86_cpu_expand_features(cpu, &local_err);
+ */
 void x86_cpu_expand_features(X86CPU *cpu, Error **errp)
 {
     CPUX86State *env = &cpu->env;
@@ -7543,6 +7801,19 @@ void x86_cpu_expand_features(X86CPU *cpu, Error **errp)
         if (!(env->features[d->from.index] & d->from.mask)) {
             uint64_t unavailable_features = env->features[d->to.index] & d->to.mask;
 
+            /*
+	     * called by:
+             *   - target/i386/cpu.c|7593| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+             *            d->to.index, unavailable_features & env->user_features[d->to.index],
+             *            "This feature depends on other features that were not requested");
+             *   - target/i386/cpu.c|7630| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+             *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT,
+             *            "Intel PT need CPUID leaf 0x14, please set by \"-cpu ...,intel-pt=on,min-level=0x14\"");
+             *   - target/i386/cpu.c|7729| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+             *            w, unavailable_features, prefix);
+             *   - target/i386/cpu.c|7758| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+             *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT, prefix);
+	     */
             /* Not an error unless the dependent feature was added explicitly.  */
             mark_unavailable_features(cpu, d->to.index,
                                       unavailable_features & env->user_features[d->to.index],
@@ -7581,6 +7852,19 @@ void x86_cpu_expand_features(X86CPU *cpu, Error **errp)
             if (cpu->intel_pt_auto_level) {
                 x86_cpu_adjust_level(cpu, &cpu->env.cpuid_min_level, 0x14);
             } else if (cpu->env.cpuid_min_level < 0x14) {
+                /*
+		 * called by:
+                 *   - target/i386/cpu.c|7593| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+                 *            d->to.index, unavailable_features & env->user_features[d->to.index],
+                 *            "This feature depends on other features that were not requested");
+                 *   - target/i386/cpu.c|7630| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+                 *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT,
+                 *            "Intel PT need CPUID leaf 0x14, please set by \"-cpu ...,intel-pt=on,min-level=0x14\"");
+                 *   - target/i386/cpu.c|7729| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+                 *            w, unavailable_features, prefix);
+                 *   - target/i386/cpu.c|7758| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+                 *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT, prefix);
+		 */
                 mark_unavailable_features(cpu, FEAT_7_0_EBX,
                     CPUID_7_0_EBX_INTEL_PT,
                     "Intel PT need CPUID leaf 0x14, please set by \"-cpu ...,intel-pt=on,min-level=0x14\"");
@@ -7649,6 +7933,30 @@ void x86_cpu_expand_features(X86CPU *cpu, Error **errp)
  *
  * Returns: true if any flag is not supported by the host, false otherwise.
  */
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ *
+ * called by:
+ *   - target/i386/cpu.c|6086| <<x86_cpu_class_check_missing_features>> x86_cpu_filter_features(xc, false);
+ *   - target/i386/cpu.c|7863| <<x86_cpu_realizefn>> if (x86_cpu_filter_features(cpu, cpu->check_cpuid || cpu->enforce_cpuid)) {
+ *
+ * Finishes initialization of CPUID data, filters CPU feature
+ * words based on host availability of each feature.
+ *  
+ * Returns: true if any flag is not supported by the host, false otherwise.
+ */
 static bool x86_cpu_filter_features(X86CPU *cpu, bool verbose)
 {
     CPUX86State *env = &cpu->env;
@@ -7660,6 +7968,13 @@ static bool x86_cpu_filter_features(X86CPU *cpu, bool verbose)
     uint32_t eax_1, ebx_1, ecx_1, edx_1;
 
     if (verbose) {
+        /*
+	 * called by:
+	 *   - target/i386/cpu.c|6069| <<x86_cpu_class_check_missing_features>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+	 *   - target/i386/cpu.c|7702| <<x86_cpu_filter_features>> prefix = accel_uses_host_cpuid()
+	 *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> error_setg(&local_err, accel_uses_host_cpuid() ?
+	 *   - target/i386/cpu.c|7896| <<x86_cpu_realizefn>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+	 */
         prefix = accel_uses_host_cpuid()
                  ? "host doesn't support requested feature"
                  : "TCG doesn't support requested feature";
@@ -7670,6 +7985,19 @@ static bool x86_cpu_filter_features(X86CPU *cpu, bool verbose)
             x86_cpu_get_supported_feature_word(NULL, w);
         uint64_t requested_features = env->features[w];
         uint64_t unavailable_features = requested_features & ~host_feat;
+        /*
+	 * called by:
+         *   - target/i386/cpu.c|7593| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+         *            d->to.index, unavailable_features & env->user_features[d->to.index],
+         *            "This feature depends on other features that were not requested");
+         *   - target/i386/cpu.c|7630| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+         *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT,
+         *            "Intel PT need CPUID leaf 0x14, please set by \"-cpu ...,intel-pt=on,min-level=0x14\"");
+         *   - target/i386/cpu.c|7729| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+         *            w, unavailable_features, prefix);
+         *   - target/i386/cpu.c|7758| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+         *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT, prefix);
+	 */
         mark_unavailable_features(cpu, w, unavailable_features, prefix);
     }
 
@@ -7694,6 +8022,19 @@ static bool x86_cpu_filter_features(X86CPU *cpu, bool verbose)
                 (INTEL_PT_PSB_BITMAP | INTEL_PT_CYCLE_BITMAP)) ||
            ((ecx_0 & CPUID_14_0_ECX_LIP) !=
                 (env->features[FEAT_14_0_ECX] & CPUID_14_0_ECX_LIP))) {
+            /*
+	     * called by:
+	     *   - target/i386/cpu.c|7593| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+	     *            d->to.index, unavailable_features & env->user_features[d->to.index],
+             *            "This feature depends on other features that were not requested");
+             *   - target/i386/cpu.c|7630| <<x86_cpu_expand_features>> mark_unavailable_features(cpu,
+             *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT,
+             *            "Intel PT need CPUID leaf 0x14, please set by \"-cpu ...,intel-pt=on,min-level=0x14\"");
+	     *   - target/i386/cpu.c|7729| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+             *            w, unavailable_features, prefix);
+             *   - target/i386/cpu.c|7758| <<x86_cpu_filter_features>> mark_unavailable_features(cpu,
+	     *            FEAT_7_0_EBX, CPUID_7_0_EBX_INTEL_PT, prefix);
+	     */
             /*
              * Processor Trace capabilities aren't configurable, so if the
              * host can't emulate the capabilities we report on
@@ -7755,6 +8096,21 @@ static void x86_cpu_hyperv_realize(X86CPU *cpu)
     cpu->hyperv_limits[2] = 0;
 }
 
+/*
+ * x86_cpu_realizefn()
+ * -> x86_cpu_expand_features()
+ * -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_definitions()
+ * -> x86_cpu_definition_entry()
+ *    -> x86_cpu_class_check_missing_features()
+ *       -> x86_cpu_expand_features()
+ *       -> x86_cpu_filter_features()
+ *
+ * qmp_query_cpu_model_expansion()
+ * -> x86_cpu_from_model()
+ *    -> x86_cpu_expand_features()
+ */
 static void x86_cpu_realizefn(DeviceState *dev, Error **errp)
 {
     CPUState *cs = CPU(dev);
@@ -7780,6 +8136,26 @@ static void x86_cpu_realizefn(DeviceState *dev, Error **errp)
      */
     x86_cpu_hyperv_realize(cpu);
 
+    /*
+     * x86_cpu_realizefn()
+     * -> x86_cpu_expand_features()
+     * -> x86_cpu_filter_features()
+     *
+     * qmp_query_cpu_definitions()
+     * -> x86_cpu_definition_entry()      
+     *    -> x86_cpu_class_check_missing_features()
+     *       -> x86_cpu_expand_features()
+     *       -> x86_cpu_filter_features()
+     *  
+     * qmp_query_cpu_model_expansion()
+     * -> x86_cpu_from_model()
+     *    -> x86_cpu_expand_features()
+     *
+     * called by:
+     *   - target/i386/cpu-sysemu.c|175| <<x86_cpu_from_model>> x86_cpu_expand_features(xc, &err);
+     *   - target/i386/cpu.c|6103| <<x86_cpu_class_check_missing_features>> x86_cpu_expand_features(xc, &err);
+     *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> x86_cpu_expand_features(cpu, &local_err);
+     */
     x86_cpu_expand_features(cpu, &local_err);
     if (local_err) {
         goto out;
@@ -7821,8 +8197,39 @@ static void x86_cpu_realizefn(DeviceState *dev, Error **errp)
         }
     }
 
+    /*
+     * x86_cpu_realizefn()
+     * -> x86_cpu_expand_features()
+     * -> x86_cpu_filter_features()
+     *
+     * qmp_query_cpu_definitions()
+     * -> x86_cpu_definition_entry()      
+     *    -> x86_cpu_class_check_missing_features()
+     *       -> x86_cpu_expand_features()
+     *       -> x86_cpu_filter_features()
+     *  
+     * qmp_query_cpu_model_expansion()
+     * -> x86_cpu_from_model()
+     *    -> x86_cpu_expand_features()
+     *
+     * called by:
+     *   - target/i386/cpu.c|6086| <<x86_cpu_class_check_missing_features>> x86_cpu_filter_features(xc, false);
+     *   - target/i386/cpu.c|7863| <<x86_cpu_realizefn>> if (x86_cpu_filter_features(cpu, cpu->check_cpuid || cpu->enforce_cpuid)) {
+     *
+     * Finishes initialization of CPUID data, filters CPU feature
+     * words based on host availability of each feature.
+     *
+     * Returns: true if any flag is not supported by the host, false otherwise.
+     */
     if (x86_cpu_filter_features(cpu, cpu->check_cpuid || cpu->enforce_cpuid)) {
         if (cpu->enforce_cpuid) {
+            /*
+	     * 在以下调用accel_uses_host_cpuid():
+	     *   - target/i386/cpu.c|6069| <<x86_cpu_class_check_missing_features>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+	     *   - target/i386/cpu.c|7702| <<x86_cpu_filter_features>> prefix = accel_uses_host_cpuid()
+	     *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> error_setg(&local_err, accel_uses_host_cpuid() ?
+	     *   - target/i386/cpu.c|7896| <<x86_cpu_realizefn>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+	     */
             error_setg(&local_err,
                        accel_uses_host_cpuid() ?
                        "Host doesn't support requested features" :
@@ -7842,6 +8249,28 @@ static void x86_cpu_realizefn(DeviceState *dev, Error **errp)
 
     x86_cpu_set_sgxlepubkeyhash(env);
 
+    /*
+     * called by:
+     *   - target/alpha/cpu.c|102| <<alpha_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/arm/cpu.c|2084| <<arm_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/avr/cpu.c|114| <<avr_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/hexagon/cpu.c|302| <<hexagon_cpu_realize>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/hppa/cpu.c|172| <<hppa_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/i386/cpu.c|8228| <<x86_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/loongarch/cpu.c|601| <<loongarch_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/m68k/cpu.c|325| <<m68k_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/microblaze/cpu.c|236| <<mb_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/mips/cpu.c|477| <<mips_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/openrisc/cpu.c|156| <<openrisc_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/ppc/cpu_init.c|6888| <<ppc_cpu_realize>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/riscv/cpu.c|1169| <<riscv_cpu_realize>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/rx/cpu.c|127| <<rx_cpu_realize>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/s390x/cpu.c|263| <<s390_cpu_realizefn>> cpu_exec_realizefn(cs, &err);
+     *   - target/sh4/cpu.c|215| <<superh_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/sparc/cpu.c|818| <<sparc_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/tricore/cpu.c|91| <<tricore_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     *   - target/xtensa/cpu.c|170| <<xtensa_cpu_realizefn>> cpu_exec_realizefn(cs, &local_err);
+     */
     /*
      * note: the call to the framework needs to happen after feature expansion,
      * but before the checks/modifications to ucode_rev, mwait, phys_bits.
@@ -7854,6 +8283,13 @@ static void x86_cpu_realizefn(DeviceState *dev, Error **errp)
         return;
     }
 
+    /*
+     * called by:
+     *   - target/i386/cpu.c|6069| <<x86_cpu_class_check_missing_features>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+     *   - target/i386/cpu.c|7702| <<x86_cpu_filter_features>> prefix = accel_uses_host_cpuid()
+     *   - target/i386/cpu.c|7866| <<x86_cpu_realizefn>> error_setg(&local_err, accel_uses_host_cpuid() ?
+     *   - target/i386/cpu.c|7896| <<x86_cpu_realizefn>> if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
+     */
     if (xcc->host_cpuid_required && !accel_uses_host_cpuid()) {
         g_autofree char *name = x86_cpu_class_get_model_name(xcc);
         error_setg(&local_err, "CPU model '%s' requires KVM or HVF", name);
@@ -7992,6 +8428,28 @@ static void x86_cpu_realizefn(DeviceState *dev, Error **errp)
     mce_init(cpu);
 
     x86_cpu_gdb_init(cs);
+    /*
+     * called by:
+     *   - target/alpha/cpu.c|108| <<alpha_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/arm/cpu.c|2606| <<arm_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/avr/cpu.c|119| <<avr_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/hexagon/cpu.c|312| <<hexagon_cpu_realize>> qemu_init_vcpu(cs);
+     *   - target/hppa/cpu.c|178| <<hppa_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/i386/cpu.c|8379| <<x86_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/loongarch/cpu.c|610| <<loongarch_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/m68k/cpu.c|334| <<m68k_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/microblaze/cpu.c|248| <<mb_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/mips/cpu.c|492| <<mips_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/openrisc/cpu.c|162| <<openrisc_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/ppc/cpu_init.c|6912| <<ppc_cpu_realize>> qemu_init_vcpu(cs);
+     *   - target/riscv/cpu.c|1189| <<riscv_cpu_realize>> qemu_init_vcpu(cs);
+     *   - target/rx/cpu.c|133| <<rx_cpu_realize>> qemu_init_vcpu(cs);
+     *   - target/s390x/cpu.c|272| <<s390_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/sh4/cpu.c|222| <<superh_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/sparc/cpu.c|824| <<sparc_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/tricore/cpu.c|113| <<tricore_cpu_realizefn>> qemu_init_vcpu(cs);
+     *   - target/xtensa/cpu.c|178| <<xtensa_cpu_realizefn>> qemu_init_vcpu(cs);
+     */
     qemu_init_vcpu(cs);
 
     /*
@@ -8062,6 +8520,14 @@ static void x86_cpu_get_bit_prop(Object *obj, Visitor *v, const char *name,
     visit_type_bool(v, name, &value, errp);
 }
 
+/*
+ * 在以下使用x86_cpu_set_bit_prop():
+ *   -  target/i386/cpu.c|8156| <<x86_cpu_register_bit_prop>> object_class_property_add(oc,
+ *                                     prop_name, "bool",
+ *                                     x86_cpu_get_bit_prop,
+ *                                     x86_cpu_set_bit_prop,
+ *                                     NULL, fp);
+ */
 static void x86_cpu_set_bit_prop(Object *obj, Visitor *v, const char *name,
                                  void *opaque, Error **errp)
 {
@@ -8190,6 +8656,18 @@ static void x86_cpu_initfn(Object *obj)
     object_property_add(obj, "feature-words", "X86CPUFeatureWordInfo",
                         x86_cpu_get_feature_words,
                         NULL, NULL, (void *)env->features);
+    /*
+     * 在以下使用X86CPU->filtered_features (ArchCPU):
+     *   - target/i386/cpu.c|5486| <<x86_cpu_have_filtered_features>> if (cpu->filtered_features[w]) {
+     *   - target/i386/cpu.c|5517| <<mark_unavailable_features>> cpu->filtered_features[w] |= mask;
+     *   - target/i386/cpu.c|5945| <<x86_cpu_get_unavailable_features>> x86_cpu_list_feature_names(xc->filtered_features, &result);
+     *   - target/i386/cpu.c|6149| <<x86_cpu_class_check_missing_features>> x86_cpu_list_feature_names(xc->filtered_features, tail);
+     *   - target/i386/cpu.c|8454| <<x86_cpu_initfn>> object_property_add(obj, "filtered-features", "X86CPUFeatureWordInfo",
+     *                                    x86_cpu_get_feature_words,
+     *                                    NULL, NULL, (void *)cpu->filtered_features);
+     *
+     * Features that were filtered out because of missing host capabilities
+     */
     object_property_add(obj, "filtered-features", "X86CPUFeatureWordInfo",
                         x86_cpu_get_feature_words,
                         NULL, NULL, (void *)cpu->filtered_features);
diff --git a/target/i386/cpu.h b/target/i386/cpu.h
index 4c239a697..204c16053 100644
--- a/target/i386/cpu.h
+++ b/target/i386/cpu.h
@@ -1863,6 +1863,12 @@ typedef struct CPUArchState {
     struct {} end_init_save;
 
     uint64_t system_time_msr;
+    /*
+     * 在以下使用CPUX86State->wall_clock_msr:
+     *   - target/i386/machine.c|1740| <<global>> VMSTATE_UINT64(env.wall_clock_msr, X86CPU),
+     *   - target/i386/kvm/kvm.c|3965| <<kvm_put_msrs>> kvm_msr_entry_add(cpu, MSR_KVM_WALL_CLOCK, env->wall_clock_msr);
+     *   - target/i386/kvm/kvm.c|4708| <<kvm_get_msrs>> case MSR_KVM_SYSTEM_TIME: env->wall_clock_msr = msrs[i].data;
+     */
     uint64_t wall_clock_msr;
     uint64_t steal_time_msr;
     uint64_t async_pf_en_msr;
@@ -2070,6 +2076,11 @@ struct ArchCPU {
     CPUState parent_obj;
 
     CPUX86State env;
+    /*
+     * 在以下使用X86CPU->vmsentry (ArchCPU):
+     *   - target/i386/kvm/kvm.c|2319| <<kvm_arch_init_vcpu>> cpu->vmsentry = qemu_add_vm_change_state_handler(cpu_update_state, env);
+     *   - target/i386/kvm/kvm.c|2418| <<kvm_arch_destroy_vcpu>> qemu_del_vm_change_state_handler(cpu->vmsentry);
+     */
     VMChangeStateEntry *vmsentry;
 
     uint64_t ucode_rev;
@@ -2098,6 +2109,10 @@ struct ArchCPU {
      * This is dangerous and should be done only for testing CPUID
      * compatibility.
      */
+    /*
+     * 只在以下使用X86CPU->force_features:
+     *   - target/i386/cpu.c|5545| <<mark_unavailable_features>> if (!cpu->force_features) {
+     */
     bool force_features;
     bool expose_kvm;
     bool expose_tcg;
@@ -2123,6 +2138,18 @@ struct ArchCPU {
     } mwait;
 
     /* Features that were filtered out because of missing host capabilities */
+    /*
+     * 在以下使用X86CPU->filtered_features (ArchCPU):
+     *   - target/i386/cpu.c|5486| <<x86_cpu_have_filtered_features>> if (cpu->filtered_features[w]) {
+     *   - target/i386/cpu.c|5517| <<mark_unavailable_features>> cpu->filtered_features[w] |= mask;
+     *   - target/i386/cpu.c|5945| <<x86_cpu_get_unavailable_features>> x86_cpu_list_feature_names(xc->filtered_features, &result);
+     *   - target/i386/cpu.c|6149| <<x86_cpu_class_check_missing_features>> x86_cpu_list_feature_names(xc->filtered_features, tail);
+     *   - target/i386/cpu.c|8454| <<x86_cpu_initfn>> object_property_add(obj, "filtered-features", "X86CPUFeatureWordInfo",
+     *                                    x86_cpu_get_feature_words,
+     *                                    NULL, NULL, (void *)cpu->filtered_features);
+     *
+     * Features that were filtered out because of missing host capabilities
+     */
     FeatureWordArray filtered_features;
 
     /* Enable PMU CPUID bits. This can't be enabled by default yet because
@@ -2130,6 +2157,20 @@ struct ArchCPU {
      * bits returned by GET_SUPPORTED_CPUID (that depend on host CPU and kernel
      * capabilities) directly to the guest.
      */
+    /*
+     * 在以下使用X86CPU->enable_pmu:
+     *   - target/i386/cpu.c|8876| <<global>> DEFINE_PROP_BOOL("pmu", X86CPU, enable_pmu, false),
+     *   - target/i386/cpu.c|6760| <<cpu_x86_cpuid>> if (!cpu->enable_pmu) {
+     *   - target/i386/cpu.c|6897| <<cpu_x86_cpuid>> if (cpu->enable_pmu) {
+     *   - target/i386/cpu.c|6937| <<cpu_x86_cpuid>> if (cpu->enable_pmu && (env->features[FEAT_7_0_EDX] & CPUID_7_0_EDX_ARCH_LBR)) {
+     *   - target/i386/cpu.c|6980| <<cpu_x86_cpuid>> if (kvm_enabled() && cpu->enable_pmu &&
+     *   - target/i386/cpu.c|6987| <<cpu_x86_cpuid>> } else if (count == 0xf && cpu->enable_pmu
+     *   - target/i386/cpu.c|7316| <<cpu_x86_cpuid>> if (kvm_enabled() && cpu->enable_pmu &&
+     *   - target/i386/cpu.c|8158| <<x86_cpu_realizefn>> if (!cpu->enable_pmu) {
+     *   - target/i386/kvm/kvm.c|3921| <<kvm_init_msrs>> if (has_msr_perf_capabs && cpu->enable_pmu) {
+     *   - target/i386/kvm/kvm.c|4232| <<kvm_put_msrs>> if (kvm_enabled() && cpu->enable_pmu &&
+     *   - target/i386/kvm/kvm.c|4650| <<kvm_get_msrs>> if (kvm_enabled() && cpu->enable_pmu &&
+     */
     bool enable_pmu;
 
     /*
diff --git a/target/i386/host-cpu.c b/target/i386/host-cpu.c
index 03b9d1b16..ff722702b 100644
--- a/target/i386/host-cpu.c
+++ b/target/i386/host-cpu.c
@@ -105,6 +105,12 @@ static int host_cpu_fill_model_id(char *str)
     return 0;
 }
 
+/*
+ * 在以下使用host_cpu_vendor_fms():
+ *   - target/i386/host-cpu.c|150| <<host_cpu_max_instance_init>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+ *   - target/i386/kvm/kvm.c|390| <<host_tsx_broken>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+ *   - target/i386/kvm/vmsr_energy.c|35| <<is_host_cpu_intel>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+ */
 void host_cpu_vendor_fms(char *vendor, int *family, int *model, int *stepping)
 {
     uint32_t eax, ebx, ecx, edx;
@@ -147,6 +153,12 @@ void host_cpu_max_instance_init(X86CPU *cpu)
     /* Use max host physical address bits if -cpu max option is applied */
     object_property_set_bool(OBJECT(cpu), "host-phys-bits", true, &error_abort);
 
+    /*
+     * 在以下使用host_cpu_vendor_fms():
+     *   - target/i386/host-cpu.c|150| <<host_cpu_max_instance_init>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     *   - target/i386/kvm/kvm.c|390| <<host_tsx_broken>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     *   - target/i386/kvm/vmsr_energy.c|35| <<is_host_cpu_intel>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     */
     host_cpu_vendor_fms(vendor, &family, &model, &stepping);
     host_cpu_fill_model_id(model_id);
 
diff --git a/target/i386/kvm/kvm.c b/target/i386/kvm/kvm.c
index 8e17942c3..18d1c965b 100644
--- a/target/i386/kvm/kvm.c
+++ b/target/i386/kvm/kvm.c
@@ -363,6 +363,10 @@ static struct kvm_cpuid2 *try_get_cpuid(KVMState *s, int max)
 /* Run KVM_GET_SUPPORTED_CPUID ioctl(), allocating a buffer large enough
  * for all entries.
  */
+/*
+ * called by:
+ *   - target/i386/kvm/kvm.c|442| <<kvm_arch_get_supported_cpuid>> cpuid = get_supported_cpuid(s);
+ */
 static struct kvm_cpuid2 *get_supported_cpuid(KVMState *s)
 {
     struct kvm_cpuid2 *cpuid;
@@ -383,6 +387,12 @@ static bool host_tsx_broken(void)
     int family, model, stepping;\
     char vendor[CPUID_VENDOR_SZ + 1];
 
+    /*
+     * 在以下使用host_cpu_vendor_fms():
+     *   - target/i386/host-cpu.c|150| <<host_cpu_max_instance_init>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     *   - target/i386/kvm/kvm.c|390| <<host_tsx_broken>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     *   - target/i386/kvm/vmsr_energy.c|35| <<is_host_cpu_intel>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     */
     host_cpu_vendor_fms(vendor, &family, &model, &stepping);
 
     /* Check if we are running on a Haswell host known to have broken TSX */
@@ -416,6 +426,31 @@ static uint32_t cpuid_entry_get_reg(struct kvm_cpuid_entry2 *entry, int reg)
 
 /* Find matching entry for function/index on kvm_cpuid2 struct
  */
+/*
+ * struct kvm_cpuid_entry2 {
+ *     __u32 function;
+ *     __u32 index;                              
+ *     __u32 flags;                              
+ *     __u32 eax;
+ *     __u32 ebx;
+ *     __u32 ecx; 
+ *     __u32 edx;
+ *     __u32 padding[3];
+ * };
+ *
+ * 在以下调用cpuid_find_entry():
+ *   - target/i386/kvm/kvm.c|476| <<kvm_arch_get_supported_cpuid>> struct kvm_cpuid_entry2 *entry = cpuid_find_entry(cpuid, function, index);
+ *   - target/i386/kvm/kvm.c|1347| <<hv_cpuid_get_host>> entry = cpuid_find_entry(cpuid, func, 0);
+ *   - target/i386/kvm/kvm.c|2334| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 1, 0);
+ *   - target/i386/kvm/kvm.c|2340| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 7, 0);
+ *   - target/i386/kvm/kvm.c|2377| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, kvm_base, 0);
+ *
+ * struct kvm_cpuid2 {
+ *     __u32 nent;
+ *     __u32 padding;
+ *     struct kvm_cpuid_entry2 entries[];
+ * };
+ */
 static struct kvm_cpuid_entry2 *cpuid_find_entry(struct kvm_cpuid2 *cpuid,
                                                  uint32_t function,
                                                  uint32_t index)
@@ -424,6 +459,24 @@ static struct kvm_cpuid_entry2 *cpuid_find_entry(struct kvm_cpuid2 *cpuid,
     for (i = 0; i < cpuid->nent; ++i) {
         if (cpuid->entries[i].function == function &&
             cpuid->entries[i].index == index) {
+            /*
+	     * struct kvm_cpuid2 {
+	     *     __u32 nent;
+	     *     __u32 padding;
+	     *     struct kvm_cpuid_entry2 entries[];
+	     * };
+	     *
+	     * struct kvm_cpuid_entry2 {
+	     *     __u32 function;
+	     *     __u32 index;
+	     *     __u32 flags;
+	     *     __u32 eax;
+	     *     __u32 ebx;
+	     *     __u32 ecx;
+	     *     __u32 edx;
+	     *     __u32 padding[3];
+	     * };
+	     */
             return &cpuid->entries[i];
         }
     }
@@ -431,6 +484,31 @@ static struct kvm_cpuid_entry2 *cpuid_find_entry(struct kvm_cpuid2 *cpuid,
     return NULL;
 }
 
+/*
+ * called by:
+ *   - target/i386/cpu.c|6144| <<x86_cpu_get_supported_feature_word>> r = kvm_arch_get_supported_cpuid(kvm_state, wi->cpuid.eax,
+ *                                wi->cpuid.ecx, wi->cpuid.reg);
+ *   - target/i386/cpu.c|6218| <<x86_cpu_get_supported_cpuid>> *eax = kvm_arch_get_supported_cpuid(kvm_state, func, index, R_EAX);
+ *   - target/i386/cpu.c|6219| <<x86_cpu_get_supported_cpuid>> *ebx = kvm_arch_get_supported_cpuid(kvm_state, func, index, R_EBX);
+ *   - target/i386/cpu.c|6220| <<x86_cpu_get_supported_cpuid>> *ecx = kvm_arch_get_supported_cpuid(kvm_state, func, index, R_ECX);
+ *   - target/i386/cpu.c|6221| <<x86_cpu_get_supported_cpuid>> *edx = kvm_arch_get_supported_cpuid(kvm_state, func, index, R_EDX);
+ *   - target/i386/cpu.c|7139| <<cpu_x86_cpuid>> *ebx |= kvm_arch_get_supported_cpuid(cs->kvm_state, index, count, R_EBX) & 0xf;
+ *   - target/i386/kvm/kvm-cpu.c|25| <<kvm_set_guest_phys_bits>> eax = kvm_arch_get_supported_cpuid(cs->kvm_state, 0x80000008, 0, R_EAX);
+ *   - target/i386/kvm/kvm-cpu.c|118| <<kvm_cpu_max_instance_init>> kvm_arch_get_supported_cpuid(s, 0x0, 0, R_EAX);
+ *   - target/i386/kvm/kvm-cpu.c|120| <<kvm_cpu_max_instance_init>> kvm_arch_get_supported_cpuid(s, 0x80000000, 0, R_EAX);
+ *   - target/i386/kvm/kvm-cpu.c|122| <<kvm_cpu_max_instance_init>> kvm_arch_get_supported_cpuid(s, 0xC0000000, 0, R_EAX);
+ *   - target/i386/kvm/kvm.c|558| <<kvm_arch_get_supported_cpuid>> cpuid_1_edx = kvm_arch_get_supported_cpuid(s, 1, 0, R_EDX);
+ *   - target/i386/kvm/kvm.c|622| <<kvm_arch_get_supported_msr_feature>> if (kvm_arch_get_supported_cpuid(s, 0xD, 1, R_ECX) &
+ *   - target/i386/kvm/kvm.c|626| <<kvm_arch_get_supported_msr_feature>> if (kvm_arch_get_supported_cpuid(s, 1, 0, R_ECX) &
+ *   - target/i386/kvm/kvm.c|630| <<kvm_arch_get_supported_msr_feature>> if (kvm_arch_get_supported_cpuid(s, 7, 0, R_EBX) &
+ *   - target/i386/kvm/kvm.c|634| <<kvm_arch_get_supported_msr_feature>> if (kvm_arch_get_supported_cpuid(s, 7, 0, R_EBX) &
+ *   - target/i386/kvm/kvm.c|638| <<kvm_arch_get_supported_msr_feature>> if (kvm_arch_get_supported_cpuid(s, 0x80000001, 0, R_EDX) &
+ *   - target/i386/kvm/kvm.c|1800| <<kvm_init_xsave>> assert(kvm_arch_get_supported_cpuid(kvm_state, 0xd, 0, R_ECX) <=
+ *   - target/i386/kvm/kvm.c|4131| <<kvm_put_msrs>> int addr_num = kvm_arch_get_supported_cpuid(kvm_state, 0x14, 1, R_EAX) & 0x7;
+ *   - target/i386/kvm/kvm.c|4562| <<kvm_get_msrs>> kvm_arch_get_supported_cpuid(kvm_state, 0x14, 1, R_EAX) & 0x7;
+ *   - target/i386/kvm/kvm.c|6398| <<kvm_request_xsave_components>> supported = kvm_arch_get_supported_cpuid(s, 0xd, 0, R_EAX);
+ *   - target/i386/kvm/kvm.c|6399| <<kvm_request_xsave_components>> supported |= (uint64_t)kvm_arch_get_supported_cpuid(s, 0xd, 0, R_EDX) << 32;
+ */
 uint32_t kvm_arch_get_supported_cpuid(KVMState *s, uint32_t function,
                                       uint32_t index, int reg)
 {
@@ -439,8 +517,30 @@ uint32_t kvm_arch_get_supported_cpuid(KVMState *s, uint32_t function,
     uint32_t cpuid_1_edx, unused;
     uint64_t bitmask;
 
+    /*
+     * 只在此处调用
+     */
     cpuid = get_supported_cpuid(s);
 
+    /*
+     * struct kvm_cpuid_entry2 {
+     *     __u32 function;
+     *     __u32 index;                              
+     *     __u32 flags;                              
+     *     __u32 eax;
+     *     __u32 ebx;
+     *     __u32 ecx; 
+     *     __u32 edx;
+     *     __u32 padding[3];
+     * };
+     *
+     * 在以下调用cpuid_find_entry():
+     *   - target/i386/kvm/kvm.c|476| <<kvm_arch_get_supported_cpuid>> struct kvm_cpuid_entry2 *entry = cpuid_find_entry(cpuid, function, index);
+     *   - target/i386/kvm/kvm.c|1347| <<hv_cpuid_get_host>> entry = cpuid_find_entry(cpuid, func, 0);
+     *   - target/i386/kvm/kvm.c|2334| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 1, 0);
+     *   - target/i386/kvm/kvm.c|2340| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 7, 0);
+     *   - target/i386/kvm/kvm.c|2377| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, kvm_base, 0);
+     */
     struct kvm_cpuid_entry2 *entry = cpuid_find_entry(cpuid, function, index);
     if (entry) {
         ret = cpuid_entry_get_reg(entry, reg);
@@ -821,6 +921,14 @@ static void kvm_queue_exception(CPUX86State *env,
     }
 }
 
+/*
+ * 在以下使用X86CPU->vmsentry (ArchCPU):
+ *   - target/i386/kvm/kvm.c|2319| <<kvm_arch_init_vcpu>> cpu->vmsentry = qemu_add_vm_change_state_handler(cpu_update_state, env);
+ *   - target/i386/kvm/kvm.c|2418| <<kvm_arch_destroy_vcpu>> qemu_del_vm_change_state_handler(cpu->vmsentry);
+ *
+ * 在以下使用cpu_update_state():
+ *   - target/i386/kvm/kvm.c|2319| <<kvm_arch_init_vcpu>> cpu->vmsentry = qemu_add_vm_change_state_handler(cpu_update_state, env);
+ */
 static void cpu_update_state(void *opaque, bool running, RunState state)
 {
     CPUX86State *env = opaque;
@@ -1276,6 +1384,29 @@ static struct kvm_cpuid2 *get_supported_hv_cpuid_legacy(CPUState *cs)
     return cpuid;
 }
 
+/*
+ * called by:
+ *   - target/i386/kvm/kvm.c|1458| <<hyperv_feature_supported>> if ((hv_cpuid_get_host(cs, func, reg) & bits) != bits) {
+ *   - target/i386/kvm/kvm.c|1547| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VENDOR_AND_MAX_FUNCTIONS, R_EBX);
+ *   - target/i386/kvm/kvm.c|1549| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VENDOR_AND_MAX_FUNCTIONS, R_ECX);
+ *   - target/i386/kvm/kvm.c|1551| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VENDOR_AND_MAX_FUNCTIONS, R_EDX);
+ *   - target/i386/kvm/kvm.c|1559| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_INTERFACE, R_EAX); 
+ *   - target/i386/kvm/kvm.c|1561| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_INTERFACE, R_EBX);
+ *   - target/i386/kvm/kvm.c|1563| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_INTERFACE, R_ECX);
+ *   - target/i386/kvm/kvm.c|1565| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_INTERFACE, R_EDX);
+ *   - target/i386/kvm/kvm.c|1568| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VERSION, R_EAX);
+ *   - target/i386/kvm/kvm.c|1570| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VERSION, R_EBX) >> 16;
+ *   - target/i386/kvm/kvm.c|1572| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VERSION, R_EBX) & 0xffff;
+ *   - target/i386/kvm/kvm.c|1574| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VERSION, R_ECX);
+ *   - target/i386/kvm/kvm.c|1576| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VERSION, R_EDX) >> 24;
+ *   - target/i386/kvm/kvm.c|1578| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_VERSION, R_EDX) & 0xffffff;
+ *   - target/i386/kvm/kvm.c|1580| <<kvm_hyperv_expand_features>> cpu->hv_max_vps = hv_cpuid_get_host(cs, HV_CPUID_IMPLEMENT_LIMITS, R_EAX);
+ *   - target/i386/kvm/kvm.c|1583| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_IMPLEMENT_LIMITS, R_EBX);
+ *   - target/i386/kvm/kvm.c|1585| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_IMPLEMENT_LIMITS, R_ECX);
+ *   - target/i386/kvm/kvm.c|1587| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_IMPLEMENT_LIMITS, R_EDX);
+ *   - target/i386/kvm/kvm.c|1590| <<kvm_hyperv_expand_features>> hv_cpuid_get_host(cs, HV_CPUID_ENLIGHTMENT_INFO, R_EBX);
+ *   - target/i386/kvm/kvm.c|1714| <<hyperv_fill_cpuids>> c->eax |= hv_cpuid_get_host(cs, HV_CPUID_ENLIGHTMENT_INFO, R_EAX) & HV_NO_NONARCH_CORESHARING;
+ */
 static uint32_t hv_cpuid_get_host(CPUState *cs, uint32_t func, int reg)
 {
     struct kvm_cpuid_entry2 *entry;
@@ -1304,6 +1435,25 @@ static uint32_t hv_cpuid_get_host(CPUState *cs, uint32_t func, int reg)
         return 0;
     }
 
+    /*
+     * struct kvm_cpuid_entry2 {
+     *     __u32 function;
+     *     __u32 index;                              
+     *     __u32 flags;                              
+     *     __u32 eax;
+     *     __u32 ebx;
+     *     __u32 ecx; 
+     *     __u32 edx;
+     *     __u32 padding[3];
+     * };
+     *
+     * 在以下调用cpuid_find_entry():
+     *   - target/i386/kvm/kvm.c|476| <<kvm_arch_get_supported_cpuid>> struct kvm_cpuid_entry2 *entry = cpuid_find_entry(cpuid, function, index);
+     *   - target/i386/kvm/kvm.c|1347| <<hv_cpuid_get_host>> entry = cpuid_find_entry(cpuid, func, 0);
+     *   - target/i386/kvm/kvm.c|2334| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 1, 0);
+     *   - target/i386/kvm/kvm.c|2340| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 7, 0);
+     *   - target/i386/kvm/kvm.c|2377| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, kvm_base, 0);
+     */
     entry = cpuid_find_entry(cpuid, func, 0);
     if (!entry) {
         return 0;
@@ -1825,6 +1975,10 @@ static void kvm_init_nested_state(CPUX86State *env)
     }
 }
 
+/*
+ * called by:
+ *   - target/i386/kvm/kvm.c|2268| <<kvm_arch_init_vcpu>> cpuid_i = kvm_x86_build_cpuid(env, cpuid_data.entries, cpuid_i);
+ */
 static uint32_t kvm_x86_build_cpuid(CPUX86State *env,
                                     struct kvm_cpuid_entry2 *entries,
                                     uint32_t cpuid_i)
@@ -2017,6 +2171,34 @@ static uint32_t kvm_x86_build_cpuid(CPUX86State *env,
         default:
             c->function = i;
             c->flags = 0;
+	    /*
+	     * 在以下使用cpu_x86_cpuid():
+	     *   - hw/i386/fw_cfg.c|183| <<fw_cfg_build_feature_control>> cpu_x86_cpuid(env, 1, 0, &unused, &unused, &ecx, &edx);
+	     *   - hw/i386/fw_cfg.c|195| <<fw_cfg_build_feature_control>> cpu_x86_cpuid(env, 0x7, 0, &unused, &ebx, &ecx, &unused);
+	     *   - target/i386/hvf/hvf.c|411| <<hvf_cpu_x86_cpuid>> cpu_x86_cpuid(env, index, count, eax, ebx, ecx, edx);
+	     *   - target/i386/kvm/kvm.c|1836| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, 0, 0, &limit, &unused, &unused, &unused);
+	     *   - target/i386/kvm/kvm.c|1850| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|1864| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|1881| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|1911| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|1933| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|1944| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|1951| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|1966| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, 0x0a, 0, &eax, &unused, &unused, &edx);
+	     *   - target/i386/kvm/kvm.c|1990| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, 0x80000000, 0, &limit, &unused, &unused, &unused);
+	     *   - target/i386/kvm/kvm.c|2006| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|2020| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/kvm/kvm.c|2034| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, 0xC0000000, 0, &limit, &unused, &unused, &unused);
+	     *   - target/i386/kvm/kvm.c|2045| <<kvm_x86_build_cpuid>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+	     *   - target/i386/tcg/fpu_helper.c|3191| <<helper_xsetbv>> cpu_x86_cpuid(env, 0x0d, 0, &ena_lo, &dummy, &dummy, &ena_hi);
+	     *   - target/i386/tcg/misc_helper.c|56| <<helper_cpuid>> cpu_x86_cpuid(env, (uint32_t)env->regs[R_EAX], (uint32_t)env->regs[R_ECX],
+	     *   - target/i386/whpx/whpx-all.c|1946| <<whpx_vcpu_run>> cpu_x86_cpuid(env, cpuid_fn, 0, (UINT32 *)&rax, (UINT32 *)&rbx,
+	     *
+	     * typedef uint64_t FeatureWordArray[FEATURE_WORDS];
+	     *
+	     * CPUX86State *env:
+	     * -> FeatureWordArray features;
+	     */
             cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
             if (!c->eax && !c->ebx && !c->ecx && !c->edx) {
                 /*
@@ -2054,6 +2236,10 @@ full:
     abort();
 }
 
+/*
+ * called by:
+ *   - accel/kvm/kvm-all.c|594| <<kvm_init_vcpu>> ret = kvm_arch_init_vcpu(cpu);
+ */
 int kvm_arch_init_vcpu(CPUState *cs)
 {
     struct {
@@ -2068,6 +2254,13 @@ int kvm_arch_init_vcpu(CPUState *cs)
                       sizeof(struct kvm_cpuid2) +
                       sizeof(struct kvm_cpuid_entry2) * KVM_MAX_CPUID_ENTRIES);
 
+    /*
+     * struct ArchCPU {
+     *     CPUState parent_obj;
+     *
+     *     CPUX86State env;
+     *     VMChangeStateEntry *vmsentry;
+     */
     X86CPU *cpu = X86_CPU(cs);
     CPUX86State *env = &cpu->env;
     uint32_t cpuid_i;
@@ -2233,9 +2426,17 @@ int kvm_arch_init_vcpu(CPUState *cs)
         }
     }
 
+    /*
+     * 只在这里调用kvm_x86_build_cpuid()
+     */
     cpuid_i = kvm_x86_build_cpuid(env, cpuid_data.entries, cpuid_i);
     cpuid_data.cpuid.nent = cpuid_i;
 
+    /*
+     * 这里结束后, cpuid就做好了.
+     * 应该用cpuid_find_entry()?
+     */
+
     if (((env->cpuid_version >> 8)&0xF) >= 6
         && (env->features[FEAT_1_EDX] & (CPUID_MCE | CPUID_MCA)) ==
            (CPUID_MCE | CPUID_MCA)) {
@@ -2273,8 +2474,32 @@ int kvm_arch_init_vcpu(CPUState *cs)
         }
     }
 
+    /*
+     * 在以下使用X86CPU->vmsentry (ArchCPU):
+     *   - target/i386/kvm/kvm.c|2319| <<kvm_arch_init_vcpu>> cpu->vmsentry = qemu_add_vm_change_state_handler(cpu_update_state, env);
+     *   - target/i386/kvm/kvm.c|2418| <<kvm_arch_destroy_vcpu>> qemu_del_vm_change_state_handler(cpu->vmsentry);
+     */
     cpu->vmsentry = qemu_add_vm_change_state_handler(cpu_update_state, env);
 
+    /*
+     * struct kvm_cpuid_entry2 {
+     *     __u32 function;
+     *     __u32 index;                              
+     *     __u32 flags;                              
+     *     __u32 eax;
+     *     __u32 ebx;
+     *     __u32 ecx; 
+     *     __u32 edx;
+     *     __u32 padding[3];
+     * };
+     *
+     * 在以下调用cpuid_find_entry():
+     *   - target/i386/kvm/kvm.c|476| <<kvm_arch_get_supported_cpuid>> struct kvm_cpuid_entry2 *entry = cpuid_find_entry(cpuid, function, index);
+     *   - target/i386/kvm/kvm.c|1347| <<hv_cpuid_get_host>> entry = cpuid_find_entry(cpuid, func, 0);
+     *   - target/i386/kvm/kvm.c|2334| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 1, 0);
+     *   - target/i386/kvm/kvm.c|2340| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 7, 0);
+     *   - target/i386/kvm/kvm.c|2377| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, kvm_base, 0);
+     */
     c = cpuid_find_entry(&cpuid_data.cpuid, 1, 0);
     if (c) {
         has_msr_feature_control = !!(c->ecx & CPUID_EXT_VMX) ||
@@ -2318,6 +2543,25 @@ int kvm_arch_init_vcpu(CPUState *cs)
         c->ebx = env->apic_bus_freq / 1000; /* Hz to KHz */
         c->ecx = c->edx = 0;
 
+	/*
+	 * struct kvm_cpuid_entry2 {
+	 *     __u32 function;
+	 *     __u32 index;                              
+	 *     __u32 flags;                              
+	 *     __u32 eax;
+	 *     __u32 ebx;
+	 *     __u32 ecx; 
+	 *     __u32 edx;
+	 *     __u32 padding[3];
+	 * };
+	 *
+	 * 在以下调用cpuid_find_entry():
+	 *   - target/i386/kvm/kvm.c|476| <<kvm_arch_get_supported_cpuid>> struct kvm_cpuid_entry2 *entry = cpuid_find_entry(cpuid, function, index);
+	 *   - target/i386/kvm/kvm.c|1347| <<hv_cpuid_get_host>> entry = cpuid_find_entry(cpuid, func, 0);
+	 *   - target/i386/kvm/kvm.c|2334| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 1, 0);
+	 *   - target/i386/kvm/kvm.c|2340| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, 7, 0);
+	 *   - target/i386/kvm/kvm.c|2377| <<kvm_arch_init_vcpu>> c = cpuid_find_entry(&cpuid_data.cpuid, kvm_base, 0);
+	 */
         c = cpuid_find_entry(&cpuid_data.cpuid, kvm_base, 0);
         c->eax = MAX(c->eax, KVM_CPUID_SIGNATURE | 0x10);
     }
@@ -2325,6 +2569,9 @@ int kvm_arch_init_vcpu(CPUState *cs)
     cpuid_data.cpuid.nent = cpuid_i;
 
     cpuid_data.cpuid.padding = 0;
+    /*
+     * 只在这一个地方调用KVM_SET_CPUID2.
+     */
     r = kvm_vcpu_ioctl(cs, KVM_SET_CPUID2, &cpuid_data);
     if (r) {
         goto fail;
@@ -2372,6 +2619,11 @@ int kvm_arch_destroy_vcpu(CPUState *cs)
     g_free(env->nested_state);
     env->nested_state = NULL;
 
+    /*
+     * 在以下使用X86CPU->vmsentry (ArchCPU):
+     *   - target/i386/kvm/kvm.c|2319| <<kvm_arch_init_vcpu>> cpu->vmsentry = qemu_add_vm_change_state_handler(cpu_update_state, env);
+     *   - target/i386/kvm/kvm.c|2418| <<kvm_arch_destroy_vcpu>> qemu_del_vm_change_state_handler(cpu->vmsentry);
+     */
     qemu_del_vm_change_state_handler(cpu->vmsentry);
 
     return 0;
@@ -3812,6 +4064,14 @@ static void kvm_msr_entry_add_vmx(X86CPU *cpu, FeatureWordArray f)
 
 static void kvm_msr_entry_add_perf(X86CPU *cpu, FeatureWordArray f)
 {
+    /*
+     * 在以下使用MSR_IA32_PERF_CAPABILITIES:
+     *   - target/i386/cpu.c|1412| <<global>> .index = MSR_IA32_PERF_CAPABILITIES,
+     *   - target/i386/cpu.h|407| <<global>> #define MSR_IA32_PERF_CAPABILITIES 0x345
+     *   - target/i386/kvm/kvm.c|2639| <<kvm_get_supported_msrs>> case MSR_IA32_PERF_CAPABILITIES:
+     *   - target/i386/kvm/kvm.c|3881| <<kvm_msr_entry_add_perf>> MSR_IA32_PERF_CAPABILITIES);
+     *   - target/i386/kvm/kvm.c|3884| <<kvm_msr_entry_add_perf>> kvm_msr_entry_add(cpu, MSR_IA32_PERF_CAPABILITIES,
+     */
     uint64_t kvm_perf_cap =
         kvm_arch_get_supported_msr_feature(kvm_state,
                                            MSR_IA32_PERF_CAPABILITIES);
@@ -3959,9 +4219,18 @@ static int kvm_put_msrs(X86CPU *cpu, int level)
      * The following MSRs have side effects on the guest or are too heavy
      * for normal writeback. Limit them to reset or full state updates.
      */
+    /*
+     * 迁移的时候是KVM_PUT_FULL_STATE
+     */
     if (level >= KVM_PUT_RESET_STATE) {
         kvm_msr_entry_add(cpu, MSR_IA32_TSC, env->tsc);
         kvm_msr_entry_add(cpu, MSR_KVM_SYSTEM_TIME, env->system_time_msr);
+        /*
+	 * 在以下使用CPUX86State->wall_clock_msr:
+	 *   - target/i386/machine.c|1740| <<global>> VMSTATE_UINT64(env.wall_clock_msr, X86CPU),
+	 *   - target/i386/kvm/kvm.c|3965| <<kvm_put_msrs>> kvm_msr_entry_add(cpu, MSR_KVM_WALL_CLOCK, env->wall_clock_msr);
+	 *   - target/i386/kvm/kvm.c|4708| <<kvm_get_msrs>> case MSR_KVM_SYSTEM_TIME: env->wall_clock_msr = msrs[i].data;
+	 */
         kvm_msr_entry_add(cpu, MSR_KVM_WALL_CLOCK, env->wall_clock_msr);
         if (env->features[FEAT_KVM] & (1 << KVM_FEATURE_ASYNC_PF_INT)) {
             kvm_msr_entry_add(cpu, MSR_KVM_ASYNC_PF_INT, env->async_pf_int_msr);
@@ -5232,6 +5501,18 @@ static int kvm_get_nested_state(X86CPU *cpu)
     return ret;
 }
 
+/*
+ * (gdb) bt
+ * #0  kvm_arch_put_registers (cpu=0x555557721960, level=3, errp=0x7fffedb02580) at ../target/i386/kvm/kvm.c:5237
+ * #1  0x0000555555edb672 in do_kvm_cpu_synchronize_post_init (cpu=0x555557721960, arg=...) at ../accel/kvm/kvm-all.c:2905
+ * #2  0x00005555558841ea in process_queued_cpu_work (cpu=0x555557721960) at ../cpu-common.c:375
+ * #3  0x0000555555bd2d4f in qemu_wait_io_event_common (cpu=0x555557721960) at ../system/cpus.c:456
+ * #4  0x0000555555bd2de8 in qemu_wait_io_event (cpu=0x555557721960) at ../system/cpus.c:474
+ * #5  0x0000555555edf7e1 in kvm_vcpu_thread_fn (arg=0x555557721960) at ../accel/kvm/kvm-accel-ops.c:55
+ * #6  0x000055555617e61f in qemu_thread_start (args=0x55555772bbe0) at ../util/qemu-thread-posix.c:541
+ * #7  0x00007ffff68a91da in start_thread () from /lib64/libpthread.so.0
+ * #8  0x00007ffff4bda8d3 in clone () from /lib64/libc.so.6
+ */
 int kvm_arch_put_registers(CPUState *cpu, int level, Error **errp)
 {
     X86CPU *x86_cpu = X86_CPU(cpu);
diff --git a/target/i386/kvm/vmsr_energy.c b/target/i386/kvm/vmsr_energy.c
index 31508d4e7..58084dbc2 100644
--- a/target/i386/kvm/vmsr_energy.c
+++ b/target/i386/kvm/vmsr_energy.c
@@ -27,11 +27,21 @@ char *vmsr_compute_default_paths(void)
     return g_build_filename(state, "run", "qemu-vmsr-helper.sock", NULL);
 }
 
+/*
+ * 在以下使用is_host_cpu_intel():
+ *   - target/i386/kvm/kvm.c|3180| <<kvm_msr_energy_thread_init>> if (!is_host_cpu_intel()) {
+ */
 bool is_host_cpu_intel(void)
 {
     int family, model, stepping;
     char vendor[CPUID_VENDOR_SZ + 1];
 
+    /*
+     * 在以下使用host_cpu_vendor_fms():
+     *   - target/i386/host-cpu.c|150| <<host_cpu_max_instance_init>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     *   - target/i386/kvm/kvm.c|390| <<host_tsx_broken>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     *   - target/i386/kvm/vmsr_energy.c|35| <<is_host_cpu_intel>> host_cpu_vendor_fms(vendor, &family, &model, &stepping);
+     */
     host_cpu_vendor_fms(vendor, &family, &model, &stepping);
 
     return g_str_equal(vendor, CPUID_VENDOR_INTEL);
diff --git a/target/i386/machine.c b/target/i386/machine.c
index b4610325a..3030da012 100644
--- a/target/i386/machine.c
+++ b/target/i386/machine.c
@@ -641,6 +641,24 @@ static const VMStateDescription vmstate_msr_ia32_feature_control = {
     }
 };
 
+/*
+ * 668 static const VMStateDescription vmstate_msr_architectural_pmu = {
+ * 669     .name = "cpu/msr_architectural_pmu",
+ * 670     .version_id = 1,
+ * 671     .minimum_version_id = 1,
+ * 672     .needed = pmu_enable_needed,
+ * 673     .fields = (const VMStateField[]) {
+ * 674         VMSTATE_UINT64(env.msr_fixed_ctr_ctrl, X86CPU),
+ * 675         VMSTATE_UINT64(env.msr_global_ctrl, X86CPU),
+ * 676         VMSTATE_UINT64(env.msr_global_status, X86CPU),
+ * 677         VMSTATE_UINT64(env.msr_global_ovf_ctrl, X86CPU),
+ * 678         VMSTATE_UINT64_ARRAY(env.msr_fixed_counters, X86CPU, MAX_FIXED_COUNTERS),
+ * 679         VMSTATE_UINT64_ARRAY(env.msr_gp_counters, X86CPU, MAX_GP_COUNTERS),
+ * 680         VMSTATE_UINT64_ARRAY(env.msr_gp_evtsel, X86CPU, MAX_GP_COUNTERS),
+ * 681         VMSTATE_END_OF_LIST()
+ * 682     }
+ * 683 };
+ */
 static bool pmu_enable_needed(void *opaque)
 {
     X86CPU *cpu = opaque;
diff --git a/target/i386/tcg/misc_helper.c b/target/i386/tcg/misc_helper.c
index ed4cda800..ce611e652 100644
--- a/target/i386/tcg/misc_helper.c
+++ b/target/i386/tcg/misc_helper.c
@@ -47,6 +47,9 @@ void helper_into(CPUX86State *env, int next_eip_addend)
     }
 }
 
+/*
+ * 没人调用helper_cpuid()
+ */
 void helper_cpuid(CPUX86State *env)
 {
     uint32_t eax, ebx, ecx, edx;
diff --git a/util/iov.c b/util/iov.c
index 777711612..2df71d9c0 100644
--- a/util/iov.c
+++ b/util/iov.c
@@ -283,6 +283,63 @@ unsigned iov_copy(struct iovec *dst_iov, unsigned int dst_iov_cnt,
 
 /* io vectors */
 
+/*
+ * called by:
+ *   - block/blklogwrites.c|504| <<global>> qemu_iovec_init(&log_qiov, niov + 2);
+ *   - block/blklogwrites.c|442| <<blk_log_writes_co_do_log>> qemu_iovec_init(&qiov, 2);
+ *   - block/blkverify.c|242| <<blkverify_co_preadv>> qemu_iovec_init(&raw_qiov, qiov->niov);
+ *   - block/bochs.c|261| <<bochs_co_preadv>> qemu_iovec_init(&local_qiov, qiov->niov);
+ *   - block/crypto.c|486| <<block_crypto_co_preadv>> qemu_iovec_init(&hd_qiov, qiov->niov);
+ *   - block/crypto.c|550| <<block_crypto_co_pwritev>> qemu_iovec_init(&hd_qiov, qiov->niov);
+ *   - block/io.c|1630| <<bdrv_create_padded_qiov>> qemu_iovec_init(&pad->local_qiov, MIN(padded_niov, IOV_MAX));
+ *   - block/io.c|1656| <<bdrv_create_padded_qiov>> qemu_iovec_init(&pad->pre_collapse_qiov, collapse_count);
+ *   - block/io_uring.c|96| <<luring_resubmit_short_read>> qemu_iovec_init(resubmit_qiov, luringcb->qiov->niov);
+ *   - block/mirror.c|385| <<mirror_co_read>> qemu_iovec_init(&op->qiov, nb_chunks);
+ *   - block/mirror.c|1597| <<bdrv_mirror_top_pwritev>> qemu_iovec_init(&bounce_qiov, 1);
+ *   - block/nbd.c|791| <<nbd_co_receive_offset_data_payload>> qemu_iovec_init(&sub_qiov, qiov->niov);
+ *   - block/nvme.c|1280| <<nvme_co_prw>> qemu_iovec_init(&local_qiov, 1);
+ *   - block/nvme.c|1447| <<nvme_co_pdiscard>> qemu_iovec_init(&local_qiov, 1);
+ *   - block/parallels.c|451| <<parallels_co_writev>> qemu_iovec_init(&hd_qiov, qiov->niov);
+ *   - block/parallels.c|494| <<parallels_co_readv>> qemu_iovec_init(&hd_qiov, qiov->niov);
+ *   - block/qcow2-cluster.c|934| <<perform_cow>> qemu_iovec_init(&qiov, 2 + (m->data_qiov ?
+ *   - block/qed.c|1403| <<qed_co_request>> qemu_iovec_init(&acb.cur_qiov, qiov->niov);
+ *   - block/quorum.c|618| <<read_quorum_children>> qemu_iovec_init(&acb->qcrs[i].qiov, acb->qiov->niov);
+ *   - block/raw-format.c|261| <<raw_co_pwritev>> qemu_iovec_init(&local_qiov, qiov->niov + 1);
+ *   - block/replication.c|275| <<replication_co_writev>> qemu_iovec_init(&hd_qiov, qiov->niov);
+ *   - block/vdi.c|565| <<vdi_co_preadv>> qemu_iovec_init(&local_qiov, qiov->niov);
+ *   - block/vdi.c|625| <<vdi_co_pwritev>> qemu_iovec_init(&local_qiov, qiov->niov);
+ *   - block/vhdx.c|1191| <<vhdx_co_readv>> qemu_iovec_init(&hd_qiov, qiov->niov);
+ *   - block/vhdx.c|1353| <<vhdx_co_writev>> qemu_iovec_init(&hd_qiov, qiov->niov);
+ *   - block/vmdk.c|1880| <<vmdk_write_extent>> qemu_iovec_init(&local_qiov, qiov->niov);
+ *   - block/vmdk.c|1989| <<vmdk_co_preadv>> qemu_iovec_init(&local_qiov, qiov->niov);
+ *   - block/vpc.c|631| <<vpc_co_preadv>> qemu_iovec_init(&local_qiov, qiov->niov);
+ *   - block/vpc.c|681| <<vpc_co_pwritev>> qemu_iovec_init(&local_qiov, qiov->niov);
+ *   - hw/9pfs/9p.c|2231| <<v9fs_init_qiov_from_pdu>> qemu_iovec_init(qiov, niov);
+ *   - hw/9pfs/9p.c|2395| <<v9fs_read>> qemu_iovec_init(&qiov, qiov_full.niov);
+ *   - hw/9pfs/9p.c|2712| <<v9fs_write>> qemu_iovec_init(&qiov, qiov_full.niov);
+ *   - hw/block/dataplane/xen-block.c|110| <<xen_block_start_request>> qemu_iovec_init(&request->v, 1);
+ *   - hw/block/m25p80.c|578| <<flash_sync_page>> qemu_iovec_init(iov, 1);
+ *   - hw/block/m25p80.c|595| <<flash_sync_area>> qemu_iovec_init(iov, 1);
+ *   - hw/block/virtio-blk.c|237| <<submit_requests>> qemu_iovec_init(qiov, niov);
+ *   - hw/nvme/ctrl.c|721| <<nvme_sg_init>> qemu_iovec_init(&sg->iov, 0);
+ *   - hw/nvme/ctrl.c|2479| <<nvme_compare_data_cb>> qemu_iovec_init(&ctx->mdata.iov, 1);
+ *   - hw/nvme/ctrl.c|2718| <<nvme_verify>> qemu_iovec_init(&ctx->data.iov, 1);
+ *   - hw/nvme/ctrl.c|3398| <<nvme_copy>> qemu_iovec_init(&iocb->iov, 1);
+ *   - hw/nvme/ctrl.c|3469| <<nvme_compare>> qemu_iovec_init(&ctx->data.iov, 1);
+ *   - hw/nvme/dif.c|582| <<nvme_dif_rw>> qemu_iovec_init(&ctx->mdata.iov, 1);
+ *   - hw/nvme/dif.c|643| <<nvme_dif_rw>> qemu_iovec_init(&ctx->data.iov, 1);
+ *   - hw/nvme/dif.c|663| <<nvme_dif_rw>> qemu_iovec_init(&ctx->mdata.iov, 1);
+ *   - hw/scsi/virtio-scsi.c|94| <<virtio_scsi_init_req>> qemu_iovec_init(&req->resp_iov, 1);
+ *   - hw/usb/combined-packet.c|161| <<usb_ep_combine_input_packets>> qemu_iovec_init(&combined->iov, 2);
+ *   - hw/usb/core.c|531| <<usb_packet_init>> qemu_iovec_init(&p->iov, 1);
+ *   - hw/usb/xen-usb.c|233| <<usbback_init_packet>> qemu_iovec_init(&packet->iov, USBIF_MAX_SEGMENTS_PER_REQUEST);
+ *   - qemu-img.c|4730| <<img_bench>> qemu_iovec_init(&data.qiov[i], 1);
+ *   - qemu-io-cmds.c|531| <<create_iovec>> qemu_iovec_init(qiov, nr_iov);
+ *   - system/dma-helpers.c|235| <<dma_blk_io>> qemu_iovec_init(&dbs->iov, sg->nsg);
+ *   - tests/unit/test-replication.c|73| <<test_blk_read>> qemu_iovec_init(&qiov, 1);
+ *   - tests/unit/test-replication.c|110| <<test_blk_write>> qemu_iovec_init(&qiov, 1);
+ *   - util/iov.c|473| <<qemu_iovec_init_slice>> qemu_iovec_init(qiov, slice_niov);
+ */
 void qemu_iovec_init(QEMUIOVector *qiov, int alloc_hint)
 {
     qiov->iov = g_new(struct iovec, alloc_hint);
@@ -327,6 +384,16 @@ void qemu_iovec_add(QEMUIOVector *qiov, void *base, size_t len)
  * of src".
  * Only vector pointers are processed, not the actual data buffers.
  */
+/*
+ * called by:
+ *   - block/io.c|1657| <<bdrv_create_padded_qiov>> qemu_iovec_concat_iov(&pad->pre_collapse_qiov, iov,
+  3 block/io.c|1679| <<bdrv_create_padded_qiov>> qemu_iovec_concat_iov(&pad->local_qiov, iov, niov, iov_offset, bytes);
+  4 block/vhdx.c|1418| <<vhdx_co_writev>> qemu_iovec_concat_iov(&hd_qiov, &iov1, 1, 0,
+  5 block/vhdx.c|1434| <<vhdx_co_writev>> qemu_iovec_concat_iov(&hd_qiov, &iov2, 1, 0,
+  6 hw/scsi/virtio-scsi.c|202| <<virtio_scsi_parse_req>> if (qemu_iovec_concat_iov(&req->resp_iov,
+ *   - util/iov.c|426| <<qemu_iovec_concat>> qemu_iovec_concat_iov(dst, src->iov, src->niov, soffset, sbytes);
+  9 util/iov.c|531| <<qemu_iovec_init_slice>> qemu_iovec_concat_iov(qiov, slice_iov, slice_niov, slice_head, len);
+ */
 size_t qemu_iovec_concat_iov(QEMUIOVector *dst,
                              struct iovec *src_iov, unsigned int src_cnt,
                              size_t soffset, size_t sbytes)
diff --git a/util/main-loop.c b/util/main-loop.c
index a0386cfeb..0124be33c 100644
--- a/util/main-loop.c
+++ b/util/main-loop.c
@@ -128,6 +128,19 @@ static int qemu_signal_init(Error **errp)
 }
 #endif
 
+/*
+ * 在以下使用qemu_aio_context:
+ *   - util/main-loop.c|143| <<qemu_get_aio_context>> return qemu_aio_context;
+ *   - util/main-loop.c|148| <<qemu_notify_event>> if (!qemu_aio_context) {
+ *   - util/main-loop.c|168| <<qemu_init_main_loop>> qemu_aio_context = aio_context_new(errp);
+ *   - util/main-loop.c|169| <<qemu_init_main_loop>> if (!qemu_aio_context) {
+ *   - util/main-loop.c|172| <<qemu_init_main_loop>> qemu_set_current_aio_context(qemu_aio_context);
+ *   - util/main-loop.c|175| <<qemu_init_main_loop>> src = aio_get_g_source(qemu_aio_context);
+ *   - util/main-loop.c|190| <<main_loop_update_params>> if (!qemu_aio_context) {
+ *   - util/main-loop.c|195| <<main_loop_update_params>> aio_context_set_aio_params(qemu_aio_context, base->aio_max_batch);
+ *   - util/main-loop.c|197| <<main_loop_update_params>> aio_context_set_thread_pool_params(qemu_aio_context, base->thread_pool_min,
+ *   - util/main-loop.c|608| <<qemu_bh_new_full>> return aio_bh_new_full(qemu_aio_context, cb, opaque, name,
+ */
 static AioContext *qemu_aio_context;
 static QEMUBH *qemu_notify_bh;
 
diff --git a/util/qemu-coroutine-io.c b/util/qemu-coroutine-io.c
index 364f4d5ab..2649a2a7a 100644
--- a/util/qemu-coroutine-io.c
+++ b/util/qemu-coroutine-io.c
@@ -58,6 +58,11 @@ qemu_co_sendv_recvv(int sockfd, struct iovec *iov, unsigned iov_cnt,
     return done;
 }
 
+/*
+ * called by:
+ *   - include/qemu/coroutine.h|307| <<qemu_co_recv>> qemu_co_send_recv(sockfd, buf, bytes, false)
+ *   - include/qemu/coroutine.h|309| <<qemu_co_send>> qemu_co_send_recv(sockfd, buf, bytes, true)
+ */
 ssize_t coroutine_fn
 qemu_co_send_recv(int sockfd, void *buf, size_t bytes, bool do_send)
 {
diff --git a/util/qemu-coroutine-lock.c b/util/qemu-coroutine-lock.c
index 253443538..d76bbcc69 100644
--- a/util/qemu-coroutine-lock.c
+++ b/util/qemu-coroutine-lock.c
@@ -429,6 +429,13 @@ void coroutine_fn qemu_co_rwlock_downgrade(CoRwlock *lock)
     qemu_co_rwlock_maybe_wake_one(lock);
 }
 
+/*
+ * called by:
+ *   - hw/9pfs/9p.h|430| <<v9fs_path_write_lock>> qemu_co_rwlock_wrlock(&s->rename_lock);
+ *   - tests/unit/test-coroutine.c|297| <<rwlock_wrlock_yield>> qemu_co_rwlock_wrlock(&rwlock);
+ *   - tests/unit/test-coroutine.c|339| <<rwlock_wrlock_downgrade>> qemu_co_rwlock_wrlock(&rwlock);
+ *   - tests/unit/test-coroutine.c|356| <<rwlock_wrlock>> qemu_co_rwlock_wrlock(&rwlock);
+ */
 void coroutine_fn qemu_co_rwlock_wrlock(CoRwlock *lock)
 {
     Coroutine *self = qemu_coroutine_self();
diff --git a/util/qemu-coroutine.c b/util/qemu-coroutine.c
index 64d6264fc..823d39020 100644
--- a/util/qemu-coroutine.c
+++ b/util/qemu-coroutine.c
@@ -21,6 +21,53 @@
 #include "qemu/cutils.h"
 #include "block/aio.h"
 
+/*
+ * 注释:
+ *
+ * Switch to a new coroutine pool implementation with a global pool that
+ * grows to a maximum number of coroutines and per-thread local pools that
+ * are capped at hardcoded small number of coroutines.
+ *
+ * This approach does not leave large numbers of coroutines pooled in a
+ * thread that may not use them again. In order to perform well it
+ * amortizes the cost of global pool accesses by working in batches of
+ * coroutines instead of individual coroutines.
+ *
+ * The global pool is a list. Threads donate batches of coroutines to when
+ * they have too many and take batches from when they have too few:
+ *
+ * .-----------------------------------.
+ * | Batch 1 | Batch 2 | Batch 3 | ... | global_pool
+ * `-----------------------------------'
+ *
+ * Each thread has up to 2 batches of coroutines:
+ *
+ * .-------------------.
+ * | Batch 1 | Batch 2 | per-thread local_pool (maximum 2 batches)
+ * `-------------------'
+ *
+ * The goal of this change is to reduce the excessive number of pooled
+ * coroutines that cause QEMU to abort when vm.max_map_count is reached
+ * without losing the performance of an adequately sized coroutine pool.
+ *
+ * Here are virtio-blk disk I/O benchmark results:
+ *
+ *       RW BLKSIZE IODEPTH    OLD    NEW CHANGE
+ * randread      4k       1 113725 117451 +3.3%
+ * randread      4k       8 192968 198510 +2.9%
+ * randread      4k      16 207138 209429 +1.1%
+ * randread      4k      32 212399 215145 +1.3%
+ * randread      4k      64 218319 221277 +1.4%
+ * randread    128k       1  17587  17535 -0.3%
+ * randread    128k       8  17614  17616 +0.0%
+ * randread    128k      16  17608  17609 +0.0%
+ * randread    128k      32  17552  17553 +0.0%
+ * randread    128k      64  17484  17484 +0.0%
+ *
+ * See files/{fio.sh,test.xml.j2} for the benchmark configuration:
+ * https://gitlab.com/stefanha/virt-playbooks/-/tree/coroutine-pool-fix-sizing
+ */
+
 enum {
     COROUTINE_POOL_BATCH_MAX_SIZE = 128,
 };
@@ -61,6 +108,13 @@ static unsigned int global_pool_hard_max_size;
 
 static QemuMutex global_pool_lock; /* protects the following variables */
 static CoroutinePool global_pool = QSLIST_HEAD_INITIALIZER(global_pool);
+/*
+ * 在以下使用global_pool_size:
+ *   - util/qemu-coroutine.c|64| <<QSLIST_HEAD>> static unsigned int global_pool_size;
+ *   - util/qemu-coroutine.c|146| <<coroutine_pool_refill_local>> global_pool_size -= batch->size;
+ *   - util/qemu-coroutine.c|163| <<coroutine_pool_put_global>> if (global_pool_size < max) {
+ *   - util/qemu-coroutine.c|167| <<coroutine_pool_put_global>> global_pool_size += batch->size;
+ */
 static unsigned int global_pool_size;
 static unsigned int global_pool_max_size = COROUTINE_POOL_BATCH_MAX_SIZE;
 
@@ -173,6 +227,10 @@ static void coroutine_pool_put_global(CoroutinePoolBatch *batch)
     coroutine_pool_batch_delete(batch);
 }
 
+/*
+ * called by:
+ *   - util/qemu-coroutine.c|222| <<qemu_coroutine_create>> co = coroutine_pool_get();
+ */
 /* Get the next unused coroutine from the pool or return NULL */
 static Coroutine *coroutine_pool_get(void)
 {
@@ -311,6 +369,40 @@ void qemu_aio_coroutine_enter(AioContext *ctx, Coroutine *co)
     }
 }
 
+/*
+ * 除了unittest的使用:
+ *   - block/aio_task.c|94| <<aio_task_pool_start_task>> qemu_coroutine_enter(qemu_coroutine_create(aio_task_co, task));
+ *   - block/blkdebug.c|915| <<resume_req_by_tag>> qemu_coroutine_enter(co);
+ *   - block/blkverify.c|217| <<blkverify_co_prwv>> qemu_coroutine_enter(co_a);
+ *   - block/blkverify.c|218| <<blkverify_co_prwv>> qemu_coroutine_enter(co_b);
+ *   - block/block-copy.c|992| <<block_copy_async>> qemu_coroutine_enter(call_state->co);
+ *   - block/export/vduse-blk.c|112| <<vduse_blk_vq_handler>> qemu_coroutine_enter(co);
+ *   - block/export/vhost-user-blk-server.c|102| <<vu_blk_process_vq>> qemu_coroutine_enter(co);
+ *   - block/mirror.c|469| <<mirror_perform>> qemu_coroutine_enter(co);
+ *   - block/nvme.c|1169| <<nvme_rw_cb_bh>> qemu_coroutine_enter(data->co);
+ *   - block/qed.c|329| <<qed_need_check_timer_cb>> qemu_coroutine_enter(co);
+ *   - block/qed.c|593| <<bdrv_qed_open>> qemu_coroutine_enter(qemu_coroutine_create(bdrv_qed_open_entry, &qoc));
+ *   - block/quorum.c|332| <<quorum_rewrite_bad_versions>> qemu_coroutine_enter(co);
+ *   - block/quorum.c|630| <<read_quorum_children>> qemu_coroutine_enter(co);
+ *   - block/quorum.c|744| <<quorum_co_pwritev>> qemu_coroutine_enter(co);
+ *   - hw/9pfs/9p.c|4188| <<pdu_submit>> qemu_coroutine_enter(co);
+ *   - hw/9pfs/9p.c|4345| <<v9fs_reset>> qemu_coroutine_enter(co);
+ *   - hw/9pfs/coth.c|30| <<coroutine_enter_cb>> qemu_coroutine_enter(co);
+ *   - hw/9pfs/coth.c|37| <<coroutine_enter_func>> qemu_coroutine_enter(co);
+ *   - hw/remote/remote-obj.c|125| <<remote_object_machine_done>> qemu_coroutine_enter(co);
+ *   - migration/colo.c|153| <<secondary_vm_do_failover>> qemu_coroutine_enter(mis->colo_incoming_co);
+ *   - migration/migration.c|917| <<migration_incoming_process>> qemu_coroutine_enter(co);
+ *   - migration/rdma.c|3328| <<rdma_cm_poll_handler>> qemu_coroutine_enter(mis->loadvm_co);
+ *   - nbd/server.c|3278| <<rdma_cm_poll_handler>> qemu_coroutine_enter(co);
+ *   - net/colo-compare.c|824| <<compare_chr_send>> qemu_coroutine_enter(sendco->co);
+ *   - net/filter-mirror.c|128| <<filter_send>> qemu_coroutine_enter(co);
+ *   - qemu-img.c|2079| <<convert_co_do_copy>> qemu_coroutine_enter(s->co[i]);
+ *   - qemu-img.c|2140| <<convert_do_copy>> qemu_coroutine_enter(s->co[i]);
+ *   - scsi/qemu-pr-helper.c|817| <<accept_client>> qemu_coroutine_enter(prh->co);
+ *   - tools/i386/qemu-vmsr-helper.c|296| <<accept_client>> qemu_coroutine_enter(vmsrh->co);
+ *   - util/qemu-coroutine-io.c|78| <<fd_coroutine_enter>> qemu_coroutine_enter(data->co);
+ *   - util/qemu-coroutine.c|322| <<qemu_coroutine_enter_if_inactive>> qemu_coroutine_enter(co);
+ */
 void qemu_coroutine_enter(Coroutine *co)
 {
     qemu_aio_coroutine_enter(qemu_get_current_aio_context(), co);
@@ -361,6 +453,54 @@ void qemu_coroutine_dec_pool_size(unsigned int removing_pool_size)
     global_pool_max_size -= removing_pool_size;
 }
 
+/*
+ * 在以下调用g_file_get_contents():
+ *   - authz/listfile.c|62| <<qauthz_list_file_load>> if (!g_file_get_contents(fauthz->filename, &content, &len, &err)) {
+ *   - block/file-posix.c|1233| <<get_sysfs_str_val>> if (!g_file_get_contents(sysfspath, val, &len, NULL)) {
+ *   - crypto/secret.c|50| <<qcrypto_secret_load_data>> if (!g_file_get_contents(secret->file, &data, &length, &gerr)) {
+ *   - crypto/tlscreds.c|61| <<qcrypto_tls_creds_get_dh_params_file>> if (!g_file_get_contents(filename,
+ *   - crypto/tlscredspsk.c|45| <<lookup_key>> if (!g_file_get_contents(pskfile, &content, &clen, &gerr)) {
+ *   - crypto/tlscredsx509.c|395| <<qcrypto_tls_creds_load_cert>> if (!g_file_get_contents(certFile, &buf, &buflen, &gerr)) {
+ *   - crypto/tlscredsx509.c|442| <<qcrypto_tls_creds_load_ca_cert_list>> if (!g_file_get_contents(certFile, &buf, &buflen, &gerr)) {
+ *   - hw/arm/boot.c|870| <<load_aarch64_image>> if (!g_file_get_contents(filename, (char **)&buffer, &len, NULL)) {
+ *   - hw/core/loader.c|812| <<load_image_gzipped_buffer>> if (!g_file_get_contents(filename, (char **) &compressed_data, &len,
+ *   - hw/core/loader.c|1085| <<rom_add_file>> if (!g_file_get_contents(rom->path, (gchar **) &rom->data,
+ *   - hw/core/loader.c|1925| <<load_targphys_hex_as>> if (!g_file_get_contents(filename, &hex_blob, &hex_blob_size, NULL)) {
+ *   - hw/cxl/cxl-cdat.c|127| <<ct3_load_cdat>> if (!g_file_get_contents(cdat->filename, (gchar **)&buf,
+ *   - hw/ipmi/ipmi_bmc_sim.c|2074| <<ipmi_sdr_init>> !g_file_get_contents(ibs->sdr_filename, (gchar **) &sdrs, &sdrs_size,
+ *   - hw/nvram/fw_cfg.c|139| <<read_splashfile>> if (!g_file_get_contents(filename, &content, file_sizep, &err)) {
+ *   - hw/nvram/fw_cfg.c|1242| <<load_image_to_fw_cfg>> if (!g_file_get_contents(image_name, &contents, &length, NULL)) {
+ *   - hw/ppc/mac_newworld.c|520| <<ppc_core99_init>> if (g_file_get_contents(filename, &ndrv_file, &ndrv_size, NULL)) {
+ *   - hw/ppc/mac_oldworld.c|359| <<ppc_heathrow_init>> if (g_file_get_contents(filename, &ndrv_file, &ndrv_size, NULL)) {
+ *   - hw/ppc/spapr_pci.c|801| <<spapr_phb_vfio_get_loc_code>> if (!g_file_get_contents(path, &devspec, NULL, NULL)) {
+ *   - hw/ppc/spapr_pci.c|808| <<spapr_phb_vfio_get_loc_code>> if (!g_file_get_contents(path, &buf, NULL, NULL)) {
+ *   - hw/vfio/iommufd.c|209| <<iommufd_cdev_getfd>> if (!g_file_get_contents(vfio_dev_path, &contents, &length, NULL)) {
+ *   - hw/vfio/platform.c|595| <<vfio_platform_realize>> if (!g_file_get_contents(path, &contents, &length, &gerr)) {
+ *   - hw/virtio/vhost-backend.c|58| <<vhost_kernel_memslots_limit>> if (g_file_get_contents("/sys/module/vhost/parameters/max_mem_regions",
+ *   - hw/virtio/virtio-mem.c|112| <<virtio_mem_thp_size>> if (g_file_get_contents(HPAGE_PMD_SIZE_PATH, &content, NULL, NULL) &&
+ *   - qga/commands-common-ssh.c|15| <<read_authkeys>> if (!g_file_get_contents(path, &contents, NULL, &err)) {
+ *   - qga/commands-linux.c|1002| <<qmp_guest_get_disks>> if (!g_file_get_contents(size_path, &line, NULL, NULL)) {
+ *   - qga/commands-posix-ssh.c|286| <<test_authorized_keys_equal>> g_file_get_contents(path, &contents, NULL, &err);
+ *   - qga/commands-posix.c|1257| <<ga_parse_osrelease>> if (!g_file_get_contents(fname, &content, NULL, &err)) {
+ *   - system/device_tree.c|184| <<read_fstree>> if (!g_file_get_contents(tmpnam, &val, &len, NULL)) {
+ *   - system/physmem.c|1302| <<get_file_size>> if (g_file_get_contents(size_path, &size_str, NULL, NULL)) {
+ *   - system/vl.c|1193| <<parse_fw_cfg>> if (!g_file_get_contents(file, &buf, &size, &err)) {
+ *   - target/i386/kvm/vmsr_energy.c|219| <<vmsr_count_cpus_per_package>> if (!g_file_get_contents(path, &file_contents, &length, NULL)) {
+ *   - target/i386/kvm/vmsr_energy.c|247| <<vmsr_get_physical_package_id>> if (!g_file_get_contents(file_path, &file_contents, &length, NULL)) {
+ *   - target/i386/sev.c|752| <<sev_read_file_base64>> if (!g_file_get_contents(filename, &base64, &sz, &error)) {
+ *   - target/ppc/kvm.c|1863| <<kvmppc_get_host_serial>> return g_file_get_contents("/proc/device-tree/system-id", value, NULL,
+ *   - target/ppc/kvm.c|1869| <<kvmppc_get_host_model>> return g_file_get_contents("/proc/device-tree/model", value, NULL, NULL);
+ *   - tests/qtest/bios-tables-test.c|338| <<load_asl>> ret = g_file_get_contents(sdt->asl_file, &sdt->asl,
+ *   - tests/qtest/bios-tables-test.c|421| <<load_expected_aml>> ret = g_file_get_contents(aml_file, (gchar **)&exp_sdt.aml,
+ *   - tests/qtest/migration-test.c|1829| <<file_check_offset_region>> g_assert(g_file_get_contents(path, &actual, NULL, NULL));
+ *   - tests/unit/test-char.c|1335| <<char_file_test_internal>> ret = g_file_get_contents(out, &contents, &length, NULL);
+ *   - tests/unit/test-seccomp.c|201| <<can_play_with_seccomp>> if (!g_file_get_contents("/proc/self/status", &status, NULL, NULL)) {
+ *   - util/mmap-alloc.c|125| <<map_noreserve_effective>> if (g_file_get_contents(OVERCOMMIT_MEMORY_PATH, &content, NULL, NULL) &&
+ *   - util/oslib-posix.c|652| <<qemu_get_pid_name>> g_file_get_contents(pid_path, &name, &len, NULL);
+ *   - util/qemu-coroutine.c|376| <<get_global_pool_hard_max_size>> if (g_file_get_contents("/proc/sys/vm/max_map_count", &contents, NULL,
+ *   - util/selfmap.c|19| <<read_self_maps>> if (!g_file_get_contents("/proc/self/maps", &maps, NULL, NULL)) {
+ */
+
 static unsigned int get_global_pool_hard_max_size(void)
 {
 #ifdef __linux__
-- 
2.39.5 (Apple Git-154)

