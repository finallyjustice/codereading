From ee9ec0a938c8a9ae600eac7f3211f8ef9f2ac953 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang@oracle.com>
Date: Mon, 26 Oct 2020 09:27:00 -0700
Subject: [PATCH 1/1] linux uek5 v4.14.35-2025.401.4

Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
---
 drivers/net/tap.c            |  11 ++++
 drivers/net/virtio_net.c     | 113 +++++++++++++++++++++++++++++++++++
 drivers/virtio/virtio_ring.c |   5 ++
 3 files changed, 129 insertions(+)

diff --git a/drivers/net/tap.c b/drivers/net/tap.c
index 773a3fea8f0e..1325058cc2d5 100644
--- a/drivers/net/tap.c
+++ b/drivers/net/tap.c
@@ -118,6 +118,9 @@ static const struct proto_ops tap_socket_ops;
 #define RX_OFFLOADS (NETIF_F_GRO | NETIF_F_LRO)
 #define TAP_FEATURES (NETIF_F_GSO | NETIF_F_SG | NETIF_F_FRAGLIST)
 
+/*
+ * 返回net_device->rx_handler_data
+ */
 static struct tap_dev *tap_dev_get_rcu(const struct net_device *dev)
 {
 	return rcu_dereference(dev->rx_handler_data);
@@ -314,6 +317,11 @@ void tap_del_queues(struct tap_dev *tap)
 }
 EXPORT_SYMBOL_GPL(tap_del_queues);
 
+/*
+ * 在以下使用tap_handle_frame():
+ *   - drivers/net/ipvlan/ipvtap.c|93| <<ipvtap_newlink>> err = netdev_rx_handler_register(dev, tap_handle_frame, &vlantap->tap);
+ *   - drivers/net/macvtap.c|101| <<macvtap_newlink>> err = netdev_rx_handler_register(dev, tap_handle_frame, &vlantap->tap);
+ */
 rx_handler_result_t tap_handle_frame(struct sk_buff **pskb)
 {
 	struct sk_buff *skb = *pskb;
@@ -322,6 +330,9 @@ rx_handler_result_t tap_handle_frame(struct sk_buff **pskb)
 	struct tap_queue *q;
 	netdev_features_t features = TAP_FEATURES;
 
+	/*
+	 * 返回net_device->rx_handler_data
+	 */
 	tap = tap_dev_get_rcu(dev);
 	if (!tap)
 		return RX_HANDLER_PASS;
diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 9a91ce8037c3..6daedf160fc7 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -171,21 +171,74 @@ struct virtnet_info {
 	unsigned int status;
 
 	/* Max # of queue pairs supported by the device */
+	/*
+	 * 在以下设置virtnet_info->max_queue_pairs:
+	 *   - drivers/net/virtio_net.c|2892| <<virtnet_probe>> vi->max_queue_pairs = max_queue_pairs;
+	 */
 	u16 max_queue_pairs;
 
 	/* # of queue pairs currently used by the driver */
+	/*
+	 * 在以下设置virtnet_info->curr_queue_pairs:
+	 *   - drivers/net/virtio_net.c|1648| <<_virtnet_set_queues>> vi->curr_queue_pairs = queue_pairs;
+	 *   - drivers/net/virtio_net.c|2889| <<virtnet_probe>> vi->curr_queue_pairs = max_queue_pairs;
+	 *   - drivers/net/virtio_net.c|2891| <<virtnet_probe>> vi->curr_queue_pairs = num_online_cpus();
+	 */
 	u16 curr_queue_pairs;
 
 	/* # of XDP queue pairs currently used by the driver */
+	/*
+	 * 在以下使用virtnet_info->xdp_queue_pairs:
+	 *   - drivers/net/virtio_net.c|425| <<virtnet_xdp_flush>> qp = vi->curr_queue_pairs - vi->xdp_queue_pairs + smp_processor_id();
+	 *   - drivers/net/virtio_net.c|441| <<__virtnet_xdp_xmit>> qp = vi->curr_queue_pairs - vi->xdp_queue_pairs + smp_processor_id();
+	 *   - drivers/net/virtio_net.c|487| <<virtnet_get_headroom>> return vi->xdp_queue_pairs ? VIRTIO_XDP_HEADROOM : 0;
+	 *   - drivers/net/virtio_net.c|1268| <<is_xdp_raw_buffer_queue>> if (q < (vi->curr_queue_pairs - vi->xdp_queue_pairs))
+	 *   - drivers/net/virtio_net.c|2238| <<virtnet_xdp_set>> curr_qp = vi->curr_queue_pairs - vi->xdp_queue_pairs;
+	 *   - drivers/net/virtio_net.c|2268| <<virtnet_xdp_set>> vi->xdp_queue_pairs = xdp_qp;
+	 */
 	u16 xdp_queue_pairs;
 
 	/* I like... big packets and I cannot lie! */
+	/*
+	 * 在以下使用vi->big_packets:
+	 *   - drivers/net/virtio_net.c|918| <<receive_buf>> } else if (vi->big_packets) {
+	 *   - drivers/net/virtio_net.c|928| <<receive_buf>> else if (vi->big_packets)
+	 *   - drivers/net/virtio_net.c|1120| <<try_fill_recv>> else if (vi->big_packets)
+	 *   - drivers/net/virtio_net.c|1209| <<virtnet_receive>> if (!vi->big_packets || vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|2479| <<free_unused_bufs>> } else if (vi->big_packets) {
+	 *   - drivers/net/virtio_net.c|2507| <<mergeable_min_buf_len>> unsigned int packet_len = vi->big_packets ? IP_MAX_MTU : vi->dev->max_mtu;
+	 *   - drivers/net/virtio_net.c|2541| <<virtnet_find_vqs>> if (!vi->big_packets || vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|2845| <<virtnet_probe>> vi->big_packets = true;
+	 *   - drivers/net/virtio_net.c|2881| <<virtnet_probe>> vi->big_packets = true;
+	 */
 	bool big_packets;
 
 	/* Host will merge rx buffers for big packets (shake it! shake it!) */
+	/*
+	 * 在以下使用virtnet_info->mergeable_rx_bufs:
+	 *   - drivers/net/virtio_net.c|364| <<page_to_skb>> if (vi->mergeable_rx_bufs)
+	 *   - drivers/net/virtio_net.c|384| <<page_to_skb>> if (vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|916| <<receive_buf>> if (vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|926| <<receive_buf>> if (vi->mergeable_rx_bufs)
+	 *   - drivers/net/virtio_net.c|1118| <<try_fill_recv>> if (vi->mergeable_rx_bufs)
+	 *   - drivers/net/virtio_net.c|1209| <<virtnet_receive>> if (!vi->big_packets || vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|1394| <<xmit_skb>> if (vi->mergeable_rx_bufs)
+	 *   - drivers/net/virtio_net.c|2227| <<virtnet_xdp_set>> if (vi->mergeable_rx_bufs && !vi->any_header_sg) {
+	 *   - drivers/net/virtio_net.c|2477| <<free_unused_bufs>> if (vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|2541| <<virtnet_find_vqs>> if (!vi->big_packets || vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|2848| <<virtnet_probe>> vi->mergeable_rx_bufs = true;
+	 *   - drivers/net/virtio_net.c|2900| <<virtnet_probe>> if (vi->mergeable_rx_bufs)
+	 */
 	bool mergeable_rx_bufs;
 
 	/* Has control virtqueue */
+	/*
+	 * 在以下使用virtnet_info->has_cvq:
+	 *   - drivers/net/virtio_net.c|1636| <<_virtnet_set_queues>> if (!vi->has_cvq || !virtio_has_feature(vi->vdev, VIRTIO_NET_F_MQ))
+	 *   - drivers/net/virtio_net.c|2550| <<virtnet_find_vqs>> if (vi->has_cvq) {
+	 *   - drivers/net/virtio_net.c|2572| <<virtnet_find_vqs>> if (vi->has_cvq) {
+	 *   - drivers/net/virtio_net.c|2861| <<virtnet_probe>> vi->has_cvq = true;
+	 */
 	bool has_cvq;
 
 	/* Host can handle any s/g split between our header and packet data */
@@ -216,6 +269,13 @@ struct virtnet_info {
 	unsigned long guest_offloads;
 
 	/* failover when STANDBY feature enabled */
+	/*
+	 * 在以下使用virtnet_info->failover:
+	 *   - drivers/net/virtio_net.c|2909| <<virtnet_probe>> vi->failover = net_failover_create(vi->dev);
+	 *   - drivers/net/virtio_net.c|2910| <<virtnet_probe>> if (IS_ERR(vi->failover))
+	 *   - drivers/net/virtio_net.c|2955| <<virtnet_probe>> net_failover_destroy(vi->failover);
+	 *   - drivers/net/virtio_net.c|2990| <<virtnet_remove>> net_failover_destroy(vi->failover);
+	 */
 	struct failover *failover;
 };
 
@@ -293,6 +353,11 @@ static void virtqueue_napi_schedule(struct napi_struct *napi,
 	}
 }
 
+/*
+ * called by:
+ *   - drivers/net/virtio_net.c|1394| <<virtnet_poll>> virtqueue_napi_complete(napi, rq->vq, received);
+ *   - drivers/net/virtio_net.c|1442| <<virtnet_poll_tx>> virtqueue_napi_complete(napi, sq->vq, 0);
+ */
 static void virtqueue_napi_complete(struct napi_struct *napi,
 				    struct virtqueue *vq, int processed)
 {
@@ -687,6 +752,10 @@ static struct sk_buff *receive_big(struct net_device *dev,
 	return NULL;
 }
 
+/*
+ * called by:
+ *   - drivers/net/virtio_net.c|987| <<receive_buf>> skb = receive_mergeable(dev, vi, rq, buf, ctx, len, xdp_xmit);
+ */
 static struct sk_buff *receive_mergeable(struct net_device *dev,
 					 struct virtnet_info *vi,
 					 struct receive_queue *rq,
@@ -902,6 +971,11 @@ static struct sk_buff *receive_mergeable(struct net_device *dev,
 	return NULL;
 }
 
+/*
+ * called by:
+ *   - drivers/net/virtio_net.c|1282| <<virtnet_receive>> bytes += receive_buf(vi, rq, buf, len, ctx, xdp_xmit);
+ *   - drivers/net/virtio_net.c|1288| <<virtnet_receive>> bytes += receive_buf(vi, rq, buf, len, NULL, xdp_xmit);
+ */
 static int receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
 		       void *buf, unsigned int len, void **ctx, bool *xdp_xmit)
 {
@@ -923,6 +997,21 @@ static int receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
 		return 0;
 	}
 
+	/*
+	 * 在以下使用virtnet_info->mergeable_rx_bufs:
+	 *   - drivers/net/virtio_net.c|364| <<page_to_skb>> if (vi->mergeable_rx_bufs)
+	 *   - drivers/net/virtio_net.c|384| <<page_to_skb>> if (vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|916| <<receive_buf>> if (vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|926| <<receive_buf>> if (vi->mergeable_rx_bufs)
+	 *   - drivers/net/virtio_net.c|1118| <<try_fill_recv>> if (vi->mergeable_rx_bufs)
+	 *   - drivers/net/virtio_net.c|1209| <<virtnet_receive>> if (!vi->big_packets || vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|1394| <<xmit_skb>> if (vi->mergeable_rx_bufs)
+	 *   - drivers/net/virtio_net.c|2227| <<virtnet_xdp_set>> if (vi->mergeable_rx_bufs && !vi->any_header_sg) {
+	 *   - drivers/net/virtio_net.c|2477| <<free_unused_bufs>> if (vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|2541| <<virtnet_find_vqs>> if (!vi->big_packets || vi->mergeable_rx_bufs) {
+	 *   - drivers/net/virtio_net.c|2848| <<virtnet_probe>> vi->mergeable_rx_bufs = true;
+	 *   - drivers/net/virtio_net.c|2900| <<virtnet_probe>> if (vi->mergeable_rx_bufs)
+	 */
 	if (vi->mergeable_rx_bufs)
 		skb = receive_mergeable(dev, vi, rq, buf, ctx, len, xdp_xmit);
 	else if (vi->big_packets)
@@ -956,6 +1045,11 @@ static int receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
 	return ret;
 
 frame_err:
+	/*
+	 * struct net_device *dev:
+	 *  -> struct net_device_stats stats;
+	 *      -> rx_frame_errors;
+	 */
 	dev->stats.rx_frame_errors++;
 	dev_kfree_skb(skb);
 	return 0;
@@ -1107,6 +1201,13 @@ static int add_recvbuf_mergeable(struct virtnet_info *vi,
  * before we're receiving packets, or from refill_work which is
  * careful to disable receiving (using napi_disable).
  */
+/*
+ * called by:
+ *   - drivers/net/virtio_net.c|1189| <<refill_work>> still_empty = !try_fill_recv(vi, rq, GFP_KERNEL);
+ *   - drivers/net/virtio_net.c|1226| <<virtnet_receive>> if (!try_fill_recv(vi, rq, GFP_ATOMIC))
+ *   - drivers/net/virtio_net.c|1328| <<virtnet_open>> if (!try_fill_recv(vi, &vi->rq[i], GFP_KERNEL))
+ *   - drivers/net/virtio_net.c|2156| <<virtnet_restore_up>> if (!try_fill_recv(vi, &vi->rq[i], GFP_KERNEL))
+ */
 static bool try_fill_recv(struct virtnet_info *vi, struct receive_queue *rq,
 			  gfp_t gfp)
 {
@@ -1197,12 +1298,20 @@ static void refill_work(struct work_struct *work)
 	}
 }
 
+/*
+ * called by:
+ *   - drivers/net/virtio_net.c|1395| <<virtnet_poll>> received = virtnet_receive(rq, budget, &xdp_xmit);
+ */
 static int virtnet_receive(struct receive_queue *rq, int budget, bool *xdp_xmit)
 {
 	struct virtnet_info *vi = rq->vq->vdev->priv;
 	unsigned int len, received = 0, bytes = 0;
 	void *buf;
 
+	/*
+	 * vi->big_packets也可能是true
+	 * vi->mergeable_rx_bufs也可能是true
+	 */
 	if (!vi->big_packets || vi->mergeable_rx_bufs) {
 		void *ctx;
 
@@ -1289,6 +1398,10 @@ static void virtnet_poll_cleantx(struct receive_queue *rq)
 		netif_tx_wake_queue(txq);
 }
 
+/*
+ * 在以下使用virtnet_poll():
+ *   - drivers/net/virtio_net.c|2613| <<virtnet_alloc_queues>> netif_napi_add(vi->dev, &vi->rq[i].napi, virtnet_poll, napi_weight);
+ */
 static int virtnet_poll(struct napi_struct *napi, int budget)
 {
 	struct receive_queue *rq =
diff --git a/drivers/virtio/virtio_ring.c b/drivers/virtio/virtio_ring.c
index b82bb0b08161..dcf22a82ff31 100644
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -675,6 +675,11 @@ static void detach_buf(struct vring_virtqueue *vq, unsigned int head,
 	}
 }
 
+/*
+ * called by:
+ *   - drivers/virtio/virtio_ring.c|714| <<virtqueue_get_buf_ctx>> if (!more_used(vq)) {
+ *   - drivers/virtio/virtio_ring.c|941| <<vring_interrupt>> if (!more_used(vq)) {
+ */
 static inline bool more_used(const struct vring_virtqueue *vq)
 {
 	return vq->last_used_idx != virtio16_to_cpu(vq->vq.vdev, vq->vring.used->idx);
-- 
2.17.1

