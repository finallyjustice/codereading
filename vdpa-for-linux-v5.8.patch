From ef63fbfa5d6647d2c4e78bd80f9b94965cd6b9d9 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Tue, 6 Oct 2020 00:03:56 -0700
Subject: [PATCH 1/1] vdpa for linux v5.8

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 drivers/vdpa/ifcvf/ifcvf_base.c  | 21 +++++++++++++++
 drivers/vdpa/ifcvf/ifcvf_main.c  | 46 ++++++++++++++++++++++++++++++++
 drivers/vdpa/vdpa_sim/vdpa_sim.c | 35 ++++++++++++++++++++++++
 drivers/vhost/vdpa.c             | 25 +++++++++++++++++
 drivers/virtio/virtio_vdpa.c     | 26 ++++++++++++++++++
 include/linux/vdpa.h             |  5 ++++
 6 files changed, 158 insertions(+)

diff --git a/drivers/vdpa/ifcvf/ifcvf_base.c b/drivers/vdpa/ifcvf/ifcvf_base.c
index 94bf0328b68d..dcdce4d60712 100644
--- a/drivers/vdpa/ifcvf/ifcvf_base.c
+++ b/drivers/vdpa/ifcvf/ifcvf_base.c
@@ -302,6 +302,15 @@ int ifcvf_set_vq_state(struct ifcvf_hw *hw, u16 qid, u64 num)
 	return 0;
 }
 
+/*
+ * called by:
+ *   - drivers/vdpa/ifcvf/ifcvf_base.c|373| <<ifcvf_start_hw>> if (ifcvf_hw_enable(hw) < 0)
+ *
+ * struct vdpa_config_ops ifc_vdpa_ops.set_status = ifcvf_vdpa_set_status()
+ * -> ifcvf_start_datapath()
+ *    -> ifcvf_start_hw()
+ *       -> ifcvf_hw_enable()
+ */
 static int ifcvf_hw_enable(struct ifcvf_hw *hw)
 {
 	struct virtio_pci_common_cfg __iomem *cfg;
@@ -361,6 +370,14 @@ static void ifcvf_hw_disable(struct ifcvf_hw *hw)
 	ifc_ioread16(&cfg->queue_msix_vector);
 }
 
+/*
+ * called by:
+ *   - drivers/vdpa/ifcvf/ifcvf_main.c|110| <<ifcvf_start_datapath>> ret = ifcvf_start_hw(vf);
+ *
+ * struct vdpa_config_ops ifc_vdpa_ops.set_status = ifcvf_vdpa_set_status()
+ * -> ifcvf_start_datapath()
+ *    -> ifcvf_start_hw()
+ */
 int ifcvf_start_hw(struct ifcvf_hw *hw)
 {
 	ifcvf_reset(hw);
@@ -384,6 +401,10 @@ void ifcvf_stop_hw(struct ifcvf_hw *hw)
 	ifcvf_reset(hw);
 }
 
+/*
+ * called by:
+ *   - drivers/vdpa/ifcvf/ifcvf_main.c|324| <<ifcvf_vdpa_kick_vq>> ifcvf_notify_queue(vf, qid);
+ */
 void ifcvf_notify_queue(struct ifcvf_hw *hw, u16 qid)
 {
 	ifc_iowrite16(qid, hw->vring[qid].notify_addr);
diff --git a/drivers/vdpa/ifcvf/ifcvf_main.c b/drivers/vdpa/ifcvf/ifcvf_main.c
index f5a60c14b979..280c92b6d63a 100644
--- a/drivers/vdpa/ifcvf/ifcvf_main.c
+++ b/drivers/vdpa/ifcvf/ifcvf_main.c
@@ -100,6 +100,13 @@ static int ifcvf_request_irq(struct ifcvf_adapter *adapter)
 	return 0;
 }
 
+/*
+ * called by:
+ *   - drivers/vdpa/ifcvf/ifcvf_main.c|224| <<ifcvf_vdpa_set_status>> if (ifcvf_start_datapath(adapter) < 0)
+ *
+ * struct vdpa_config_ops ifc_vdpa_ops.set_status = ifcvf_vdpa_set_status()
+ * -> ifcvf_start_datapath()
+ */
 static int ifcvf_start_datapath(void *private)
 {
 	struct ifcvf_hw *vf = ifcvf_private_to_vf(private);
@@ -186,6 +193,15 @@ static u8 ifcvf_vdpa_get_status(struct vdpa_device *vdpa_dev)
 	return ifcvf_get_status(vf);
 }
 
+/*
+ * called by:
+ *   - drivers/vhost/vdpa.c|128| <<vhost_vdpa_reset>> ops->set_status(vdpa, 0);
+ *   - drivers/vhost/vdpa.c|175| <<vhost_vdpa_set_status>> ops->set_status(vdpa, status);
+ *   - drivers/virtio/virtio_vdpa.c|98| <<virtio_vdpa_set_status>> return ops->set_status(vdpa, status);
+ *   - drivers/virtio/virtio_vdpa.c|106| <<virtio_vdpa_reset>> return ops->set_status(vdpa, 0);
+ *
+ * struct vdpa_config_ops ifc_vdpa_ops.set_status = ifcvf_vdpa_set_status()
+ */
 static void ifcvf_vdpa_set_status(struct vdpa_device *vdpa_dev, u8 status)
 {
 	struct ifcvf_adapter *adapter;
@@ -287,6 +303,13 @@ static int ifcvf_vdpa_set_vq_address(struct vdpa_device *vdpa_dev, u16 qid,
 {
 	struct ifcvf_hw *vf = vdpa_to_vf(vdpa_dev);
 
+	/*
+	 * 在以下会用到vf->vring[qid].desc:
+	 * struct vdpa_config_ops ifc_vdpa_ops.set_status = ifcvf_vdpa_set_status()
+	 * -> ifcvf_start_datapath()
+	 *    -> ifcvf_start_hw()
+	 *       -> ifcvf_hw_enable()
+	 */
 	vf->vring[qid].desc = desc_area;
 	vf->vring[qid].avail = driver_area;
 	vf->vring[qid].used = device_area;
@@ -294,6 +317,13 @@ static int ifcvf_vdpa_set_vq_address(struct vdpa_device *vdpa_dev, u16 qid,
 	return 0;
 }
 
+/*
+ * called by:
+ *   - drivers/vhost/vdpa.c|98| <<handle_vq_kick>> ops->kick_vq(v->vdpa, vq - v->vqs);
+ *   - drivers/virtio/virtio_vdpa.c|119| <<virtio_vdpa_notify>> ops->kick_vq(vdpa, vq->index);
+ *
+ * struct vdpa_config_ops ifc_vdpa_ops.kick_vq = ifcvf_vdpa_kick_vq()
+ */
 static void ifcvf_vdpa_kick_vq(struct vdpa_device *vdpa_dev, u16 qid)
 {
 	struct ifcvf_hw *vf = vdpa_to_vf(vdpa_dev);
@@ -419,6 +449,11 @@ static int ifcvf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		return ret;
 	}
 
+	/*
+	 * 在以下调用vdpa_alloc_device():
+	 *   - drivers/vdpa/ifcvf/ifcvf_main.c|452| <<ifcvf_probe>> adapter = vdpa_alloc_device(struct ifcvf_adapter, vdpa,
+	 *   - drivers/vdpa/vdpa_sim/vdpa_sim.c|314| <<vdpasim_create>> vdpasim = vdpa_alloc_device(struct vdpasim, vdpa, NULL,
+	 */
 	adapter = vdpa_alloc_device(struct ifcvf_adapter, vdpa,
 				    dev, &ifc_vdpa_ops);
 	if (adapter == NULL) {
@@ -441,6 +476,17 @@ static int ifcvf_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		goto err;
 	}
 
+	/*
+	 * vdpa_register_device - register a vDPA device
+	 * Callers must have a succeed call of vdpa_alloc_device() before.
+	 * @vdev: the vdpa device to be registered to vDPA bus
+	 *
+	 * Returns an error when fail to add to vDPA bus
+	 *
+	 * called by:
+	 *   - drivers/vdpa/ifcvf/ifcvf_main.c|474| <<ifcvf_probe>> ret = vdpa_register_device(&adapter->vdpa);
+	 *   - drivers/vdpa/vdpa_sim/vdpa_sim.c|343| <<vdpasim_create>> ret = vdpa_register_device(&vdpasim->vdpa);
+	 */
 	ret = vdpa_register_device(&adapter->vdpa);
 	if (ret) {
 		IFCVF_ERR(pdev, "Failed to register ifcvf to vdpa bus");
diff --git a/drivers/vdpa/vdpa_sim/vdpa_sim.c b/drivers/vdpa/vdpa_sim/vdpa_sim.c
index c7334cc65bb2..2f51497df91d 100644
--- a/drivers/vdpa/vdpa_sim/vdpa_sim.c
+++ b/drivers/vdpa/vdpa_sim/vdpa_sim.c
@@ -48,6 +48,12 @@ struct vdpasim_virtqueue {
 
 #define VDPASIM_QUEUE_ALIGN PAGE_SIZE
 #define VDPASIM_QUEUE_MAX 256
+/*
+ * 在以下使用VDPASIM_DEVICE_ID:
+ *   - drivers/vdpa/vdpa_sim/vdpa_sim.c|503| <<vdpasim_get_device_id>> return VDPASIM_DEVICE_ID;
+ *
+ * #define VIRTIO_ID_NET 1
+ */
 #define VDPASIM_DEVICE_ID 0x1
 #define VDPASIM_VENDOR_ID 0
 #define VDPASIM_VQ_NUM 0x2
@@ -374,6 +380,35 @@ static void vdpasim_set_vq_num(struct vdpa_device *vdpa, u16 idx, u32 num)
 	vq->num = num;
 }
 
+/*
+ * 对于virtio-vdpa:
+ * [0] vdpasim_kick_vq
+ * [0] virtio_vdpa_notify
+ * [0] virtqueue_notify
+ * [0] start_xmit
+ * [0] dev_hard_start_xmit
+ * [0] sch_direct_xmit
+ * [0] __qdisc_run
+ * [0] __dev_queue_xmit
+ * [0] packet_sendmsg
+ * [0] sock_sendmsg
+ * [0] sock_write_iter
+ * [0] new_sync_write
+ * [0] vfs_write
+ * [0] ksys_write
+ * [0] do_syscall_64
+ * [0] entry_SYSCALL_64_after_hwframe
+ *
+ * 对于vhost-vdpa:
+ * [0] vdpasim_kick_vq
+ * [0] vhost_poll_wakeup
+ * [0] __wake_up_common
+ * [0] eventfd_write
+ * [0] vfs_write
+ * [0] ksys_write
+ * [0] do_syscall_64
+ * [0] entry_SYSCALL_64_after_hwframe
+ */
 static void vdpasim_kick_vq(struct vdpa_device *vdpa, u16 idx)
 {
 	struct vdpasim *vdpasim = vdpa_to_sim(vdpa);
diff --git a/drivers/vhost/vdpa.c b/drivers/vhost/vdpa.c
index a54b60d6623f..de22da3901be 100644
--- a/drivers/vhost/vdpa.c
+++ b/drivers/vhost/vdpa.c
@@ -90,6 +90,11 @@ static void handle_vq_kick(struct vhost_work *work)
 	struct vhost_vdpa *v = container_of(vq->dev, struct vhost_vdpa, vdev);
 	const struct vdpa_config_ops *ops = v->vdpa->config;
 
+	/*
+	 * kick_vq()有2种可能:
+	 *   - drivers/vdpa/ifcvf/ifcvf_main.c|372| <<global>> .kick_vq = ifcvf_vdpa_kick_vq,
+	 *   - drivers/vdpa/vdpa_sim/vdpa_sim.c|611| <<global>> .kick_vq = vdpasim_kick_vq,
+	 */
 	ops->kick_vq(v->vdpa, vq - v->vqs);
 }
 
@@ -369,6 +374,11 @@ static long vhost_vdpa_vring_ioctl(struct vhost_vdpa *v, unsigned int cmd,
 
 	switch (cmd) {
 	case VHOST_SET_VRING_ADDR:
+		/*
+		 * set_vq_address()有以下2种情况:
+		 *   - drivers/vdpa/ifcvf/ifcvf_main.c|371| <<global>> .set_vq_address = ifcvf_vdpa_set_vq_address,
+		 *   - drivers/vdpa/vdpa_sim/vdpa_sim.c|609| <<global>> .set_vq_address = vdpasim_set_vq_address,
+		 */
 		if (ops->set_vq_address(vdpa, idx,
 					(u64)(uintptr_t)vq->desc,
 					(u64)(uintptr_t)vq->avail,
@@ -868,6 +878,21 @@ static void vhost_vdpa_release_dev(struct device *device)
 	kfree(v);
 }
 
+/*
+ * [0] vhost_vdpa_probe
+ * [0] really_probe
+ * [0] driver_probe_device
+ * [0] device_driver_attach
+ * [0] __driver_attach
+ * [0] bus_for_each_dev
+ * [0] bus_add_driver
+ * [0] driver_register
+ * [0] vhost_vdpa_init
+ * [0] do_one_initcall
+ * [0] kernel_init_freeable
+ * [0] kernel_init
+ * [0] ret_from_fork
+ */
 static int vhost_vdpa_probe(struct vdpa_device *vdpa)
 {
 	const struct vdpa_config_ops *ops = vdpa->config;
diff --git a/drivers/virtio/virtio_vdpa.c b/drivers/virtio/virtio_vdpa.c
index c30eb55030be..dbe33fd79c78 100644
--- a/drivers/virtio/virtio_vdpa.c
+++ b/drivers/virtio/virtio_vdpa.c
@@ -111,6 +111,11 @@ static bool virtio_vdpa_notify(struct virtqueue *vq)
 	struct vdpa_device *vdpa = vd_get_vdpa(vq->vdev);
 	const struct vdpa_config_ops *ops = vdpa->config;
 
+	/*
+	 * kick_vq()有2种可能:
+	 *   - drivers/vdpa/ifcvf/ifcvf_main.c|372| <<global>> .kick_vq = ifcvf_vdpa_kick_vq,
+	 *   - drivers/vdpa/vdpa_sim/vdpa_sim.c|611| <<global>> .kick_vq = vdpasim_kick_vq,
+	 */
 	ops->kick_vq(vdpa, vq->index);
 
 	return true;
@@ -186,6 +191,11 @@ virtio_vdpa_setup_vq(struct virtio_device *vdev, unsigned int index,
 	driver_addr = virtqueue_get_avail_addr(vq);
 	device_addr = virtqueue_get_used_addr(vq);
 
+	/*
+	 * set_vq_address()有以下2种情况:
+	 *   - drivers/vdpa/ifcvf/ifcvf_main.c|371| <<global>> .set_vq_address = ifcvf_vdpa_set_vq_address,
+	 *   - drivers/vdpa/vdpa_sim/vdpa_sim.c|609| <<global>> .set_vq_address = vdpasim_set_vq_address,
+	 */
 	if (ops->set_vq_address(vdpa, index,
 				desc_addr, driver_addr,
 				device_addr)) {
@@ -334,6 +344,22 @@ static void virtio_vdpa_release_dev(struct device *_d)
 	kfree(vd_dev);
 }
 
+/*
+ * [0] virtio_vdpa_probe
+ * [0] really_probe
+ * [0] driver_probe_device
+ * [0] bus_for_each_drv
+ * [0] __device_attach
+ * [0] bus_probe_device
+ * [0] device_add
+ * [0] vdpasim_dev_init
+ * [0] do_one_initcall
+ * [0] kernel_init_freeable
+ * [0] kernel_init
+ * [0] ret_from_fork
+ *
+ * struct vdpa_driver virtio_vdpa_driver.probe = virtio_vdpa_probe()
+ */
 static int virtio_vdpa_probe(struct vdpa_device *vdpa)
 {
 	const struct vdpa_config_ops *ops = vdpa->config;
diff --git a/include/linux/vdpa.h b/include/linux/vdpa.h
index 239db794357c..0b446e4f4c2d 100644
--- a/include/linux/vdpa.h
+++ b/include/linux/vdpa.h
@@ -210,6 +210,11 @@ struct vdpa_device *__vdpa_alloc_device(struct device *parent,
 					const struct vdpa_config_ops *config,
 					size_t size);
 
+/*
+ * 在以下调用vdpa_alloc_device():
+ *   - drivers/vdpa/ifcvf/ifcvf_main.c|452| <<ifcvf_probe>> adapter = vdpa_alloc_device(struct ifcvf_adapter, vdpa,
+ *   - drivers/vdpa/vdpa_sim/vdpa_sim.c|314| <<vdpasim_create>> vdpasim = vdpa_alloc_device(struct vdpasim, vdpa, NULL,
+ */
 #define vdpa_alloc_device(dev_struct, member, parent, config)   \
 			  container_of(__vdpa_alloc_device( \
 				       parent, config, \
-- 
2.17.1

