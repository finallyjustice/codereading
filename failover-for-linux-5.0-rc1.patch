From bd6f9fc7a71383f5bd7213fcdd84cf6afb60eb5e Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang@oracle.com>
Date: Wed, 9 Jan 2019 01:12:31 +0800
Subject: [PATCH 1/1] failover for linux-5.0-rc1

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 drivers/net/net_failover.c | 86 ++++++++++++++++++++++++++++++++++++++++++++++
 include/net/failover.h     | 28 +++++++++++++++
 net/core/dev.c             |  3 ++
 net/ethernet/eth.c         |  3 ++
 4 files changed, 120 insertions(+)

diff --git a/drivers/net/net_failover.c b/drivers/net/net_failover.c
index ed1166a..9deb754 100644
--- a/drivers/net/net_failover.c
+++ b/drivers/net/net_failover.c
@@ -32,6 +32,9 @@ static bool net_failover_xmit_ready(struct net_device *dev)
 	return netif_running(dev) && netif_carrier_ok(dev);
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_open = net_failover_open()
+ */
 static int net_failover_open(struct net_device *dev)
 {
 	struct net_failover_info *nfo_info = netdev_priv(dev);
@@ -67,6 +70,9 @@ static int net_failover_open(struct net_device *dev)
 	return err;
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_stop = net_failover_close()
+ */
 static int net_failover_close(struct net_device *dev)
 {
 	struct net_failover_info *nfo_info = netdev_priv(dev);
@@ -93,6 +99,9 @@ static netdev_tx_t net_failover_drop_xmit(struct sk_buff *skb,
 	return NETDEV_TX_OK;
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_start_xmit = net_failover_start_xmit()
+ */
 static netdev_tx_t net_failover_start_xmit(struct sk_buff *skb,
 					   struct net_device *dev)
 {
@@ -113,6 +122,9 @@ static netdev_tx_t net_failover_start_xmit(struct sk_buff *skb,
 	return dev_queue_xmit(skb);
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_select_queue = net_failover_select_queue()
+ */
 static u16 net_failover_select_queue(struct net_device *dev,
 				     struct sk_buff *skb,
 				     struct net_device *sb_dev,
@@ -180,6 +192,9 @@ static void net_failover_fold_stats(struct rtnl_link_stats64 *_res,
 	}
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_get_stats64 = net_failover_get_stats()
+ */
 static void net_failover_get_stats(struct net_device *dev,
 				   struct rtnl_link_stats64 *stats)
 {
@@ -213,6 +228,9 @@ static void net_failover_get_stats(struct net_device *dev,
 	spin_unlock(&nfo_info->stats_lock);
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_change_mtu = net_failover_change_mtu()
+ */
 static int net_failover_change_mtu(struct net_device *dev, int new_mtu)
 {
 	struct net_failover_info *nfo_info = netdev_priv(dev);
@@ -241,6 +259,9 @@ static int net_failover_change_mtu(struct net_device *dev, int new_mtu)
 	return 0;
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_set_rx_mode = net_failover_set_rx_mode()
+ */
 static void net_failover_set_rx_mode(struct net_device *dev)
 {
 	struct net_failover_info *nfo_info = netdev_priv(dev);
@@ -263,6 +284,9 @@ static void net_failover_set_rx_mode(struct net_device *dev)
 	rcu_read_unlock();
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_vlan_rx_add_vid = net_failover_vlan_rx_add_vid()
+ */
 static int net_failover_vlan_rx_add_vid(struct net_device *dev, __be16 proto,
 					u16 vid)
 {
@@ -288,6 +312,9 @@ static int net_failover_vlan_rx_add_vid(struct net_device *dev, __be16 proto,
 	return ret;
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_vlan_rx_kill_vid = net_failover_vlan_rx_kill_vid()
+ */
 static int net_failover_vlan_rx_kill_vid(struct net_device *dev, __be16 proto,
 					 u16 vid)
 {
@@ -305,6 +332,10 @@ static int net_failover_vlan_rx_kill_vid(struct net_device *dev, __be16 proto,
 	return 0;
 }
 
+/*
+ * used by:
+ *   - drivers/net/net_failover.c|800| <<net_failover_create>> failover_dev->netdev_ops = &failover_dev_ops;
+ */
 static const struct net_device_ops failover_dev_ops = {
 	.ndo_open		= net_failover_open,
 	.ndo_stop		= net_failover_close,
@@ -360,6 +391,12 @@ static const struct ethtool_ops failover_ethtool_ops = {
  * Change the associated network device from lower dev to failover dev.
  * note: already called with rcu_read_lock
  */
+/*
+ * used by:
+ *   - net/core/failover.c|66| <<failover_slave_register>> err = netdev_rx_handler_register(slave_dev, fops->slave_handle_frame,
+ * 
+ * struct failover_ops net_failover_ops.slave_handle_frame = net_failover_handle_frame()
+ */
 static rx_handler_result_t net_failover_handle_frame(struct sk_buff **pskb)
 {
 	struct sk_buff *skb = *pskb;
@@ -460,6 +497,12 @@ static void net_failover_lower_state_changed(struct net_device *slave_dev,
 	netdev_lower_state_changed(slave_dev, &info);
 }
 
+/*
+ * called by:
+ *   - net/core/failover.c|63| <<failover_slave_register>> fops->slave_pre_register(slave_dev, failover_dev))
+ *
+ * struct failover_ops net_failover_ops.slave_pre_register = net_failover_slave_pre_register()
+ */
 static int net_failover_slave_pre_register(struct net_device *slave_dev,
 					   struct net_device *failover_dev)
 {
@@ -496,6 +539,12 @@ static int net_failover_slave_pre_register(struct net_device *slave_dev,
 	return 0;
 }
 
+/*
+ * called by:
+ *   - net/core/failover.c|86| <<failover_slave_register>> !fops->slave_register(slave_dev, failover_dev))
+ *
+ * struct failover_ops net_failover_ops.slave_register = net_failover_slave_register()
+ */
 static int net_failover_slave_register(struct net_device *slave_dev,
 				       struct net_device *failover_dev)
 {
@@ -575,6 +624,12 @@ static int net_failover_slave_register(struct net_device *slave_dev,
 	return err;
 }
 
+/*
+ * called by:
+ *   - net/core/failover.c|119| <<failover_slave_unregister>> fops->slave_pre_unregister(slave_dev, failover_dev))
+ *
+ * struct failover_ops net_failover_ops.slave_pre_unregister = net_failover_slave_pre_unregister()
+ */
 static int net_failover_slave_pre_unregister(struct net_device *slave_dev,
 					     struct net_device *failover_dev)
 {
@@ -591,6 +646,12 @@ static int net_failover_slave_pre_unregister(struct net_device *slave_dev,
 	return 0;
 }
 
+/*
+ * called by:
+ *   - net/core/failover.c|127| <<failover_slave_unregister>> !fops->slave_unregister(slave_dev, failover_dev))
+ *
+ * struct failover_ops net_failover_ops.slave_unregister = net_failover_slave_unregister()
+ */
 static int net_failover_slave_unregister(struct net_device *slave_dev,
 					 struct net_device *failover_dev)
 {
@@ -634,6 +695,12 @@ static int net_failover_slave_unregister(struct net_device *slave_dev,
 	return 0;
 }
 
+/*
+ * called by:
+ *   - net/core/failover.c|153| <<failover_slave_link_change>> !fops->slave_link_change(slave_dev, failover_dev))
+ *
+ * struct failover_ops net_failover_ops.slave_link_change = net_failover_slave_link_change()
+ */
 static int net_failover_slave_link_change(struct net_device *slave_dev,
 					  struct net_device *failover_dev)
 {
@@ -663,6 +730,12 @@ static int net_failover_slave_link_change(struct net_device *slave_dev,
 	return 0;
 }
 
+/*
+ * called by:
+ *   - net/core/failover.c|178| <<failover_slave_name_change>> !fops->slave_name_change(slave_dev, failover_dev))
+ *
+ * struct failover_ops net_failover_ops.slave_name_change = net_failover_slave_name_change()
+ */
 static int net_failover_slave_name_change(struct net_device *slave_dev,
 					  struct net_device *failover_dev)
 {
@@ -685,6 +758,10 @@ static int net_failover_slave_name_change(struct net_device *slave_dev,
 	return 0;
 }
 
+/*
+ * used by:
+ *   - drivers/net/net_failover.c|808| <<net_failover_create>> failover = failover_register(failover_dev, &net_failover_ops);
+ */
 static struct failover_ops net_failover_ops = {
 	.slave_pre_register	= net_failover_slave_pre_register,
 	.slave_register		= net_failover_slave_register,
@@ -708,8 +785,13 @@ static struct failover_ops net_failover_ops = {
  *
  * Return: pointer to failover instance
  */
+/*
+ * called by:
+ *   - drivers/net/virtio_net.c|3078| <<virtnet_probe>> vi->failover = net_failover_create(vi->dev);
+ */
 struct failover *net_failover_create(struct net_device *standby_dev)
 {
+	/* 根据目前的情况, standby_dev就是virtio_net的net_device */
 	struct device *dev = standby_dev->dev.parent;
 	struct net_device *failover_dev;
 	struct failover *failover;
@@ -724,6 +806,10 @@ struct failover *net_failover_create(struct net_device *standby_dev)
 		return ERR_PTR(-ENOMEM);
 	}
 
+	/*
+	 * failover_dev: vf的
+	 * standby_dev : virtio的
+	 */
 	dev_net_set(failover_dev, dev_net(standby_dev));
 	SET_NETDEV_DEV(failover_dev, dev);
 
diff --git a/include/net/failover.h b/include/net/failover.h
index bb15438..07a7cca 100644
--- a/include/net/failover.h
+++ b/include/net/failover.h
@@ -7,18 +7,46 @@
 #include <linux/netdevice.h>
 
 struct failover_ops {
+	/*
+	 * called by:
+	 *   - net/core/failover.c|63| <<failover_slave_register>> fops->slave_pre_register(slave_dev, failover_dev))
+	 */
 	int (*slave_pre_register)(struct net_device *slave_dev,
 				  struct net_device *failover_dev);
+	/*
+	 * called by:
+	 *   - net/core/failover.c|86| <<failover_slave_register>> !fops->slave_register(slave_dev, failover_dev))
+	 */
 	int (*slave_register)(struct net_device *slave_dev,
 			      struct net_device *failover_dev);
+	/*
+	 * called by:
+	 *   - net/core/failover.c|119| <<failover_slave_unregister>> fops->slave_pre_unregister(slave_dev, failover_dev))
+	 */
 	int (*slave_pre_unregister)(struct net_device *slave_dev,
 				    struct net_device *failover_dev);
+	/*
+	 * called by:
+	 *   - net/core/failover.c|127| <<failover_slave_unregister>> !fops->slave_unregister(slave_dev, failover_dev))
+	 */
 	int (*slave_unregister)(struct net_device *slave_dev,
 				struct net_device *failover_dev);
+	/*
+	 * called by:
+	 *   - net/core/failover.c|153| <<failover_slave_link_change>> !fops->slave_link_change(slave_dev, failover_dev))
+	 */
 	int (*slave_link_change)(struct net_device *slave_dev,
 				 struct net_device *failover_dev);
+	/*
+	 * called by:
+	 *   - net/core/failover.c|178| <<failover_slave_name_change>> !fops->slave_name_change(slave_dev, failover_dev))
+	 */
 	int (*slave_name_change)(struct net_device *slave_dev,
 				 struct net_device *failover_dev);
+	/*
+	 * used by:
+	 *   - net/core/failover.c|66| <<failover_slave_register>> err = netdev_rx_handler_register(slave_dev, fops->slave_handle_frame,
+	 */
 	rx_handler_result_t (*slave_handle_frame)(struct sk_buff **pskb);
 };
 
diff --git a/net/core/dev.c b/net/core/dev.c
index 82f2002..b789c86 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3186,6 +3186,9 @@ static netdev_features_t harmonize_features(struct sk_buff *skb,
 	return features;
 }
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_features_check = passthru_features_check()
+ */
 netdev_features_t passthru_features_check(struct sk_buff *skb,
 					  struct net_device *dev,
 					  netdev_features_t features)
diff --git a/net/ethernet/eth.c b/net/ethernet/eth.c
index 4c52011..2e9ed93 100644
--- a/net/ethernet/eth.c
+++ b/net/ethernet/eth.c
@@ -332,6 +332,9 @@ int eth_change_mtu(struct net_device *dev, int new_mtu)
 }
 EXPORT_SYMBOL(eth_change_mtu);
 
+/*
+ * struct net_device_ops failover_dev_ops.ndo_validate_addr = eth_validate_addr()
+ */
 int eth_validate_addr(struct net_device *dev)
 {
 	if (!is_valid_ether_addr(dev->dev_addr))
-- 
2.7.4

