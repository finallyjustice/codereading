From 32b606cafefcc170c36f202cc79b491d2bd03d97 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Wed, 5 Jun 2019 16:01:13 +0800
Subject: [PATCH 1/1] linux-xen-interface-for-linux-4.14.113

xen specific interface linux-4.14.113

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/kernel/reboot.c | 15 ++++++++++++++
 kernel/reboot.c          | 52 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 67 insertions(+)

diff --git a/arch/x86/kernel/reboot.c b/arch/x86/kernel/reboot.c
index 2126b9d..ef53877 100644
--- a/arch/x86/kernel/reboot.c
+++ b/arch/x86/kernel/reboot.c
@@ -717,6 +717,17 @@ static void native_machine_halt(void)
 
 static void native_machine_power_off(void)
 {
+	/*
+	 * 似乎在xen HVM上pm_power_off是drivers/acpi/power.c:acpi_power_off()
+	 *
+	 * called by:
+	 *   - arch/x86/kernel/apm_32.c|1859| <<apm>> pm_power_off = apm_power_off;
+	 *   - drivers/acpi/sleep.c|1274| <<acpi_sleep_init>> pm_power_off = acpi_power_off;
+	 *   - drivers/firmware/efi/reboot.c|72| <<efi_shutdown_init>> pm_power_off = efi_power_off;
+	 *   - drivers/power/reset/piix4-poweroff.c|85| <<piix4_poweroff_probe>> pm_power_off = piix4_poweroff;
+	 *   - drivers/power/reset/restart-poweroff.c|35| <<restart_poweroff_probe>> pm_power_off = &restart_poweroff_do_poweroff;
+	 *   - drivers/power/reset/syscon-poweroff.c|84| <<syscon_poweroff_probe>> pm_power_off = syscon_poweroff;
+	 */
 	if (pm_power_off) {
 		if (!reboot_force)
 			machine_shutdown();
@@ -737,6 +748,10 @@ struct machine_ops machine_ops __ro_after_init = {
 #endif
 };
 
+/*
+ * called by only:
+ *   - kernel/reboot.c|266| <<kernel_power_off>> machine_power_off();
+ */
 void machine_power_off(void)
 {
 	machine_ops.power_off();
diff --git a/kernel/reboot.c b/kernel/reboot.c
index bd30a97..05e5074 100644
--- a/kernel/reboot.c
+++ b/kernel/reboot.c
@@ -48,6 +48,12 @@ int reboot_force;
  * If set, this is used for preparing the system to power off.
  */
 
+/*
+ * 在以下调用和设置:
+ *   - drivers/acpi/sleep.c|1273| <<acpi_sleep_init>> pm_power_off_prepare = acpi_power_off_prepare;
+ *   - kernel/reboot.c|260| <<kernel_power_off>> if (pm_power_off_prepare)
+ *   - kernel/reboot.c|261| <<kernel_power_off>> pm_power_off_prepare();       
+ */
 void (*pm_power_off_prepare)(void);
 
 /**
@@ -254,15 +260,33 @@ EXPORT_SYMBOL_GPL(kernel_halt);
  *
  *	Shutdown everything and perform a clean system power_off.
  */
+/*
+ * 调用的重要例子:
+ *   - kernel/rcu/rcuperf.c|635| <<rcu_perf_shutdown>> kernel_power_off();
+ *   - kernel/reboot.c|334| <<SYSCALL_DEFINE4(reboot)>> kernel_power_off();
+ *   - kernel/reboot.c|457| <<__orderly_poweroff>> kernel_power_off();
+ *   - kernel/torture.c|504| <<torture_shutdown>> kernel_power_off();
+ */
 void kernel_power_off(void)
 {
 	kernel_shutdown_prepare(SYSTEM_POWER_OFF);
+	/*
+	 * 在以下调用和设置:
+	 *   - drivers/acpi/sleep.c|1273| <<acpi_sleep_init>> pm_power_off_prepare = acpi_power_off_prepare;
+	 *   - kernel/reboot.c|260| <<kernel_power_off>> if (pm_power_off_prepare)
+	 *   - kernel/reboot.c|261| <<kernel_power_off>> pm_power_off_prepare();
+	 */
 	if (pm_power_off_prepare)
 		pm_power_off_prepare();
 	migrate_to_reboot_cpu();
 	syscore_shutdown();
 	pr_emerg("Power down\n");
 	kmsg_dump(KMSG_DUMP_POWEROFF);
+	
+	/*
+	 * 在这里delay, 'xm list'的状态没有变成's'
+	 */
+
 	machine_power_off();
 }
 EXPORT_SYMBOL_GPL(kernel_power_off);
@@ -311,6 +335,11 @@ SYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,
 	if ((cmd == LINUX_REBOOT_CMD_POWER_OFF) && !pm_power_off)
 		cmd = LINUX_REBOOT_CMD_HALT;
 
+	/*
+	 * 在ubuntu16.04的HVM上, sys_reboot的current->comm=systemd-shutdow
+	 * cmd = 4321FEDC = LINUX_REBOOT_CMD_POWER_OFF
+	 */
+
 	mutex_lock(&reboot_mutex);
 	switch (cmd) {
 	case LINUX_REBOOT_CMD_RESTART:
@@ -409,6 +438,10 @@ static int run_cmd(const char *cmd)
 	return ret;
 }
 
+/*
+ * called by only:
+ *   - kernel/reboot.c|474| <<reboot_work_func>> __orderly_reboot();
+ */
 static int __orderly_reboot(void)
 {
 	int ret;
@@ -424,6 +457,17 @@ static int __orderly_reboot(void)
 	return ret;
 }
 
+/*
+ * [0] __orderly_poweroff
+ * [0] poweroff_work_func
+ * [0] process_one_work
+ * [0] worker_thread
+ * [0] kthread
+ * [0] ret_from_fork
+ *
+ * called by only:
+ *   - kernel/reboot.c|463| <<poweroff_work_func>> __orderly_poweroff(poweroff_force);
+ */
 static int __orderly_poweroff(bool force)
 {
 	int ret;
@@ -469,11 +513,19 @@ void orderly_poweroff(bool force)
 }
 EXPORT_SYMBOL_GPL(orderly_poweroff);
 
+/*
+ * 只在下面用做reboot_work:
+ *   - kernel/reboot.c|477| <<global>> static DECLARE_WORK(reboot_work, reboot_work_func);
+ */
 static void reboot_work_func(struct work_struct *work)
 {
 	__orderly_reboot();
 }
 
+/*
+ * 只在下面被触发:
+ *   - kernel/reboot.c|487| <<orderly_reboot>> schedule_work(&reboot_work);
+ */
 static DECLARE_WORK(reboot_work, reboot_work_func);
 
 /**
-- 
2.7.4

