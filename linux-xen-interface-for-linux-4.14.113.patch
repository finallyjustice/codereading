From 28c32335bb7b990a3bfa9982919d689c0c250828 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Thu, 7 May 2020 19:33:57 -0700
Subject: [PATCH 1/1] linux-xen-interface-for-linux-4.14.113

xen specific interface linux-4.14.113

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/kernel/reboot.c                   | 15 +++++
 drivers/block/xen-blkfront.c               | 14 ++++
 drivers/xen/xenbus/xenbus_probe_frontend.c | 76 ++++++++++++++++++++++
 kernel/reboot.c                            | 52 +++++++++++++++
 4 files changed, 157 insertions(+)

diff --git a/arch/x86/kernel/reboot.c b/arch/x86/kernel/reboot.c
index 2126b9d2..ef538774 100644
--- a/arch/x86/kernel/reboot.c
+++ b/arch/x86/kernel/reboot.c
@@ -717,6 +717,17 @@ static void native_machine_halt(void)
 
 static void native_machine_power_off(void)
 {
+	/*
+	 * 似乎在xen HVM上pm_power_off是drivers/acpi/power.c:acpi_power_off()
+	 *
+	 * called by:
+	 *   - arch/x86/kernel/apm_32.c|1859| <<apm>> pm_power_off = apm_power_off;
+	 *   - drivers/acpi/sleep.c|1274| <<acpi_sleep_init>> pm_power_off = acpi_power_off;
+	 *   - drivers/firmware/efi/reboot.c|72| <<efi_shutdown_init>> pm_power_off = efi_power_off;
+	 *   - drivers/power/reset/piix4-poweroff.c|85| <<piix4_poweroff_probe>> pm_power_off = piix4_poweroff;
+	 *   - drivers/power/reset/restart-poweroff.c|35| <<restart_poweroff_probe>> pm_power_off = &restart_poweroff_do_poweroff;
+	 *   - drivers/power/reset/syscon-poweroff.c|84| <<syscon_poweroff_probe>> pm_power_off = syscon_poweroff;
+	 */
 	if (pm_power_off) {
 		if (!reboot_force)
 			machine_shutdown();
@@ -737,6 +748,10 @@ struct machine_ops machine_ops __ro_after_init = {
 #endif
 };
 
+/*
+ * called by only:
+ *   - kernel/reboot.c|266| <<kernel_power_off>> machine_power_off();
+ */
 void machine_power_off(void)
 {
 	machine_ops.power_off();
diff --git a/drivers/block/xen-blkfront.c b/drivers/block/xen-blkfront.c
index 32ac5f55..4ad3ef4e 100644
--- a/drivers/block/xen-blkfront.c
+++ b/drivers/block/xen-blkfront.c
@@ -210,6 +210,11 @@ struct blkfront_info
 	unsigned int discard_alignment;
 	/* Number of 4KB segments handled */
 	unsigned int max_indirect_segments;
+	/*
+	 * 在以下使用blkfront的is_ready:
+	 *   - drivers/block/xen-blkfront.c|2404| <<blkfront_connect>> info->is_ready = 1;
+	 *   - drivers/block/xen-blkfront.c|2523| <<blkfront_is_ready>> return info->is_ready && info->xbdev;
+	 */
 	int is_ready;
 	struct blk_mq_tag_set tag_set;
 	struct blkfront_ring_info *rinfo;
@@ -2309,6 +2314,10 @@ static void blkfront_gather_backend_features(struct blkfront_info *info)
  * Invoked when the backend is finally 'ready' (and has told produced
  * the details about the physical device - #sectors, size, etc).
  */
+/*
+ * 处理XenbusStateConnected:
+ *   - drivers/block/xen-blkfront.c|2458| <<blkback_changed>> blkfront_connect(info);
+ */
 static void blkfront_connect(struct blkfront_info *info)
 {
 	unsigned long long sectors;
@@ -2520,6 +2529,11 @@ static int blkfront_is_ready(struct xenbus_device *dev)
 {
 	struct blkfront_info *info = dev_get_drvdata(&dev->dev);
 
+	/*
+	 * 在以下使用blkfront的is_ready:
+	 *   - drivers/block/xen-blkfront.c|2404| <<blkfront_connect>> info->is_ready = 1;
+	 *   - drivers/block/xen-blkfront.c|2523| <<blkfront_is_ready>> return info->is_ready && info->xbdev;
+	 */
 	return info->is_ready && info->xbdev;
 }
 
diff --git a/drivers/xen/xenbus/xenbus_probe_frontend.c b/drivers/xen/xenbus/xenbus_probe_frontend.c
index 19e45ce2..b94e44b9 100644
--- a/drivers/xen/xenbus/xenbus_probe_frontend.c
+++ b/drivers/xen/xenbus/xenbus_probe_frontend.c
@@ -167,11 +167,22 @@ static struct xenbus_watch fe_watch = {
 	.callback = frontend_changed,
 };
 
+/*
+ * 在以下使用read_backend_details():
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|317| <<__xenbus_register_frontend>> drv->read_otherend_details = read_backend_details;
+ */
 static int read_backend_details(struct xenbus_device *xendev)
 {
 	return xenbus_read_otherend_details(xendev, "backend-id", "backend");
 }
 
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|211| <<essential_device_connecting>> return is_device_connecting(dev, data, true );
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|215| <<non_essential_device_connecting>> return is_device_connecting(dev, data, false);
+ *
+ * 除了极特殊的情况(比如blkfront),基本是如果xendev->state < XenbusStateConnected就返回true
+ */
 static int is_device_connecting(struct device *dev, void *data, bool ignore_nonessential)
 {
 	struct xenbus_device *xendev = to_xenbus_device(dev);
@@ -202,30 +213,68 @@ static int is_device_connecting(struct device *dev, void *data, bool ignore_none
 			return 0;
 	}
 	xendrv = to_xenbus_driver(dev->driver);
+	/*
+	 * is_ready()的例子:
+	 *   - blkfront_is_ready()
+	 */
 	return (xendev->state < XenbusStateConnected ||
 		(xendev->state == XenbusStateConnected &&
 		 xendrv->is_ready && !xendrv->is_ready(xendev)));
 }
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|221| <<exists_essential_connecting_device>> essential_device_connecting);
+ */
 static int essential_device_connecting(struct device *dev, void *data)
 {
+	/*
+	 * 除了极特殊的情况(比如blkfront),基本是如果xendev->state < XenbusStateConnected就返回true
+	 */
 	return is_device_connecting(dev, data, true /* ignore PV[KBB+FB] */);
 }
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|226| <<exists_non_essential_connecting_device>> non_essential_device_connecting);
+ */
 static int non_essential_device_connecting(struct device *dev, void *data)
 {
+	/*
+	 * 除了极特殊的情况(比如blkfront),基本是如果xendev->state < XenbusStateConnected就返回true
+	 */
 	return is_device_connecting(dev, data, false);
 }
 
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|301| <<wait_for_devices>> while (exists_essential_connecting_device(drv))
+ */
 static int exists_essential_connecting_device(struct device_driver *drv)
 {
+	/*
+	 * bus_for_each_dev()返回的是essential_device_connecting()的结果
+	 * essential_device_connecting()除了极特殊的情况(比如blkfront),基本是如果xendev->state < XenbusStateConnected就返回true
+	 */
 	return bus_for_each_dev(&xenbus_frontend.bus, NULL, drv,
 				essential_device_connecting);
 }
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|296| <<wait_for_devices>> while (exists_non_essential_connecting_device(drv))
+ */
 static int exists_non_essential_connecting_device(struct device_driver *drv)
 {
+	/*
+	 * bus_for_each_dev()返回的是non_essential_device_connecting()的结果
+	 * essential_device_connecting()除了极特殊的情况(比如blkfront),基本是如果xendev->state < XenbusStateConnected就返回true
+	 */
 	return bus_for_each_dev(&xenbus_frontend.bus, NULL, drv,
 				non_essential_device_connecting);
 }
 
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|309| <<wait_for_devices>> print_device_status);
+ */
 static int print_device_status(struct device *dev, void *data)
 {
 	struct xenbus_device *xendev = to_xenbus_device(dev);
@@ -250,8 +299,20 @@ static int print_device_status(struct device *dev, void *data)
 }
 
 /* We only wait for device setup after most initcalls have run. */
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|293| <<wait_for_devices>> if (!ready_to_wait_for_devices || !xen_domain())
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|492| <<boot_wait_for_devices>> ready_to_wait_for_devices = 1;
+ *
+ * 在模块里用不到吧
+ */
 static int ready_to_wait_for_devices;
 
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|297| <<wait_for_devices>> if (wait_loop(start, 30, &seconds_waited))
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|302| <<wait_for_devices>> if (wait_loop(start, 270, &seconds_waited))
+ */
 static bool wait_loop(unsigned long start, unsigned int max_delay,
 		     unsigned int *seconds_waited)
 {
@@ -284,6 +345,11 @@ static bool wait_loop(unsigned long start, unsigned int max_delay,
  * boot slightly, but of course needs tools or manual intervention to set up
  * those flags correctly.
  */
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|325| <<__xenbus_register_frontend>> wait_for_devices(drv);
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|493| <<boot_wait_for_devices>> wait_for_devices(NULL);
+ */
 static void wait_for_devices(struct xenbus_driver *xendrv)
 {
 	unsigned long start = jiffies;
@@ -293,11 +359,17 @@ static void wait_for_devices(struct xenbus_driver *xendrv)
 	if (!ready_to_wait_for_devices || !xen_domain())
 		return;
 
+	/*
+	 * 除了极特殊的情况(比如blkfront),基本是如果xendev->state < XenbusStateConnected就返回true
+	 */
 	while (exists_non_essential_connecting_device(drv))
 		if (wait_loop(start, 30, &seconds_waited))
 			break;
 
 	/* Skips PVKB and PVFB check.*/
+	/*
+	 * 除了极特殊的情况(比如blkfront),基本是如果xendev->state < XenbusStateConnected就返回true
+	 */
 	while (exists_essential_connecting_device(drv))
 		if (wait_loop(start, 270, &seconds_waited))
 			break;
@@ -309,6 +381,10 @@ static void wait_for_devices(struct xenbus_driver *xendrv)
 			 print_device_status);
 }
 
+/*
+ * called by:
+ *   - include/xen/xenbus.h|122| <<xenbus_register_frontend>> __xenbus_register_frontend(drv, THIS_MODULE, KBUILD_MODNAME)
+ */
 int __xenbus_register_frontend(struct xenbus_driver *drv, struct module *owner,
 			       const char *mod_name)
 {
diff --git a/kernel/reboot.c b/kernel/reboot.c
index bd30a973..05e50743 100644
--- a/kernel/reboot.c
+++ b/kernel/reboot.c
@@ -48,6 +48,12 @@ int reboot_force;
  * If set, this is used for preparing the system to power off.
  */
 
+/*
+ * 在以下调用和设置:
+ *   - drivers/acpi/sleep.c|1273| <<acpi_sleep_init>> pm_power_off_prepare = acpi_power_off_prepare;
+ *   - kernel/reboot.c|260| <<kernel_power_off>> if (pm_power_off_prepare)
+ *   - kernel/reboot.c|261| <<kernel_power_off>> pm_power_off_prepare();       
+ */
 void (*pm_power_off_prepare)(void);
 
 /**
@@ -254,15 +260,33 @@ EXPORT_SYMBOL_GPL(kernel_halt);
  *
  *	Shutdown everything and perform a clean system power_off.
  */
+/*
+ * 调用的重要例子:
+ *   - kernel/rcu/rcuperf.c|635| <<rcu_perf_shutdown>> kernel_power_off();
+ *   - kernel/reboot.c|334| <<SYSCALL_DEFINE4(reboot)>> kernel_power_off();
+ *   - kernel/reboot.c|457| <<__orderly_poweroff>> kernel_power_off();
+ *   - kernel/torture.c|504| <<torture_shutdown>> kernel_power_off();
+ */
 void kernel_power_off(void)
 {
 	kernel_shutdown_prepare(SYSTEM_POWER_OFF);
+	/*
+	 * 在以下调用和设置:
+	 *   - drivers/acpi/sleep.c|1273| <<acpi_sleep_init>> pm_power_off_prepare = acpi_power_off_prepare;
+	 *   - kernel/reboot.c|260| <<kernel_power_off>> if (pm_power_off_prepare)
+	 *   - kernel/reboot.c|261| <<kernel_power_off>> pm_power_off_prepare();
+	 */
 	if (pm_power_off_prepare)
 		pm_power_off_prepare();
 	migrate_to_reboot_cpu();
 	syscore_shutdown();
 	pr_emerg("Power down\n");
 	kmsg_dump(KMSG_DUMP_POWEROFF);
+	
+	/*
+	 * 在这里delay, 'xm list'的状态没有变成's'
+	 */
+
 	machine_power_off();
 }
 EXPORT_SYMBOL_GPL(kernel_power_off);
@@ -311,6 +335,11 @@ SYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,
 	if ((cmd == LINUX_REBOOT_CMD_POWER_OFF) && !pm_power_off)
 		cmd = LINUX_REBOOT_CMD_HALT;
 
+	/*
+	 * 在ubuntu16.04的HVM上, sys_reboot的current->comm=systemd-shutdow
+	 * cmd = 4321FEDC = LINUX_REBOOT_CMD_POWER_OFF
+	 */
+
 	mutex_lock(&reboot_mutex);
 	switch (cmd) {
 	case LINUX_REBOOT_CMD_RESTART:
@@ -409,6 +438,10 @@ static int run_cmd(const char *cmd)
 	return ret;
 }
 
+/*
+ * called by only:
+ *   - kernel/reboot.c|474| <<reboot_work_func>> __orderly_reboot();
+ */
 static int __orderly_reboot(void)
 {
 	int ret;
@@ -424,6 +457,17 @@ static int __orderly_reboot(void)
 	return ret;
 }
 
+/*
+ * [0] __orderly_poweroff
+ * [0] poweroff_work_func
+ * [0] process_one_work
+ * [0] worker_thread
+ * [0] kthread
+ * [0] ret_from_fork
+ *
+ * called by only:
+ *   - kernel/reboot.c|463| <<poweroff_work_func>> __orderly_poweroff(poweroff_force);
+ */
 static int __orderly_poweroff(bool force)
 {
 	int ret;
@@ -469,11 +513,19 @@ void orderly_poweroff(bool force)
 }
 EXPORT_SYMBOL_GPL(orderly_poweroff);
 
+/*
+ * 只在下面用做reboot_work:
+ *   - kernel/reboot.c|477| <<global>> static DECLARE_WORK(reboot_work, reboot_work_func);
+ */
 static void reboot_work_func(struct work_struct *work)
 {
 	__orderly_reboot();
 }
 
+/*
+ * 只在下面被触发:
+ *   - kernel/reboot.c|487| <<orderly_reboot>> schedule_work(&reboot_work);
+ */
 static DECLARE_WORK(reboot_work, reboot_work_func);
 
 /**
-- 
2.17.1

