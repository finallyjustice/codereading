From 5cdaa680025e30420aa157aaea32eab84cee6560 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Tue, 9 Jul 2019 10:53:17 +0800
Subject: [PATCH 1/1] qemu for 4.0.0

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 hw/pci-host/piix.c   |  6 ++++
 hw/pci/pci.c         | 38 +++++++++++++++++++++++++
 include/hw/pci/pci.h | 80 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 target/i386/cpu.c    | 55 ++++++++++++++++++++++++++++++++++++
 target/i386/cpu.h    | 20 +++++++++++++
 5 files changed, 199 insertions(+)

diff --git a/hw/pci-host/piix.c b/hw/pci-host/piix.c
index d9c70f7..9246bc7 100644
--- a/hw/pci-host/piix.c
+++ b/hw/pci-host/piix.c
@@ -335,6 +335,12 @@ static void i440fx_pcihost_realize(DeviceState *dev, Error **errp)
     sysbus_add_io(sbd, 0xcf8, &s->conf_mem);
     sysbus_init_ioports(sbd, 0xcf8, 4);
 
+    /*
+     * piix用到s->data_mem的地方:
+     *   - hw/pci-host/piix.c|310| <<i440fx_pcihost_initfn>> memory_region_init_io(&s->data_mem, obj, &pci_host_data_le_ops, s,
+     *   - hw/pci-host/piix.c|338| <<i440fx_pcihost_realize>> sysbus_add_io(sbd, 0xcfc, &s->data_mem);
+     *   - hw/pci-host/piix.c|342| <<i440fx_pcihost_realize>> memory_region_set_flush_coalesced(&s->data_mem);
+     */
     sysbus_add_io(sbd, 0xcfc, &s->data_mem);
     sysbus_init_ioports(sbd, 0xcfc, 4);
 
diff --git a/hw/pci/pci.c b/hw/pci/pci.c
index 6d13ef8..1400a86 100644
--- a/hw/pci/pci.c
+++ b/hw/pci/pci.c
@@ -415,6 +415,23 @@ bool pci_bus_is_express(PCIBus *bus)
     return object_dynamic_cast(OBJECT(bus), TYPE_PCIE_BUS);
 }
 
+/*
+ * called by:
+ *   - hw/i386/acpi-build.c|572| <<build_append_pci_bus_devices>> if (pci_bus_is_root(sec) || pci_bus_is_express(sec)) {
+ *   - hw/i386/acpi-build.c|1887| <<build_dsdt>> if (!pci_bus_is_root(bus)) {
+ *   - hw/i386/pc.c|1638| <<pc_machine_done>> if (pci_bus_is_root(bus)) {
+ *   - hw/pci/pci.c|366| <<pci_device_root_bus>> while (!pci_bus_is_root(bus)) {
+ *   - hw/pci/pci.c|980| <<pci_req_id_cache_get>> while (!pci_bus_is_root(pci_get_bus(dev))) {
+ *   - hw/pci/pci.c|1037| <<do_pci_register_device>> if (pci_bus_is_root(bus) && bus->parent_dev && !pc->is_bridge) {
+ *   - hw/pci/pci.c|1492| <<pci_bus_set_route_irq_fn>> assert(pci_bus_is_root(bus));
+ *   - hw/pci/pci.c|2012| <<pci_find_bus_nr>> if (!pci_bus_is_root(bus) &&
+ *   - hw/pci/pci.c|2024| <<pci_find_bus_nr>> if (pci_bus_is_root(sec)) {
+ *   - hw/pci/pci_host.c|62| <<pci_adjust_config_limit>> if (!pci_bus_is_root(bus)) {
+ *   - hw/pci/pcie.c|234| <<pcie_endpoint_cap_common_init>> && pci_bus_is_root(pci_get_bus(dev))) {
+ *   - hw/vfio/pci.c|1843| <<vfio_setup_pcie_cap>> while (!pci_bus_is_root(bus)) {
+ *   - hw/vfio/pci.c|1852| <<vfio_setup_pcie_cap>> } else if (pci_bus_is_root(pci_get_bus(&vdev->pdev))) {
+ *   - hw/virtio/virtio-pci.c|1679| <<virtio_pci_realize>> !pci_bus_is_root(pci_get_bus(pci_dev));
+ */
 bool pci_bus_is_root(PCIBus *bus)
 {
     return PCI_BUS_GET_CLASS(bus)->is_root(bus);
@@ -1419,6 +1436,27 @@ uint32_t pci_default_read_config(PCIDevice *d,
     return le32_to_cpu(val);
 }
 
+/*
+ * pci_default_write_config()使用的部分例子:
+ *   - hw/acpi/piix4.c|159| <<pm_write_config>> pci_default_write_config(d, address, val, len);
+ *   - hw/net/e1000.c|1675| <<e1000_write_config>> pci_default_write_config(pci_dev, address, val, len);
+ *   - hw/net/e1000e.c|406| <<e1000e_write_config>> pci_default_write_config(pci_dev, address, val, len);
+ *   - hw/pci-host/piix.c|166| <<i440fx_write_config>> pci_default_write_config(dev, address, val, len);
+ *   - hw/pci-host/piix.c|547| <<piix3_write_config>> pci_default_write_config(dev, address, val, len);
+ *   - hw/pci-host/piix.c|874| <<igd_pt_i440fx_realize>> pci_default_write_config(pci_dev, pos, val, len);
+ *   - hw/pci-host/q35.c|458| <<mch_write_config>> pci_default_write_config(d, address, val, len);
+ *   - hw/pci/pci.c|1145| <<do_pci_register_device>> config_write = pci_default_write_config;
+ *   - hw/pci/pci.c|1439| <<pci_default_write_config>> void pci_default_write_config(PCIDevice *d, uint32_t addr, uint32_t val_in, int l)
+ *   - hw/pci/pci_bridge.c|257| <<pci_bridge_write_config>> pci_default_write_config(d, address, val, len);
+ *   - hw/vfio/pci.c|1188| <<vfio_pci_write_config>> pci_default_write_config(pdev, addr, val, len);
+ *   - hw/vfio/pci.c|1207| <<vfio_pci_write_config>> pci_default_write_config(pdev, addr, val, len);
+ *   - hw/vfio/pci.c|1225| <<vfio_pci_write_config>> pci_default_write_config(pdev, addr, val, len);
+ *   - hw/vfio/pci.c|1236| <<vfio_pci_write_config>> pci_default_write_config(pdev, addr, val, len);
+ *   - hw/virtio/virtio-pci.c|341| <<virtio_ioport_write>> pci_default_write_config(&proxy->pci_dev, PCI_COMMAND,
+ *   - hw/virtio/virtio-pci.c|598| <<virtio_write_config>> pci_default_write_config(pci_dev, address, val, len);
+ *   - hw/virtio/virtio-pci.c|1066| <<virtio_pci_vmstate_change>> pci_default_write_config(&proxy->pci_dev, PCI_COMMAND,
+ *   - hw/xen/xen_pt.c|301| <<xen_pt_pci_write_config>> pci_default_write_config(d, addr, val, len);
+ */
 void pci_default_write_config(PCIDevice *d, uint32_t addr, uint32_t val_in, int l)
 {
     int i, was_irq_disabled = pci_irq_disabled(d);
diff --git a/include/hw/pci/pci.h b/include/hw/pci/pci.h
index 0abb06b..8ae49cf 100644
--- a/include/hw/pci/pci.h
+++ b/include/hw/pci/pci.h
@@ -219,7 +219,47 @@ typedef struct PCIDeviceClass {
 
     void (*realize)(PCIDevice *dev, Error **errp);
     PCIUnregisterFunc *exit;
+    /*
+     * PCIDeviceClass->config_read在以下设置:
+     *   - hw/vfio/pci.c|3254| <<vfio_pci_dev_class_init>> pdc->config_read = vfio_pci_read_config;
+     *
+     * PCIDeviceClass->config_read在以下使用:
+     *   - hw/pci/pci.c|1047| <<do_pci_register_device>> PCIConfigReadFunc *config_read = pc->config_read;
+     *
+     * PCIDevice->config_read在以下设置:
+     *   - hw/pci/pci.c|1146| <<do_pci_register_device>> pci_dev->config_read = config_read;
+     *   - hw/virtio/virtio-pci.c|1639| <<virtio_pci_device_plugged>> proxy->pci_dev.config_read = virtio_read_config;
+     *
+     * PCIDevice->config_read在以下使用:
+     *   - hw/pci/pci_host.c|108| <<pci_host_config_read_common>> ret = pci_dev->config_read(pci_dev, addr, MIN(len, limit - addr));
+     *   - hw/pci/pcie.c|856| <<pcie_sync_bridge_lnk>> lnksta = target->config_read(target,
+     */
     PCIConfigReadFunc *config_read;
+    /*
+     * PCIDeviceClass->config_write在以下设置:
+     *   - hw/acpi/piix4.c|705| <<piix4_pm_class_init>> k->config_write = pm_write_config;
+     *   - hw/pci-bridge/pci_bridge_dev.c|252| <<pci_bridge_dev_class_init>> k->config_write = pci_bridge_dev_write_config;
+     *   - hw/pci-bridge/pcie_pci_bridge.c|151| <<pcie_pci_bridge_class_init>> k->config_write = pcie_pci_bridge_write_config;
+     *   - hw/pci-bridge/pcie_root_port.c|166| <<rp_class_init>> k->config_write = rp_write_config;
+     *   - hw/pci-bridge/xio3130_downstream.c|156| <<xio3130_downstream_class_init>> k->config_write = xio3130_downstream_write_config;
+     *   - hw/pci-bridge/xio3130_upstream.c|130| <<xio3130_upstream_class_init>> k->config_write = xio3130_upstream_write_config;
+     *   - hw/pci-host/piix.c|784| <<i440fx_class_init>> k->config_write = i440fx_write_config;
+     *   - hw/pci-host/q35.c|625| <<mch_class_init>> k->config_write = mch_write_config;
+     *   - hw/vfio/pci.c|3255| <<vfio_pci_dev_class_init>> pdc->config_write = vfio_pci_write_config;
+     *
+     * PCIDeviceClass->config_write在以下使用:
+     *   - hw/pci/pci.c|1048| <<do_pci_register_device>> PCIConfigWriteFunc *config_write = pc->config_write;
+     *
+     * PCIDevice->config_write在以下设置:
+     *   - hw/pci/pci.c|1147| <<do_pci_register_device>> pci_dev->config_write = config_write;
+     *   - hw/net/e1000.c|1690| <<pci_e1000_realize>> pci_dev->config_write = e1000_write_config;
+     *   - hw/net/e1000e.c|426| <<e1000e_pci_realize>> pci_dev->config_write = e1000e_write_config;
+     *   - hw/virtio/virtio-pci.c|1638| <<virtio_pci_device_plugged>> proxy->pci_dev.config_write = virtio_write_config;
+     *
+     * PCIDevice->config_write在以下使用:
+     *   - hw/pci-host/bonito.c|328| <<bonito_pciconf_writel>> d->config_write(d, addr, val, 4);
+     *   - hw/pci/pci_host.c|87| <<pci_host_config_write_common>> pci_dev->config_write(pci_dev, addr, val, MIN(len, limit - addr));
+     */
     PCIConfigWriteFunc *config_write;
 
     uint16_t vendor_id;
@@ -295,7 +335,47 @@ struct PCIDevice {
     MemoryRegion bus_master_enable_region;
 
     /* do not access the following fields */
+    /*
+     * PCIDeviceClass->config_read在以下设置:
+     *   - hw/vfio/pci.c|3254| <<vfio_pci_dev_class_init>> pdc->config_read = vfio_pci_read_config;
+     *
+     * PCIDeviceClass->config_read在以下使用:
+     *   - hw/pci/pci.c|1047| <<do_pci_register_device>> PCIConfigReadFunc *config_read = pc->config_read;
+     *
+     * PCIDevice->config_read在以下设置:
+     *   - hw/pci/pci.c|1146| <<do_pci_register_device>> pci_dev->config_read = config_read;
+     *   - hw/virtio/virtio-pci.c|1639| <<virtio_pci_device_plugged>> proxy->pci_dev.config_read = virtio_read_config;
+     *
+     * PCIDevice->config_read在以下使用:
+     *   - hw/pci/pci_host.c|108| <<pci_host_config_read_common>> ret = pci_dev->config_read(pci_dev, addr, MIN(len, limit - addr));
+     *   - hw/pci/pcie.c|856| <<pcie_sync_bridge_lnk>> lnksta = target->config_read(target,
+     */
     PCIConfigReadFunc *config_read;
+    /*
+     * PCIDeviceClass->config_write在以下设置:
+     *   - hw/acpi/piix4.c|705| <<piix4_pm_class_init>> k->config_write = pm_write_config;
+     *   - hw/pci-bridge/pci_bridge_dev.c|252| <<pci_bridge_dev_class_init>> k->config_write = pci_bridge_dev_write_config;
+     *   - hw/pci-bridge/pcie_pci_bridge.c|151| <<pcie_pci_bridge_class_init>> k->config_write = pcie_pci_bridge_write_config;
+     *   - hw/pci-bridge/pcie_root_port.c|166| <<rp_class_init>> k->config_write = rp_write_config;
+     *   - hw/pci-bridge/xio3130_downstream.c|156| <<xio3130_downstream_class_init>> k->config_write = xio3130_downstream_write_config;
+     *   - hw/pci-bridge/xio3130_upstream.c|130| <<xio3130_upstream_class_init>> k->config_write = xio3130_upstream_write_config;
+     *   - hw/pci-host/piix.c|784| <<i440fx_class_init>> k->config_write = i440fx_write_config;
+     *   - hw/pci-host/q35.c|625| <<mch_class_init>> k->config_write = mch_write_config;
+     *   - hw/vfio/pci.c|3255| <<vfio_pci_dev_class_init>> pdc->config_write = vfio_pci_write_config;
+     *
+     * PCIDeviceClass->config_write在以下使用:
+     *   - hw/pci/pci.c|1048| <<do_pci_register_device>> PCIConfigWriteFunc *config_write = pc->config_write;
+     *
+     * PCIDevice->config_write在以下设置:
+     *   - hw/pci/pci.c|1147| <<do_pci_register_device>> pci_dev->config_write = config_write;
+     *   - hw/net/e1000.c|1690| <<pci_e1000_realize>> pci_dev->config_write = e1000_write_config;
+     *   - hw/net/e1000e.c|426| <<e1000e_pci_realize>> pci_dev->config_write = e1000e_write_config;
+     *   - hw/virtio/virtio-pci.c|1638| <<virtio_pci_device_plugged>> proxy->pci_dev.config_write = virtio_write_config;
+     *
+     * PCIDevice->config_write在以下使用:
+     *   - hw/pci-host/bonito.c|328| <<bonito_pciconf_writel>> d->config_write(d, addr, val, 4);
+     *   - hw/pci/pci_host.c|87| <<pci_host_config_write_common>> pci_dev->config_write(pci_dev, addr, val, MIN(len, limit - addr));
+     */
     PCIConfigWriteFunc *config_write;
 
     /* Legacy PCI VGA regions */
diff --git a/target/i386/cpu.c b/target/i386/cpu.c
index d6bb57d..958e80b 100644
--- a/target/i386/cpu.c
+++ b/target/i386/cpu.c
@@ -71,6 +71,11 @@ struct CPUID2CacheDescriptorInfo {
  * Known CPUID 2 cache descriptors.
  * From Intel SDM Volume 2A, CPUID instruction
  */
+/*
+ * used by:
+ *   - target/i386/cpu.c|213| <<cpuid2_cache_descriptor>> for (i = 0; i < ARRAY_SIZE(cpuid2_cache_descriptors); i++) {
+ *   - target/i386/cpu.c|214| <<cpuid2_cache_descriptor>> struct CPUID2CacheDescriptorInfo *d = &cpuid2_cache_descriptors[i];
+ */
 struct CPUID2CacheDescriptorInfo cpuid2_cache_descriptors[] = {
     [0x06] = { .level = 1, .type = INSTRUCTION_CACHE, .size =   8 * KiB,
                .associativity = 4,  .line_size = 32, },
@@ -202,6 +207,13 @@ struct CPUID2CacheDescriptorInfo cpuid2_cache_descriptors[] = {
  * Return a CPUID 2 cache descriptor for a given cache.
  * If no known descriptor is found, return CACHE_DESCRIPTOR_UNAVAILABLE
  */
+/*
+ * called by:
+ *   - target/i386/cpu.c|4251| <<cpu_x86_cpuid>> *ecx = cpuid2_cache_descriptor(env->cache_info_cpuid2.l3_cache);
+ *   - target/i386/cpu.c|4253| <<cpu_x86_cpuid>> *edx = (cpuid2_cache_descriptor(env->cache_info_cpuid2.l1d_cache) << 16) |
+ *   - target/i386/cpu.c|4254| <<cpu_x86_cpuid>> (cpuid2_cache_descriptor(env->cache_info_cpuid2.l1i_cache) << 8) |
+ *   - target/i386/cpu.c|4255| <<cpu_x86_cpuid>> (cpuid2_cache_descriptor(env->cache_info_cpuid2.l2_cache));
+ */
 static uint8_t cpuid2_cache_descriptor(CPUCacheInfo *cache)
 {
     int i;
@@ -3023,12 +3035,20 @@ static int cpu_x86_fill_model_id(char *str)
     return 0;
 }
 
+/*
+ * used by:
+ *   - target/i386/cpu.c|3042| <<max_x86_cpu_class_init>> dc->props = max_x86_cpu_properties;
+ */
 static Property max_x86_cpu_properties[] = {
     DEFINE_PROP_BOOL("migratable", X86CPU, migratable, true),
+    /* 只在cpu_x86_cpuid()使用 */
     DEFINE_PROP_BOOL("host-cache-info", X86CPU, cache_info_passthrough, false),
     DEFINE_PROP_END_OF_LIST()
 };
 
+/*
+ * TypeInfo max_x86_cpu_type_info.class_init = max_x86_cpu_class_init()
+ */
 static void max_x86_cpu_class_init(ObjectClass *oc, void *data)
 {
     DeviceClass *dc = DEVICE_CLASS(oc);
@@ -3044,6 +3064,9 @@ static void max_x86_cpu_class_init(ObjectClass *oc, void *data)
 
 static void x86_cpu_load_def(X86CPU *cpu, X86CPUDefinition *def, Error **errp);
 
+/*
+ * TypeInfo max_x86_cpu_type_info.instance_init = max_x86_cpu_initfn()
+ */
 static void max_x86_cpu_initfn(Object *obj)
 {
     X86CPU *cpu = X86_CPU(obj);
@@ -3858,6 +3881,10 @@ static void x86_cpu_apply_props(X86CPU *cpu, PropValue *props)
 
 /* Load data from X86CPUDefinition into a X86CPU object
  */
+/*
+ * called by:
+ *   - target/i386/cpu.c|5630| <<x86_cpu_initfn>> x86_cpu_load_def(cpu, xcc->cpu_def, &error_abort);
+ */
 static void x86_cpu_load_def(X86CPU *cpu, X86CPUDefinition *def, Error **errp)
 {
     CPUX86State *env = &cpu->env;
@@ -4172,6 +4199,28 @@ void cpu_clear_apic_feature(CPUX86State *env)
 
 #endif /* !CONFIG_USER_ONLY */
 
+/*
+ * called by:
+ *   - hw/i386/pc.c|1590| <<pc_build_feature_control_file>> cpu_x86_cpuid(env, 1, 0, &unused, &unused, &ecx, &edx);
+ *   - target/i386/fpu_helper.c|1523| <<helper_xsetbv>> cpu_x86_cpuid(env, 0x0d, 0, &ena_lo, &dummy, &dummy, &ena_hi);
+ *   - target/i386/hvf/hvf.c|793| <<hvf_vcpu_exec>> cpu_x86_cpuid(env, rax, rcx, &rax, &rbx, &rcx, &rdx);
+ *   - target/i386/kvm.c|1051| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, 0, 0, &limit, &unused, &unused, &unused);
+ *   - target/i386/kvm.c|1068| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm.c|1080| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm.c|1094| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm.c|1119| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm.c|1132| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm.c|1139| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm.c|1147| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, 0x0a, 0, &eax, &unused, &unused, &edx);
+ *   - target/i386/kvm.c|1171| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, 0x80000000, 0, &limit, &unused, &unused, &unused);
+ *   - target/i386/kvm.c|1187| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, j, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm.c|1203| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/kvm.c|1210| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, 0xC0000000, 0, &limit, &unused, &unused, &unused);
+ *   - target/i386/kvm.c|1221| <<kvm_arch_init_vcpu>> cpu_x86_cpuid(env, i, 0, &c->eax, &c->ebx, &c->ecx, &c->edx);
+ *   - target/i386/misc_helper.c|107| <<helper_cpuid>> cpu_x86_cpuid(env, (uint32_t)env->regs[R_EAX], (uint32_t)env->regs[R_ECX],
+ *
+ * 开机后跑lscpu这个函数就没再调用过
+ */
 void cpu_x86_cpuid(CPUX86State *env, uint32_t index, uint32_t count,
                    uint32_t *eax, uint32_t *ebx,
                    uint32_t *ecx, uint32_t *edx)
@@ -5813,6 +5862,12 @@ static Property x86_cpu_properties[] = {
      * lecacy_cache defaults to true unless the CPU model provides its
      * own cache information (see x86_cpu_load_def()).
      */
+    /*
+     * used by:
+     *   - target/i386/cpu.c|5827| <<global>> DEFINE_PROP_BOOL("legacy-cache", X86CPU, legacy_cache, true),
+     *   - target/i386/cpu.c|3897| <<x86_cpu_load_def>> cpu->legacy_cache = !def->cache_info;
+     *   - target/i386/cpu.c|5269| <<x86_cpu_realizefn>> if (!cpu->legacy_cache) {
+     */
     DEFINE_PROP_BOOL("legacy-cache", X86CPU, legacy_cache, true),
 
     /*
diff --git a/target/i386/cpu.h b/target/i386/cpu.h
index 83fb522..a1f7454 100644
--- a/target/i386/cpu.h
+++ b/target/i386/cpu.h
@@ -1308,6 +1308,19 @@ typedef struct CPUX86State {
     uint32_t cpuid_max_level, cpuid_max_xlevel, cpuid_max_xlevel2;
     /* Actual level/xlevel/xlevel2 value: */
     uint32_t cpuid_level, cpuid_xlevel, cpuid_xlevel2;
+    /*
+     * used by:
+     *   - target/i386/cpu.c|3336| <<x86_cpuid_get_vendor>> x86_cpu_vendor_words2str(value, env->cpuid_vendor1, env->cpuid_vendor2,
+     *   - target/i386/cpu.c|3353| <<x86_cpuid_set_vendor>> env->cpuid_vendor1 = 0;
+     *   - target/i386/cpu.c|3357| <<x86_cpuid_set_vendor>> env->cpuid_vendor1 |= ((uint8_t)value[i ]) << (8 * i);
+     *   - target/i386/cpu.c|4254| <<cpu_x86_cpuid>> *ebx = env->cpuid_vendor1;
+     *   - target/i386/cpu.c|4493| <<cpu_x86_cpuid>> *ebx = env->cpuid_vendor1;
+     *   - target/i386/cpu.c|4508| <<cpu_x86_cpuid>> if (env->cpuid_vendor1 != CPUID_VENDOR_INTEL_1 ||
+     *   - target/i386/cpu.c|5170| <<IS_INTEL_CPU>> #define IS_INTEL_CPU(env) ((env)->cpuid_vendor1 == CPUID_VENDOR_INTEL_1 && \
+     *   - target/i386/cpu.c|5173| <<IS_AMD_CPU>> #define IS_AMD_CPU(env) ((env)->cpuid_vendor1 == CPUID_VENDOR_AMD_1 && \
+     *   - target/i386/translate.c|7188| <<disas_insn>> if (CODE64(s) && env->cpuid_vendor1 != CPUID_VENDOR_INTEL_1)
+     *   - target/i386/translate.c|7199| <<disas_insn>> if (CODE64(s) && env->cpuid_vendor1 != CPUID_VENDOR_INTEL_1)
+     */
     uint32_t cpuid_vendor1;
     uint32_t cpuid_vendor2;
     uint32_t cpuid_vendor3;
@@ -1410,6 +1423,7 @@ struct X86CPU {
     bool vmware_cpuid_freq;
 
     /* if true the CPUID code directly forward host cache leaves to the guest */
+    /* 只在cpu_x86_cpuid()使用 */
     bool cache_info_passthrough;
 
     /* if true the CPUID code directly forwards
@@ -1446,6 +1460,12 @@ struct X86CPU {
     /* Compatibility bits for old machine types.
      * If true present the old cache topology information
      */
+    /*
+     * used by:
+     *   - target/i386/cpu.c|5827| <<global>> DEFINE_PROP_BOOL("legacy-cache", X86CPU, legacy_cache, true),
+     *   - target/i386/cpu.c|3897| <<x86_cpu_load_def>> cpu->legacy_cache = !def->cache_info;
+     *   - target/i386/cpu.c|5269| <<x86_cpu_realizefn>> if (!cpu->legacy_cache) {
+     */
     bool legacy_cache;
 
     /* Compatibility bits for old machine types: */
-- 
2.7.4

