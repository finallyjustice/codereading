From b04f97b626ffcbedeb8189ea883ba2dbb89d08c4 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@oracle.com>
Date: Mon, 23 Sep 2019 01:15:15 +0800
Subject: [PATCH 1/1] linux xen-netfront comment for v4.14.35-1902.2.0

v4.14.35-1902.2.0

Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
---
 drivers/net/xen-netfront.c | 349 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 349 insertions(+)

diff --git a/drivers/net/xen-netfront.c b/drivers/net/xen-netfront.c
index 67db38e..98b30ef 100644
--- a/drivers/net/xen-netfront.c
+++ b/drivers/net/xen-netfront.c
@@ -68,6 +68,9 @@ module_param_named(staging_grants, xennet_staging_grants, bool, 0644);
 MODULE_PARM_DESC(staging_grants,
 		 "Staging grants support (0=off, 1=on [default]");
 
+/*
+ * 只在这里设置
+ */
 static bool xennet_rx_copy_mode;
 module_param_named(rx_copy_mode, xennet_rx_copy_mode, bool, 0644);
 MODULE_PARM_DESC(rx_copy_mode,
@@ -76,12 +79,56 @@ MODULE_PARM_DESC(rx_copy_mode,
 static const struct ethtool_ops xennet_ethtool_ops;
 
 struct netfront_cb {
+	/*
+	 * 设置pull_to的地方:
+	 *   - drivers/net/xen-netfront.c|1462| <<xennet_poll>> NETFRONT_SKB_CB(skb)->pull_to = rx->status;
+	 *   - drivers/net/xen-netfront.c|1464| <<xennet_poll>> NETFRONT_SKB_CB(skb)->pull_to = RX_COPY_THRESHOLD;
+	 * 使用pull_to的地方:
+	 *   - drivers/net/xen-netfront.c|1291| <<xennet_fill_frags>> unsigned int pull_to = NETFRONT_SKB_CB(skb)->pull_to;
+	 *   - drivers/net/xen-netfront.c|1293| <<xennet_fill_frags>> BUG_ON(pull_to < skb_headlen(skb));
+	 *   - drivers/net/xen-netfront.c|1294| <<xennet_fill_frags>> __pskb_pull_tail(skb, pull_to - skb_headlen(skb));
+	 *   - drivers/net/xen-netfront.c|1366| <<handle_incoming_queue>> int pull_to = NETFRONT_SKB_CB(skb)->pull_to;
+	 *   - drivers/net/xen-netfront.c|1368| <<handle_incoming_queue>> if (pull_to > skb_headlen(skb))
+	 *   - drivers/net/xen-netfront.c|1369| <<handle_incoming_queue>> __pskb_pull_tail(skb, pull_to - skb_headlen(skb));
+	 *   - drivers/net/xen-netfront.c|1463| <<xennet_poll>> if (NETFRONT_SKB_CB(skb)->pull_to > RX_COPY_THRESHOLD)
+	 */
 	int pull_to;
+	/*
+	 * 设置ref的地方:
+	 *   - drivers/net/xen-netfront.c|537| <<xennet_alloc_one_rx_buffer>> NETFRONT_SKB_CB(skb)->ref = ref;
+	 * 使用ref的地方:
+	 *   - drivers/net/xen-netfront.c|579| <<xennet_alloc_rx_buffers>> ref = NETFRONT_SKB_CB(skb)->ref;
+	 *   - drivers/net/xen-netfront.c|1180| <<xennet_get_responses>> if (NETFRONT_SKB_CB(skb)->ref != GRANT_INVALID_REF) {
+	 *   - drivers/net/xen-netfront.c|1318| <<xennet_fill_frags>> grant_ref_t ref = NETFRONT_SKB_CB(nskb)->ref;
+	 *   - drivers/net/xen-netfront.c|1515| <<xennet_poll>> ref = NETFRONT_SKB_CB(skb)->ref;
+	 *   - drivers/net/xen-netfront.c|1663| <<xennet_release_rx_bufs>> if (NETFRONT_SKB_CB(skb)->ref != GRANT_INVALID_REF) {
+	 */
 	grant_ref_t ref;
 };
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|495| <<xennet_alloc_one_rx_buffer>> NETFRONT_SKB_CB(skb)->ref = ref;
+ *   - drivers/net/xen-netfront.c|531| <<xennet_alloc_rx_buffers>> ref = NETFRONT_SKB_CB(skb)->ref;
+ *   - drivers/net/xen-netfront.c|1105| <<xennet_get_responses>> if (NETFRONT_SKB_CB(skb)->ref != GRANT_INVALID_REF) {
+ *   - drivers/net/xen-netfront.c|1219| <<xennet_fill_frags>> grant_ref_t ref = NETFRONT_SKB_CB(nskb)->ref;
+ *   - drivers/net/xen-netfront.c|1223| <<xennet_fill_frags>> unsigned int pull_to = NETFRONT_SKB_CB(skb)->pull_to;
+ *   - drivers/net/xen-netfront.c|1298| <<handle_incoming_queue>> int pull_to = NETFRONT_SKB_CB(skb)->pull_to;
+ *   - drivers/net/xen-netfront.c|1394| <<xennet_poll>> NETFRONT_SKB_CB(skb)->pull_to = rx->status;
+ *   - drivers/net/xen-netfront.c|1395| <<xennet_poll>> if (NETFRONT_SKB_CB(skb)->pull_to > RX_COPY_THRESHOLD)
+ *   - drivers/net/xen-netfront.c|1396| <<xennet_poll>> NETFRONT_SKB_CB(skb)->pull_to = RX_COPY_THRESHOLD;
+ *   - drivers/net/xen-netfront.c|1399| <<xennet_poll>> ref = NETFRONT_SKB_CB(skb)->ref;
+ *   - drivers/net/xen-netfront.c|1547| <<xennet_release_rx_bufs>> if (NETFRONT_SKB_CB(skb)->ref != GRANT_INVALID_REF) {
+ */
 #define NETFRONT_SKB_CB(skb)	((struct netfront_cb *)((skb)->cb))
 
+/*
+ * used by:
+ *   - drivers/net/xen-netfront.c|515| <<xennet_alloc_one_rx_buffer>> RX_COPY_THRESHOLD + NET_IP_ALIGN,
+ *   - drivers/net/xen-netfront.c|1147| <<xennet_get_responses>> int max = XEN_NETIF_NR_SLOTS_MIN + (rx->status <= RX_COPY_THRESHOLD);
+ *   - drivers/net/xen-netfront.c|1480| <<xennet_poll>> if (NETFRONT_SKB_CB(skb)->pull_to > RX_COPY_THRESHOLD)
+ *   - drivers/net/xen-netfront.c|1481| <<xennet_poll>> NETFRONT_SKB_CB(skb)->pull_to = RX_COPY_THRESHOLD;
+ */
 #define RX_COPY_THRESHOLD 256
 
 #define GRANT_INVALID_REF	0
@@ -184,8 +231,32 @@ struct netfront_queue {
 
 	struct timer_list rx_refill_timer;
 
+	/*
+	 * 在以下设置rx_skbs:
+	 *   - drivers/net/xen-netfront.c|463| <<xennet_alloc_rx_buffers>> queue->rx_skbs[id] = skb;
+	 *   - drivers/net/xen-netfront.c|937| <<xennet_move_rx_slot>> queue->rx_skbs[new] = skb;
+	 *   - drivers/net/xen-netfront.c|312| <<xennet_get_rx_skb>> queue->rx_skbs[i] = NULL;
+	 *   - drivers/net/xen-netfront.c|2141| <<xennet_init_queue>> queue->rx_skbs[i] = NULL;
+	 * 在以下使用rx_skbs:
+	 *   - drivers/net/xen-netfront.c|311| <<xennet_get_rx_skb>> struct sk_buff *skb = queue->rx_skbs[i];
+	 *   - drivers/net/xen-netfront.c|462| <<xennet_alloc_rx_buffers>> BUG_ON(queue->rx_skbs[id]);
+	 *   - drivers/net/xen-netfront.c|936| <<xennet_move_rx_slot>> BUG_ON(queue->rx_skbs[new]);
+	 *   - drivers/net/xen-netfront.c|1452| <<xennet_release_rx_bufs>> skb = queue->rx_skbs[id];
+	 */
 	struct sk_buff *rx_skbs[NET_RX_RING_SIZE];
 	grant_ref_t gref_rx_head;
+	/*
+	 * 在以下设置grant_rx_ref:
+	 *   - drivers/net/xen-netfront.c|517| <<xennet_alloc_rx_buffers>> queue->grant_rx_ref[id] = ref;
+	 *   - drivers/net/xen-netfront.c|979| <<xennet_move_rx_slot>> queue->grant_rx_ref[new] = ref;
+	 *   - drivers/net/xen-netfront.c|362| <<xennet_get_rx_ref>> queue->grant_rx_ref[i] = GRANT_INVALID_REF;
+	 *   - drivers/net/xen-netfront.c|2201| <<xennet_init_queue>> queue->grant_rx_ref[i] = GRANT_INVALID_REF;
+	 *   - drivers/net/xen-netfront.c|1536| <<xennet_release_rx_bufs>> queue->grant_rx_ref[id] = GRANT_INVALID_REF;
+	 *
+	 * 在以下使用grant_rx_ref:
+	 *   - drivers/net/xen-netfront.c|361| <<xennet_get_rx_ref>> grant_ref_t ref = queue->grant_rx_ref[i];
+	 *   - drivers/net/xen-netfront.c|1515| <<xennet_release_rx_bufs>> ref = queue->grant_rx_ref[id];
+	 */
 	grant_ref_t grant_rx_ref[NET_RX_RING_SIZE];
 	struct netfront_buffer_pool rx_pool;
 
@@ -304,19 +375,61 @@ static int xennet_rxidx(RING_IDX idx)
 	return idx & (NET_RX_RING_SIZE - 1);
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|979| <<xennet_get_extras>> skb = xennet_get_rx_skb(queue, cons);
+ *   - drivers/net/xen-netfront.c|996| <<xennet_get_responses>> struct sk_buff *skb = xennet_get_rx_skb(queue, cons);
+ *   - drivers/net/xen-netfront.c|1061| <<xennet_get_responses>> skb = xennet_get_rx_skb(queue, cons + slots);
+ *
+ * 取出queue->rx_skbs[xennet_rxidx(ri)]返回
+ * 返回前设置queue->rx_skbs[xennet_rxidx(ri)]为NULL
+ */
 static struct sk_buff *xennet_get_rx_skb(struct netfront_queue *queue,
 					 RING_IDX ri)
 {
 	int i = xennet_rxidx(ri);
+	/*
+	 * 在以下设置rx_skbs:
+	 *   - drivers/net/xen-netfront.c|463| <<xennet_alloc_rx_buffers>> queue->rx_skbs[id] = skb;
+	 *   - drivers/net/xen-netfront.c|937| <<xennet_move_rx_slot>> queue->rx_skbs[new] = skb;
+	 *   - drivers/net/xen-netfront.c|312| <<xennet_get_rx_skb>> queue->rx_skbs[i] = NULL;
+	 *   - drivers/net/xen-netfront.c|2141| <<xennet_init_queue>> queue->rx_skbs[i] = NULL;
+	 * 在以下使用rx_skbs:
+	 *   - drivers/net/xen-netfront.c|311| <<xennet_get_rx_skb>> struct sk_buff *skb = queue->rx_skbs[i];
+	 *   - drivers/net/xen-netfront.c|462| <<xennet_alloc_rx_buffers>> BUG_ON(queue->rx_skbs[id]);
+	 *   - drivers/net/xen-netfront.c|936| <<xennet_move_rx_slot>> BUG_ON(queue->rx_skbs[new]);
+	 *   - drivers/net/xen-netfront.c|1452| <<xennet_release_rx_bufs>> skb = queue->rx_skbs[id];
+	 */
 	struct sk_buff *skb = queue->rx_skbs[i];
 	queue->rx_skbs[i] = NULL;
 	return skb;
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|980| <<xennet_get_extras>> ref = xennet_get_rx_ref(queue, cons);
+ *   - drivers/net/xen-netfront.c|997| <<xennet_get_responses>> grant_ref_t ref = xennet_get_rx_ref(queue, cons);
+ *   - drivers/net/xen-netfront.c|1062| <<xennet_get_responses>> ref = xennet_get_rx_ref(queue, cons + slots);
+ *
+ * 取出queue->grant_rx_ref[xennet_rxidx(ri)]返回
+ * 返回前设置queue->grant_rx_ref[xennet_rxidx(ri)]为GRANT_INVALID_REF
+ */
 static grant_ref_t xennet_get_rx_ref(struct netfront_queue *queue,
 					    RING_IDX ri)
 {
 	int i = xennet_rxidx(ri);
+	/*
+	 * 在以下设置grant_rx_ref:
+	 *   - drivers/net/xen-netfront.c|517| <<xennet_alloc_rx_buffers>> queue->grant_rx_ref[id] = ref;
+	 *   - drivers/net/xen-netfront.c|979| <<xennet_move_rx_slot>> queue->grant_rx_ref[new] = ref;
+	 *   - drivers/net/xen-netfront.c|362| <<xennet_get_rx_ref>> queue->grant_rx_ref[i] = GRANT_INVALID_REF;
+	 *   - drivers/net/xen-netfront.c|2201| <<xennet_init_queue>> queue->grant_rx_ref[i] = GRANT_INVALID_REF;
+	 *   - drivers/net/xen-netfront.c|1536| <<xennet_release_rx_bufs>> queue->grant_rx_ref[id] = GRANT_INVALID_REF;
+	 *
+	 * 在以下使用grant_rx_ref:
+	 *   - drivers/net/xen-netfront.c|361| <<xennet_get_rx_ref>> grant_ref_t ref = queue->grant_rx_ref[i];
+	 *   - drivers/net/xen-netfront.c|1515| <<xennet_release_rx_bufs>> ref = queue->grant_rx_ref[id];
+	 */
 	grant_ref_t ref = queue->grant_rx_ref[i];
 	queue->grant_rx_ref[i] = GRANT_INVALID_REF;
 	return ref;
@@ -361,6 +474,10 @@ static bool xennet_allow_recycle(struct netfront_queue *queue, grant_ref_t ref)
 	       (ref == GRANT_INVALID_REF && !queue->indir_rx_pool.size);
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|485| <<xennet_alloc_one_rx_buffer>> page = xennet_alloc_page(queue, &ref);
+ */
 static struct page *xennet_alloc_page(struct netfront_queue *queue,
 				      grant_ref_t *ref)
 {
@@ -404,6 +521,10 @@ static struct page *xennet_alloc_page(struct netfront_queue *queue,
 	return page;
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|520| <<xennet_alloc_rx_buffers>> skb = xennet_alloc_one_rx_buffer(queue);
+ */
 static struct sk_buff *xennet_alloc_one_rx_buffer(struct netfront_queue *queue)
 {
 	grant_ref_t ref = GRANT_INVALID_REF;
@@ -432,6 +553,12 @@ static struct sk_buff *xennet_alloc_one_rx_buffer(struct netfront_queue *queue)
 }
 
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|585| <<xennet_open>> xennet_alloc_rx_buffers(queue);
+ *   - drivers/net/xen-netfront.c|1427| <<xennet_poll>> xennet_alloc_rx_buffers(queue);
+ *   - drivers/net/xen-netfront.c|2641| <<xennet_connect>> xennet_alloc_rx_buffers(queue);
+ */
 static void xennet_alloc_rx_buffers(struct netfront_queue *queue)
 {
 	domid_t otherend_id = queue->info->xbdev->otherend_id;
@@ -442,6 +569,15 @@ static void xennet_alloc_rx_buffers(struct netfront_queue *queue)
 	if (unlikely(!netif_carrier_ok(queue->info->netdev)))
 		return;
 
+	/*
+	 * produce request
+	 *
+	 * 在这个bug:
+	 *   queue->rx.req_prod_pvt = 253
+	 *   queue->rx.rsp_cons = 4294967293
+	 *
+	 *   req_prod - queue->rx.rsp_cons = 253 + 4294967296 - 4294967293 = 256
+	 */
 	for (req_prod = queue->rx.req_prod_pvt;
 	     req_prod - queue->rx.rsp_cons < NET_RX_RING_SIZE;
 	     req_prod++) {
@@ -465,6 +601,12 @@ static void xennet_alloc_rx_buffers(struct netfront_queue *queue)
 		ref = NETFRONT_SKB_CB(skb)->ref;
 		page = skb_frag_page(&skb_shinfo(skb)->frags[0]);
 
+		/*
+		 * 如果上面的xennet_alloc_one_rx_buffer()没有给NETFRONT_SKB_CB(skb)->ref
+		 * 说明page是新分配的?? 不是persistent?
+		 *
+		 * 似乎可以理解成如果NETFRONT_SKB_CB(skb)->ref是GRANT_INVALID_REF, 说明是新分配的page??
+		 */
 		if (ref == GRANT_INVALID_REF) {
 			ref = gnttab_claim_grant_reference(&queue->gref_rx_head);
 			WARN_ON_ONCE(IS_ERR_VALUE((unsigned long)(int)ref));
@@ -928,6 +1070,13 @@ static int xennet_close(struct net_device *dev)
 	return 0;
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|1058| <<xennet_get_extras>> xennet_move_rx_slot(queue, skb, ref);
+ *   - drivers/net/xen-netfront.c|1095| <<xennet_get_responses>> xennet_move_rx_slot(queue, skb, ref);
+ *
+ * 生产一个新的request, 把参数中的skb和ref给这个request
+ */
 static void xennet_move_rx_slot(struct netfront_queue *queue, struct sk_buff *skb,
 				grant_ref_t ref)
 {
@@ -941,6 +1090,12 @@ static void xennet_move_rx_slot(struct netfront_queue *queue, struct sk_buff *sk
 	queue->rx.req_prod_pvt++;
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|1004| <<xennet_get_responses>> err = xennet_get_extras(queue, extras, rp);
+ *
+ * 这个函数返回的时候queue->rx.rsp_cons指向最后一个extra info的response
+ */
 static int xennet_get_extras(struct netfront_queue *queue,
 			     struct xen_netif_extra_info *extras,
 			     RING_IDX rp)
@@ -955,6 +1110,9 @@ static int xennet_get_extras(struct netfront_queue *queue,
 		struct sk_buff *skb;
 		grant_ref_t ref;
 
+		/*
+		 * 参数的rp是response prod
+		 */
 		if (unlikely(cons + 1 == rp)) {
 			if (net_ratelimit())
 				dev_warn(dev, "Missing extra info\n");
@@ -962,6 +1120,11 @@ static int xennet_get_extras(struct netfront_queue *queue,
 			break;
 		}
 
+		/*
+		 * 执行到这里的时候rsp_cons还是第一个response
+		 * 或者上一个response
+		 * 所以这里要先加1
+		 */
 		extra = (struct xen_netif_extra_info *)
 			RING_GET_RESPONSE(&queue->rx, ++cons);
 
@@ -976,31 +1139,66 @@ static int xennet_get_extras(struct netfront_queue *queue,
 			       sizeof(*extra));
 		}
 
+		/*
+		 * 此时cons是代表extra info的index
+		 *
+		 * 取出queue->rx_skbs[xennet_rxidx(cons)]返回
+		 * 返回前设置queue->rx_skbs[xennet_rxidx(cons)]为NULL
+		 */
 		skb = xennet_get_rx_skb(queue, cons);
+		/*
+		 * 取出queue->grant_rx_ref[xennet_rxidx(cons)]返回
+		 * 返回前设置queue->grant_rx_ref[xennet_rxidx(cons)]为GRANT_INVALID_REF
+		 */
 		ref = xennet_get_rx_ref(queue, cons);
+		/*
+		 * 生产一个新的request, 把参数中的skb和ref给这个request
+		 */
 		xennet_move_rx_slot(queue, skb, ref);
 	} while (extra->flags & XEN_NETIF_EXTRA_FLAG_MORE);
 
+	/*
+	 * 此时cons指向最后一个extra info的response
+	 */
 	queue->rx.rsp_cons = cons;
 	return err;
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|1286| <<xennet_poll>> err = xennet_get_responses(queue, &rinfo, rp, &tmpq);
+ */
 static int xennet_get_responses(struct netfront_queue *queue,
 				struct netfront_rx_info *rinfo, RING_IDX rp,
 				struct sk_buff_head *list)
 {
+	/* rx是第一个response */
 	struct xen_netif_rx_response *rx = &rinfo->rx;
 	struct xen_netif_extra_info *extras = rinfo->extras;
 	struct device *dev = &queue->info->netdev->dev;
+	/*
+	 * 此时queue->rx.rsp_cons是下一个要消化的response
+	 * 或者说是第一个response
+	 */
 	RING_IDX cons = queue->rx.rsp_cons;
+	/* skb是第一个response对应的skb */
 	struct sk_buff *skb = xennet_get_rx_skb(queue, cons);
+	/* ref是第一个response对应的ref */
 	grant_ref_t ref = xennet_get_rx_ref(queue, cons);
+	/*
+	 * 无关的MAX_SKB_FRAGS是17
+	 *
+	 * XEN_NETIF_NR_SLOTS_MIN是18
+	 *
+	 * max根据情况要么18要么19
+	 */
 	int max = XEN_NETIF_NR_SLOTS_MIN + (rx->status <= RX_COPY_THRESHOLD);
 	int slots = 1;
 	int err = 0;
 	unsigned long ret;
 
 	if (rx->flags & XEN_NETRXF_extra_info) {
+		/* 这个函数返回的时候queue->rx.rsp_cons指向最后一个extra info的response */
 		err = xennet_get_extras(queue, extras, rp);
 		cons = queue->rx.rsp_cons;
 	}
@@ -1021,6 +1219,11 @@ static int xennet_get_responses(struct netfront_queue *queue,
 		 * (the underlying grant) and freeing later on. These grants
 		 * are mapped in the backend.
 		 */
+		/*
+		 * 参考xennet_alloc_rx_buffers()的注释.
+		 *
+		 * 似乎可以理解成如果NETFRONT_SKB_CB(skb)->ref是GRANT_INVALID_REF, 说明是新分配的page??
+		 */
 		if (NETFRONT_SKB_CB(skb)->ref != GRANT_INVALID_REF) {
 			__skb_queue_tail(list, skb);
 			goto next;
@@ -1057,12 +1260,28 @@ static int xennet_get_responses(struct netfront_queue *queue,
 			break;
 		}
 
+		/*
+		 * slots初始化是1
+		 *
+		 * cons指向最后一个extra info的response?
+		 */
 		rx = RING_GET_RESPONSE(&queue->rx, cons + slots);
+		/*
+		 * 取出queue->rx_skbs[xennet_rxidx(ri)]返回
+		 * 返回前设置queue->rx_skbs[xennet_rxidx(ri)]为NULL
+		 */
 		skb = xennet_get_rx_skb(queue, cons + slots);
+		/*
+		 * 取出queue->grant_rx_ref[xennet_rxidx(ri)]返回
+		 * 返回前设置queue->grant_rx_ref[xennet_rxidx(ri)]为GRANT_INVALID_REF
+		 */
 		ref = xennet_get_rx_ref(queue, cons + slots);
 		slots++;
 	}
 
+	/*
+	 * max根据情况要么18要么19
+	 */
 	if (unlikely(slots > max)) {
 		if (net_ratelimit())
 			dev_warn(dev, "Too many slots\n");
@@ -1072,9 +1291,16 @@ static int xennet_get_responses(struct netfront_queue *queue,
 	if (unlikely(err))
 		queue->rx.rsp_cons = cons + slots;
 
+	/*
+	 * 这个函数如果正常返回, queue->rx.rsp_cons是最后一个extra info (或者第一个response在没有extra info的情况下)
+	 */
 	return err;
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|1472| <<xennet_poll>> if (unlikely(xennet_set_skb_gso(skb, gso))) {
+ */
 static int xennet_set_skb_gso(struct sk_buff *skb,
 			      struct xen_netif_extra_info *gso)
 {
@@ -1104,6 +1330,11 @@ static int xennet_set_skb_gso(struct sk_buff *skb,
 	return 0;
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|1289| <<xennet_fill_frags>> xennet_page_ref_inc(queue, page, ref);
+ *   - drivers/net/xen-netfront.c|1461| <<xennet_poll>> xennet_page_ref_inc(queue, page, ref);
+ */
 static void xennet_page_ref_inc(struct netfront_queue *queue,
 				struct page *page, grant_ref_t ref)
 {
@@ -1124,6 +1355,10 @@ static void xennet_page_ref_inc(struct netfront_queue *queue,
 	}
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|1493| <<xennet_poll>> i = xennet_fill_frags(queue, skb, &tmpq);
+ */
 static RING_IDX xennet_fill_frags(struct netfront_queue *queue,
 				  struct sk_buff *skb,
 				  struct sk_buff_head *list)
@@ -1131,7 +1366,17 @@ static RING_IDX xennet_fill_frags(struct netfront_queue *queue,
 	RING_IDX cons = queue->rx.rsp_cons;
 	struct sk_buff *nskb;
 
+	/*
+	 * 进入这个函数的时候
+	 * queue->rx.rsp_cons是最后一个extra info (或者第一个response在没有extra info的情况下)
+	 */
+
 	while ((nskb = __skb_dequeue(list))) {
+		/*
+		 * rx是下一个response
+		 *
+		 * cons先加1 指向下一个response (也就是这里要用的)
+		 */
 		struct xen_netif_rx_response *rx =
 			RING_GET_RESPONSE(&queue->rx, ++cons);
 		skb_frag_t *nfrag = &skb_shinfo(nskb)->frags[0];
@@ -1139,11 +1384,31 @@ static RING_IDX xennet_fill_frags(struct netfront_queue *queue,
 		struct page *page = skb_frag_page(nfrag);
 
 		if (skb_shinfo(skb)->nr_frags == MAX_SKB_FRAGS) {
+			/*
+			 * 设置pull_to的地方:
+			 *   - drivers/net/xen-netfront.c|1462| <<xennet_poll>> NETFRONT_SKB_CB(skb)->pull_to = rx->status;
+			 *   - drivers/net/xen-netfront.c|1464| <<xennet_poll>> NETFRONT_SKB_CB(skb)->pull_to = RX_COPY_THRESHOLD;
+			 * 使用pull_to的地方:
+			 *   - drivers/net/xen-netfront.c|1291| <<xennet_fill_frags>> unsigned int pull_to = NETFRONT_SKB_CB(skb)->pull_to;
+			 *   - drivers/net/xen-netfront.c|1293| <<xennet_fill_frags>> BUG_ON(pull_to < skb_headlen(skb));
+			 *   - drivers/net/xen-netfront.c|1294| <<xennet_fill_frags>> __pskb_pull_tail(skb, pull_to - skb_headlen(skb));
+			 *   - drivers/net/xen-netfront.c|1366| <<handle_incoming_queue>> int pull_to = NETFRONT_SKB_CB(skb)->pull_to;
+			 *   - drivers/net/xen-netfront.c|1368| <<handle_incoming_queue>> if (pull_to > skb_headlen(skb))
+			 *   - drivers/net/xen-netfront.c|1369| <<handle_incoming_queue>> __pskb_pull_tail(skb, pull_to - skb_headlen(skb));
+			 *   - drivers/net/xen-netfront.c|1463| <<xennet_poll>> if (NETFRONT_SKB_CB(skb)->pull_to > RX_COPY_THRESHOLD)
+			 */
 			unsigned int pull_to = NETFRONT_SKB_CB(skb)->pull_to;
 
+			/*
+			 * 这里以前是:
+			 * BUG_ON(pull_to <= skb_headlen(skb));
+			 */
 			BUG_ON(pull_to < skb_headlen(skb));
 			__pskb_pull_tail(skb, pull_to - skb_headlen(skb));
 		}
+		/*
+		 * MAX_SKB_FRAGS是17
+		 */
 		if (unlikely(skb_shinfo(skb)->nr_frags >= MAX_SKB_FRAGS)) {
 			queue->rx.rsp_cons = ++cons;
 			kfree_skb(nskb);
@@ -1152,6 +1417,9 @@ static RING_IDX xennet_fill_frags(struct netfront_queue *queue,
 
 		xennet_page_ref_inc(queue, page, ref);
 
+		/*
+		 * 会为skb_shinfo(skb)->nr_frags增加1
+		 */
 		skb_add_rx_frag(skb, skb_shinfo(skb)->nr_frags,
 				skb_frag_page(nfrag),
 				rx->offset, rx->status, PAGE_SIZE);
@@ -1170,6 +1438,10 @@ static void xennet_orphan_done(struct ubuf_info *ubuf, bool success)
 	 */
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|1484| <<handle_incoming_queue>> unlikely(xennet_orphan_frags(skb, GFP_ATOMIC))) {
+ */
 static int xennet_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
 {
 	struct ubuf_info ctx;
@@ -1206,6 +1478,10 @@ static int checksum_setup(struct netfront_info *info, struct sk_buff *skb)
 	return skb_checksum_setup(skb, recalculate_partial_csum);
 }
 
+/*
+ * called by:
+ *   - drivers/net/xen-netfront.c|1621| <<xennet_poll>> work_done -= handle_incoming_queue(queue, &rxq);
+ */
 static int handle_incoming_queue(struct netfront_queue *queue,
 				 struct sk_buff_head *rxq)
 {
@@ -1224,6 +1500,13 @@ static int handle_incoming_queue(struct netfront_queue *queue,
 		    unlikely(xennet_orphan_frags(skb, GFP_ATOMIC))) {
 			kfree_skb(skb);
 			packets_dropped++;
+			/*
+			 * netfront里增加的地方:
+			 *   - drivers/net/xen-netfront.c|1451| <<handle_incoming_queue>> queue->info->netdev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1462| <<handle_incoming_queue>> queue->info->netdev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1519| <<xennet_poll>> dev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1630| <<xennet_get_stats64>> tot->rx_errors = dev->stats.rx_errors;
+			 */
 			queue->info->netdev->stats.rx_errors++;
 			continue;
 		}
@@ -1235,6 +1518,13 @@ static int handle_incoming_queue(struct netfront_queue *queue,
 		if (checksum_setup(queue->info, skb)) {
 			kfree_skb(skb);
 			packets_dropped++;
+			/*
+			 * netfront里增加的地方:
+			 *   - drivers/net/xen-netfront.c|1451| <<handle_incoming_queue>> queue->info->netdev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1462| <<handle_incoming_queue>> queue->info->netdev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1519| <<xennet_poll>> dev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1630| <<xennet_get_stats64>> tot->rx_errors = dev->stats.rx_errors;
+			 */
 			queue->info->netdev->stats.rx_errors++;
 			continue;
 		}
@@ -1251,6 +1541,16 @@ static int handle_incoming_queue(struct netfront_queue *queue,
 	return packets_dropped;
 }
 
+/*
+ * queue->rx.rsp_cons可能增加的地方:
+ *   - drivers/net/xen-netfront.c|1163| <<xennet_get_extras>> queue->rx.rsp_cons = cons;
+ *   - drivers/net/xen-netfront.c|1292| <<xennet_get_responses>> queue->rx.rsp_cons = cons + slots;
+ *   - drivers/net/xen-netfront.c|1413| <<xennet_fill_frags>> queue->rx.rsp_cons = ++cons;
+ *   - drivers/net/xen-netfront.c|1614| <<xennet_poll>> queue->rx.rsp_cons += skb_queue_len(&tmpq);
+ *   - drivers/net/xen-netfront.c|1656| <<xennet_poll>> queue->rx.rsp_cons = ++i;
+ *   - include/xen/interface/io/ring.h|130| <<FRONT_RING_INIT>> (_r)->rsp_cons = 0; \
+ *   - include/xen/interface/io/ring.h|146| <<FRONT_RING_ATTACH>> (_r)->rsp_cons = (_s)->rsp_prod; \
+ */
 static int xennet_poll(struct napi_struct *napi, int budget)
 {
 	struct netfront_queue *queue = container_of(napi, struct netfront_queue, napi);
@@ -1277,23 +1577,60 @@ static int xennet_poll(struct napi_struct *napi, int budget)
 	rp = queue->rx.sring->rsp_prod;
 	rmb(); /* Ensure we see queued responses up to 'rp'. */
 
+	/*
+	 * queue->rx.rsp_cons可能增加的地方:
+	 *   - drivers/net/xen-netfront.c|1163| <<xennet_get_extras>> queue->rx.rsp_cons = cons;
+	 *   - drivers/net/xen-netfront.c|1292| <<xennet_get_responses>> queue->rx.rsp_cons = cons + slots;
+	 *   - drivers/net/xen-netfront.c|1413| <<xennet_fill_frags>> queue->rx.rsp_cons = ++cons;
+	 *   - drivers/net/xen-netfront.c|1614| <<xennet_poll>> queue->rx.rsp_cons += skb_queue_len(&tmpq);
+	 *   - drivers/net/xen-netfront.c|1656| <<xennet_poll>> queue->rx.rsp_cons = ++i;
+	 *   - include/xen/interface/io/ring.h|130| <<FRONT_RING_INIT>> (_r)->rsp_cons = 0; \
+	 *   - include/xen/interface/io/ring.h|146| <<FRONT_RING_ATTACH>> (_r)->rsp_cons = (_s)->rsp_prod; \
+	 *
+	 * 此时queue->rx.rsp_cons是下一个要消化的response
+	 */
 	i = queue->rx.rsp_cons;
 	work_done = 0;
 	while ((i != rp) && (work_done < budget)) {
+		/*
+		 * 获取第一个response
+		 */
 		memcpy(rx, RING_GET_RESPONSE(&queue->rx, i), sizeof(*rx));
 		memset(extras, 0, sizeof(rinfo.extras));
 
+		/*
+		 * queue->rx.rsp_cons可能增加的地方:
+		 *   - drivers/net/xen-netfront.c|1163| <<xennet_get_extras>> queue->rx.rsp_cons = cons;
+		 *   - drivers/net/xen-netfront.c|1292| <<xennet_get_responses>> queue->rx.rsp_cons = cons + slots;
+		 *   - drivers/net/xen-netfront.c|1413| <<xennet_fill_frags>> queue->rx.rsp_cons = ++cons;
+		 *   - drivers/net/xen-netfront.c|1614| <<xennet_poll>> queue->rx.rsp_cons += skb_queue_len(&tmpq);
+		 *   - drivers/net/xen-netfront.c|1656| <<xennet_poll>> queue->rx.rsp_cons = ++i;
+		 *   - include/xen/interface/io/ring.h|130| <<FRONT_RING_INIT>> (_r)->rsp_cons = 0; \
+		 *   - include/xen/interface/io/ring.h|146| <<FRONT_RING_ATTACH>> (_r)->rsp_cons = (_s)->rsp_prod; \
+		 *
+		 * 这个函数如果正常返回, queue->rx.rsp_cons是最后一个extra info (或者第一个response在没有extra info的情况下)
+		 */
 		err = xennet_get_responses(queue, &rinfo, rp, &tmpq);
 
 		if (unlikely(err)) {
 err:
 			while ((skb = __skb_dequeue(&tmpq)))
 				__skb_queue_tail(&errq, skb);
+			/*
+			 * netfront里增加的地方:
+			 *   - drivers/net/xen-netfront.c|1451| <<handle_incoming_queue>> queue->info->netdev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1462| <<handle_incoming_queue>> queue->info->netdev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1519| <<xennet_poll>> dev->stats.rx_errors++;
+			 *   - drivers/net/xen-netfront.c|1630| <<xennet_get_stats64>> tot->rx_errors = dev->stats.rx_errors;
+			 */
 			dev->stats.rx_errors++;
 			i = queue->rx.rsp_cons;
 			continue;
 		}
 
+		/*
+		 * skb是第一个response
+		 */
 		skb = __skb_dequeue(&tmpq);
 
 		if (extras[XEN_NETIF_EXTRA_TYPE_GSO - 1].type) {
@@ -1307,11 +1644,19 @@ static int xennet_poll(struct napi_struct *napi, int budget)
 			}
 		}
 
+		/*
+		 * rx应该是第一个response
+		 */
 		NETFRONT_SKB_CB(skb)->pull_to = rx->status;
 		if (NETFRONT_SKB_CB(skb)->pull_to > RX_COPY_THRESHOLD)
 			NETFRONT_SKB_CB(skb)->pull_to = RX_COPY_THRESHOLD;
 
 		page = skb_frag_page(&skb_shinfo(skb)->frags[0]);
+		/*
+		 * 关于ref参考xennet_alloc_rx_buffers()的注释.
+		 *
+		 * 似乎可以理解成如果NETFRONT_SKB_CB(skb)->ref是GRANT_INVALID_REF, 说明是新分配的page??
+		 */
 		ref = NETFRONT_SKB_CB(skb)->ref;
 
 		skb_shinfo(skb)->frags[0].page_offset = rx->offset;
@@ -1321,6 +1666,10 @@ static int xennet_poll(struct napi_struct *napi, int budget)
 
 		xennet_page_ref_inc(queue, page, ref);
 
+		/*
+		 * 执行到这里的时候
+		 * queue->rx.rsp_cons是最后一个extra info (或者第一个response在没有extra info的情况下)
+		 */
 		i = xennet_fill_frags(queue, skb, &tmpq);
 		if (unlikely(i == ~0U))
 			goto err;
-- 
2.7.4

