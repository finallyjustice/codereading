xen-4.4.4-155.0.72.el6

Sample logs:

[2019-06-05 09:23:27 2164] DEBUG (XendDomainInfo:568) XendDomainInfo.shutdown(poweroff)
[2019-06-05 09:23:27 2164] DEBUG (XendDomainInfo:1968) XendDomainInfo.handleShutdownWatch
[2019-06-05 09:23:27 2164] DEBUG (XendDomainInfo:1968) XendDomainInfo.handleShutdownWatch
[2019-06-05 09:23:28 2164] INFO (XendDomainInfo:2211) Domain has shutdown: name=ubuntu-kdump id=8 reason=poweroff.
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:3862) XendDomainInfo.destroy: domid=8
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:2584) Destroying device model
[2019-06-05 09:23:28 2164] INFO (image:741) ubuntu-kdump device model terminated
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:2591) Releasing devices
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:2597) Removing vif/0
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1348) XendDomainInfo.destroyDevice: deviceClass = vif, device = vif/0
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:2597) Removing vkbd/0
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1348) XendDomainInfo.destroyDevice: deviceClass = vkbd, device = vkbd/0
[2019-06-05 09:23:28 2164] DEBUG (DevController:180) Waiting for vkbd/0 - destroyDevice.
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:2597) Removing console/0
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1348) XendDomainInfo.destroyDevice: deviceClass = console, device = console/0
[2019-06-05 09:23:28 2164] DEBUG (DevController:180) Waiting for console/0 - destroyDevice.
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:2597) Removing vbd/51712
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1348) XendDomainInfo.destroyDevice: deviceClass = vbd, device = vbd/51712
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:2597) Removing vfb/0
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1348) XendDomainInfo.destroyDevice: deviceClass = vfb, device = vfb/0
[2019-06-05 09:23:28 2164] DEBUG (DevController:180) Waiting for vfb/0 - destroyDevice.
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:5262) Release running lock: status=0, output=Not clustered - no lock will be used.
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch
[2019-06-05 09:23:28 2164] DEBUG (XendDomainInfo:1991) XenDomainInfo.handleHideDevicesWatch

---------------------------------------------------------------------

打印下面log的callstack:

[2019-06-06 10:12:27 25301] DEBUG (XendDomainInfo:1348) XendDomainInfo.destroyDevice: deviceClass = vif, device = vif/0
[2019-06-06 10:12:27 25301] INFO (XendDomainInfo:1350)   File "/usr/lib64/python2.6/threading.py", line 504, in __bootstrap
    self.__bootstrap_inner()
  File "/usr/lib64/python2.6/threading.py", line 532, in __bootstrap_inner
    self.run()
  File "/usr/lib64/python2.6/threading.py", line 484, in run
    self.__target(*self.__args, **self.__kwargs)
  File "/usr/lib64/python2.6/site-packages/xen/xend/XendDomainInfo.py", line 2305, in _maybeRestart
    func()
  File "/usr/lib64/python2.6/site-packages/xen/xend/XendDomainInfo.py", line 3882, in destroy
    self.cleanupDomain()
  File "/usr/lib64/python2.6/site-packages/xen/xend/XendDomainInfo.py", line 3710, in cleanupDomain
    self._releaseDevices()
  File "/usr/lib64/python2.6/site-packages/xen/xend/XendDomainInfo.py", line 2600, in _releaseDevices
    self.destroyDevice(devclass, dev, force = force);
  File "/usr/lib64/python2.6/site-packages/xen/xend/XendDomainInfo.py", line 1350, in destroyDevice
    log.info("".join(traceback.format_stack()))

---------------------------------------------------------------------


1. Once "xm shutdown", xend would write "poweroff" to the xenstore path "control/shutdown" for corresponding domU.

2.domU kernel watches at "control/shutdown" (shutdown_watch in driver/xen/manage.c). Once there is "poweroff", the callstack is like:

do_poweroff()
 -> orderly_poweroff()
     -> schedule_work(&poweroff_work);

3. The "poweroff_work" in step 2 is poweroff_work_func():

poweroff_work_func()
 -> __orderly_poweroff
     -> run_cmd(poweroff_cmd);
        to call userspace "/sbin/poweroff" via call_usermodehelper()

4. I do not know what will "/sbin/poweroff" do. Finally, I captured that there is thread "systemd-shutdown" calling sys_reboot() with cmd=LINUX_REBOOT_CMD_POWER_OFF:

On ubuntu16.04: systemd-shutdown
-> sys_reboot()
    -> kernel_power_off()
        -> machine_power_off()
            -> machine_ops.power_off = native_machine_power_off()
                -> machine_shutdown()
                -> pm_power_off()

The "pm_power_off" in step 4 is a function pointer. I do not know who it is, perhaps acpi_power_off()?

5. I guess the "pm_power_off" trap to qemu-dm.

qemu-xen-traditional/i386-dm/helper2.c: cpu_handle_ioreq()
 -> print "shutdown requested in cpu_handle_ioreq"
    to /var/log/xen/qemu-dm-xxx.log
 -> destroy_hvm_domain()
     -> xc_domain_shutdown()
	 -> call __HYPERVISOR_sched_op with SCHEDOP_remote_shutdown
     -> print "Issued domain %d poweroff\n"
        to /var/log/xen/qemu-dm-xxx.log

In step 5, qemu-dm prints below lines to /var/log/xen/qemu-dm-xxx.log:

---------------------------------------
shutdown requested in cpu_handle_ioreq
Issued domain 1 poweroff
---------------------------------------

and trap to hypervisor via SCHEDOP_remote_shutdown. qemu-dm asks xen hypervisor to shutdown the domU via SCHEDOP_remote_shutdown.

---------------------------------

Now we come to xen hypervisor via SCHEDOP_remote_shutdown.

do_sched_op()
 -> SCHEDOP_remote_shutdown(): to shutdown domU by dom0
     -> domain_shutdown()

However, according to my test on Oracle VM, d->is_shut_down is set to 1 by __domain_finalise_shutdown() with below callstack:

vcpu_check_shutdown()
 -> __domain_finalise_shutdown()

I did not check who triggers vcpu_check_shutdown(). The callstack is like below:

(XEN) Xen call trace:
(XEN)    [<ffff82d08020ddde>] domain.c#__domain_finalise_shutdown+0x5e/0xa0
(XEN)    [<ffff82d08020de70>] domain.c#vcpu_check_shutdown+0x50/0x80
(XEN)    [<ffff82d0802d77d2>] hvm_do_resume+0xe2/0x1f0
(XEN)    [<ffff82d0802f42b0>] vmx_do_resume+0x150/0x220
(XEN)    [<ffff82d080274ae8>] context_switch+0x138/0xf80
(XEN)    [<ffff82d080274ae8>] context_switch+0x138/0xf80
(XEN)    [<ffff82d0802380b2>] schedule.c#schedule+0x252/0x580
(XEN)    [<ffff82d080239889>] softirq.c#__do_softirq+0x69/0xa0
(XEN)    [<ffff82d080239889>] softirq.c#__do_softirq+0x69/0xa0
(XEN)    [<ffff82d08027690a>] domain.c#idle_loop+0x1a/0x60
