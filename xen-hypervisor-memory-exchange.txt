From 5fd2f14d7e0991413f2517d237c58d549e28c020 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang@oracle.com>
Date: Thu, 30 Aug 2018 22:37:06 +0800
Subject: [PATCH 1/1] xen mm: comment memoru exchange

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com	>
---
 xen/common/memory.c | 61 ++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 60 insertions(+), 1 deletion(-)

diff --git a/xen/common/memory.c b/xen/common/memory.c
index a07b18a..139fff4 100644
--- a/xen/common/memory.c
+++ b/xen/common/memory.c
@@ -456,6 +456,8 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
         goto fail_early;
     }
 
+    /* 开始的时候一般nr_exchanged是 0 */
+
     if ( !guest_handle_subrange_okay(exch.in.extent_start, exch.nr_exchanged,
                                      exch.in.nr_extents - 1) )
     {
@@ -463,6 +465,29 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
         goto fail_early;
     }
 
+/*
+ * 假设是释放连续内存:
+ * struct xen_memory_exchange exchange = {
+ *	.in = {
+ *		.nr_extents   = extents_in,  --> 1
+ *		.extent_order = order_in,    --> 2
+ *		.extent_start = pfns_in,
+ *		.domid        = DOMID_SELF
+ *	},
+ *
+ *	.out = {
+ *		.nr_extents   = extents_out, --> 4
+ *		.extent_order = order_out,   --> 0
+ *		.extent_start = mfns_out,
+ *		.address_bits = address_bits,
+ *		.domid        = DOMID_SELF
+ *	}
+ * };
+ */
+
+    /*
+     * 这种情况应该是把连续的换成不连续的
+     */
     if ( exch.in.extent_order <= exch.out.extent_order )
     {
         in_chunk_order  = exch.out.extent_order - exch.in.extent_order;
@@ -476,9 +501,10 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
             goto fail_early;
         }
     }
-    else
+    else  /* 这种情况应该是把不连续的变成连续的 */
     {
         in_chunk_order  = 0;
+	/* 根据上面的例子, out_chunk_order = 2 */
         out_chunk_order = exch.in.extent_order - exch.out.extent_order;
 
         if ( !guest_handle_subrange_okay(exch.out.extent_start,
@@ -515,6 +541,16 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
         XENMEMF_get_address_bits(exch.out.mem_flags) ? :
         (BITS_PER_LONG+PAGE_SHIFT)));
 
+    /*
+     * 根据上面的例子:
+     *   in_chunk_order  = 0
+     *   out_chunk_order = 2
+     *
+     *   (exch.nr_exchanged >> in_chunk_order) = 0 >> 0 = 0
+     *   (exch.in.nr_extents >> in_chunk_order) = 1 >> 0 = 1
+     *
+     *   所以在destroy continuous中for循环就一次
+     */
     for ( i = (exch.nr_exchanged >> in_chunk_order);
           i < (exch.in.nr_extents >> in_chunk_order);
           i++ )
@@ -531,8 +567,16 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
         }
 
         /* Steal a chunk's worth of input pages from the domain. */
+	/*
+	 * 根据上面的例子(1UL << in_chunk_order) = 1UL << 0 = 1UL
+	 * j的for循环就一次
+	 */
         for ( j = 0; j < (1UL << in_chunk_order); j++ )
         {
+            /*
+	     * gmfn是xen_pfn_t的一个变量
+	     * exch.in.extent_start是一个地址存了很多元素, 这里就用到第一个
+	     */
             if ( unlikely(__copy_from_guest_offset(
                 &gmfn, exch.in.extent_start, (i<<in_chunk_order)+j, 1)) )
             {
@@ -540,6 +584,14 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
                 goto fail;
             }
 
+	    /*
+	     * 上面完了这里gmfn存着要返还的连续mfn的第一个地址 (后面都是连续的)
+	     *
+	     * 下面exch.in.extent_order是 2
+	     *
+	     * k的for循环跑4次
+	     */
+
             for ( k = 0; k < (1UL << exch.in.extent_order); k++ )
             {
 #ifdef CONFIG_X86
@@ -565,6 +617,7 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
 
                 page = mfn_to_page(mfn);
 
+		/* 把4个page一个一个偷走 */
                 if ( unlikely(steal_page(d, page, MEMF_no_refcount)) )
                 {
                     put_gfn(d, gmfn + k);
@@ -572,14 +625,19 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
                     goto fail;
                 }
 
+		/* 如果成功偷走了就放在in_chunk_list上 */
                 page_list_add(page, &in_chunk_list);
                 put_gfn(d, gmfn + k);
             }
         }
 
         /* Allocate a chunk's worth of anonymous output pages. */
+	/*
+	 * 在这个例子中 out_chunk_order是2, 所以循环4次
+	 */
         for ( j = 0; j < (1UL << out_chunk_order); j++ )
         {
+            /* exch.out.extent_order 是 0 */
             page = alloc_domheap_pages(d, exch.out.extent_order,
                                        MEMF_no_owner | memflags);
             if ( unlikely(page == NULL) )
@@ -588,6 +646,7 @@ static long memory_exchange(XEN_GUEST_HANDLE_PARAM(xen_memory_exchange_t) arg)
                 goto fail;
             }
 
+	    /* 等for循环完了, out_chunk_list上应该挂了4个page */
             page_list_add(page, &out_chunk_list);
         }
 
-- 
2.7.4

