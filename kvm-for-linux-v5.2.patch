From 838db42f60d75c37ed20468c39e4c779f1c1ca74 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Mon, 26 Aug 2019 16:13:04 +0800
Subject: [PATCH 1/1] kvm for linux v5.2

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/include/asm/kvm_host.h |  38 +++++++++++++
 arch/x86/kvm/lapic.c            | 117 ++++++++++++++++++++++++++++++++++++++++
 arch/x86/kvm/lapic.h            |  48 +++++++++++++++++
 arch/x86/kvm/vmx/vmx.c          |  28 ++++++++++
 arch/x86/kvm/vmx/vmx.h          |  19 +++++++
 arch/x86/kvm/x86.c              |   3 ++
 include/linux/kvm_host.h        |   8 +++
 7 files changed, 261 insertions(+)

diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 26d1eb8..431ca52 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -54,6 +54,11 @@
 #define KVM_REQ_MMU_SYNC		KVM_ARCH_REQ(3)
 #define KVM_REQ_CLOCK_UPDATE		KVM_ARCH_REQ(4)
 #define KVM_REQ_LOAD_CR3		KVM_ARCH_REQ(5)
+/*
+ * 在很多地方设置, 这里是使用的地方:
+ *   - arch/x86/kvm/x86.c|7855| <<vcpu_enter_guest>> if (kvm_check_request(KVM_REQ_EVENT, vcpu) || req_int_win) {
+ *   - arch/x86/kvm/vmx/vmx.c|5165| <<handle_invalid_guest_state>> if (kvm_test_request(KVM_REQ_EVENT, vcpu))
+ */
 #define KVM_REQ_EVENT			KVM_ARCH_REQ(6)
 #define KVM_REQ_APF_HALT		KVM_ARCH_REQ(7)
 #define KVM_REQ_STEAL_UPDATE		KVM_ARCH_REQ(8)
@@ -556,6 +561,32 @@ struct kvm_vcpu_arch {
 	u64 efer;
 	u64 apic_base;
 	struct kvm_lapic *apic;    /* kernel irqchip context */
+	/*
+	 * 在以下设置apicv_active:
+	 *   - arch/x86/kvm/x86.c|7171| <<kvm_vcpu_deactivate_apicv>> vcpu->arch.apicv_active = false;
+	 *   - arch/x86/kvm/x86.c|9153| <<kvm_arch_vcpu_init>> vcpu->arch.apicv_active = kvm_x86_ops->get_enable_apicv(vcpu);
+	 *
+	 * 在以下使用apicv_active:
+	 *   - arch/x86/kvm/lapic.c|511| <<apic_clear_irr>> if (unlikely(vcpu->arch.apicv_active)) {
+	 *   - arch/x86/kvm/lapic.c|542| <<apic_set_isr>> if (unlikely(vcpu->arch.apicv_active))
+	 *   - arch/x86/kvm/lapic.c|590| <<apic_clear_isr>> if (unlikely(vcpu->arch.apicv_active))
+	 *   - arch/x86/kvm/lapic.c|733| <<apic_has_interrupt_for_ppr>> if (apic->vcpu->arch.apicv_active)
+	 *   - arch/x86/kvm/lapic.c|1132| <<__apic_accept_irq>> if (vcpu->arch.apicv_active)
+	 *   - arch/x86/kvm/lapic.c|1544| <<lapic_timer_int_injected>> if (vcpu->arch.apicv_active)
+	 *   - arch/x86/kvm/lapic.c|2271| <<kvm_lapic_reset>> apic->irr_pending = vcpu->arch.apicv_active;
+	 *   - arch/x86/kvm/lapic.c|2272| <<kvm_lapic_reset>> apic->isr_count = vcpu->arch.apicv_active ? 1 : 0;
+	 *   - arch/x86/kvm/lapic.c|2281| <<kvm_lapic_reset>> if (vcpu->arch.apicv_active) {
+	 *   - arch/x86/kvm/lapic.c|2551| <<kvm_apic_set_state>> apic->isr_count = vcpu->arch.apicv_active ?
+	 *   - arch/x86/kvm/lapic.c|2554| <<kvm_apic_set_state>> if (vcpu->arch.apicv_active) {
+	 *   - arch/x86/kvm/lapic.h|220| <<kvm_vcpu_apicv_active>> return vcpu->arch.apic && vcpu->arch.apicv_active;
+	 *   - arch/x86/kvm/vmx/vmx.c|6083| <<vmx_sync_pir_to_irr>> WARN_ON(!vcpu->arch.apicv_active);
+	 *   - arch/x86/kvm/x86.c|3354| <<kvm_vcpu_ioctl_get_lapic>> if (vcpu->arch.apicv_active)
+	 *   - arch/x86/kvm/x86.c|7165| <<kvm_vcpu_deactivate_apicv>> WARN_ON_ONCE(vcpu->arch.apicv_active);
+	 *   - arch/x86/kvm/x86.c|7168| <<kvm_vcpu_deactivate_apicv>> if (!vcpu->arch.apicv_active)
+	 *   - arch/x86/kvm/x86.c|7276| <<update_cr8_intercept>> if (vcpu->arch.apicv_active)
+	 *   - arch/x86/kvm/x86.c|7677| <<vcpu_scan_ioapic>> if (vcpu->arch.apicv_active)
+	 *   - arch/x86/kvm/x86.c|7936| <<vcpu_enter_guest>> if (kvm_lapic_enabled(vcpu) && vcpu->arch.apicv_active)
+	 */
 	bool apicv_active;
 	bool load_eoi_exitmap_pending;
 	DECLARE_BITMAP(ioapic_handled_vectors, 256);
@@ -1480,6 +1511,13 @@ enum {
 #define HF_VINTR_MASK		(1 << 2)
 #define HF_NMI_MASK		(1 << 3)
 #define HF_IRET_MASK		(1 << 4)
+/*
+ * HF_GUEST_MASK在以下使用:
+ *   - arch/x86/kvm/kvm_cache_regs.h|130| <<enter_guest_mode>> vcpu->arch.hflags |= HF_GUEST_MASK;
+ *   - arch/x86/kvm/kvm_cache_regs.h|135| <<leave_guest_mode>> vcpu->arch.hflags &= ~HF_GUEST_MASK;
+ *   - arch/x86/kvm/kvm_cache_regs.h|145| <<is_guest_mode>> return vcpu->arch.hflags & HF_GUEST_MASK;
+ *   - arch/x86/kvm/x86.c|6112| <<init_emulate_ctxt>> BUILD_BUG_ON(HF_GUEST_MASK != X86EMUL_GUEST_MASK);
+ */
 #define HF_GUEST_MASK		(1 << 5) /* VCPU is in guest-mode */
 #define HF_SMM_MASK		(1 << 6)
 #define HF_SMM_INSIDE_NMI_MASK	(1 << 7)
diff --git a/arch/x86/kvm/lapic.c b/arch/x86/kvm/lapic.c
index 4dabc31..dfeae19 100644
--- a/arch/x86/kvm/lapic.c
+++ b/arch/x86/kvm/lapic.c
@@ -41,6 +41,18 @@
 #include "cpuid.h"
 #include "hyperv.h"
 
+/* IRR: 功能和PIC的类似,代表LAPIC已接收中断m但还未交CPU处理.
+ * ISR: 功能和PIC类似,代表CPU已开始处理中断,但还未完成.
+ *
+ * The IRR specifies which interrupts are pending acknowledgement, and is
+ * typically a symbolic register which can not be directly accessed. The IRR
+ * tells us which interrupts have been raised.
+ *
+ * The ISR register specifies which interrupts have been acknowledged, but are
+ * still waiting for an End Of Interrupt (EOI). The ISR tells us which
+ * interrupts are being serviced, meaning IRQs sent to the CPU.
+ */
+
 #ifndef CONFIG_X86_64
 #define mod_64(x, y) ((x) - (y) * div64_u64(x, y))
 #else
@@ -72,11 +84,24 @@
 /* step-by-step approximation to mitigate fluctuation */
 #define LAPIC_TIMER_ADVANCE_ADJUST_STEP 8
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|84| <<kvm_apic_pending_eoi>> return apic_test_vector(vector, apic->regs + APIC_ISR) ||
+ *   - arch/x86/kvm/lapic.c|85| <<kvm_apic_pending_eoi>> apic_test_vector(vector, apic->regs + APIC_IRR);
+ *   - arch/x86/kvm/lapic.c|1054| <<__apic_accept_irq>> if (apic_test_vector(vector, apic->regs + APIC_TMR) != !!trig_mode) {
+ *   - arch/x86/kvm/lapic.c|1159| <<kvm_ioapic_send_eoi>> if (apic_test_vector(vector, apic->regs + APIC_TMR))
+ *   - arch/x86/kvm/lapic.c|1476| <<lapic_timer_int_injected>> if (apic_test_vector(vec, bitmap))
+ */
 static inline int apic_test_vector(int vec, void *bitmap)
 {
 	return test_bit(VEC_POS(vec), (bitmap) + REG_POS(vec));
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/ioapic.c|120| <<__rtc_irq_eoi_tracking_restore_one>> new_val = kvm_apic_pending_eoi(vcpu, e->fields.vector);
+ *   - arch/x86/kvm/ioapic.c|260| <<kvm_ioapic_scan_entry>> kvm_apic_pending_eoi(vcpu, e->fields.vector))
+ */
 bool kvm_apic_pending_eoi(struct kvm_vcpu *vcpu, int vector)
 {
 	struct kvm_lapic *apic = vcpu->arch.apic;
@@ -85,16 +110,30 @@ bool kvm_apic_pending_eoi(struct kvm_vcpu *vcpu, int vector)
 		apic_test_vector(vector, apic->regs + APIC_IRR);
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|446| <<apic_clear_irr>> apic_clear_vector(vec, apic->regs + APIC_IRR);
+ *   - arch/x86/kvm/lapic.c|451| <<apic_clear_irr>> apic_clear_vector(vec, apic->regs + APIC_IRR);
+ *   - arch/x86/kvm/lapic.c|1058| <<__apic_accept_irq>> apic_clear_vector(vector, apic->regs + APIC_TMR);
+ */
 static inline void apic_clear_vector(int vec, void *bitmap)
 {
 	clear_bit(VEC_POS(vec), (bitmap) + REG_POS(vec));
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|461| <<apic_set_isr>> if (__apic_test_and_set_vector(vec, apic->regs + APIC_ISR))
+ */
 static inline int __apic_test_and_set_vector(int vec, void *bitmap)
 {
 	return __test_and_set_bit(VEC_POS(vec), (bitmap) + REG_POS(vec));
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|507| <<apic_clear_isr>> if (!__apic_test_and_clear_vector(vec, apic->regs + APIC_ISR))
+ */
 static inline int __apic_test_and_clear_vector(int vec, void *bitmap)
 {
 	return __test_and_clear_bit(VEC_POS(vec), (bitmap) + REG_POS(vec));
@@ -242,6 +281,12 @@ static void recalculate_apic_map(struct kvm *kvm)
 	kvm_make_scan_ioapic_request(kvm);
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|1957| <<kvm_lapic_reg_write>> apic_set_spiv(apic, val & mask);
+ *   - arch/x86/kvm/lapic.c|2262| <<kvm_lapic_reset>> apic_set_spiv(apic, 0xff);
+ *   - arch/x86/kvm/lapic.c|2539| <<kvm_apic_set_state>> apic_set_spiv(apic, *((u32 *)(s->regs + APIC_SPIV)));
+ */
 static inline void apic_set_spiv(struct kvm_lapic *apic, u32 val)
 {
 	bool enabled = val & APIC_SPIV_APIC_ENABLED;
@@ -346,6 +391,11 @@ static const unsigned int apic_lvt_mask[KVM_APIC_LVT_NUM] = {
 	LVT_MASK		/* LVTERR */
 };
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|418| <<apic_search_irr>> return find_highest_vector(apic->regs + APIC_IRR);
+ *   - arch/x86/kvm/lapic.c|498| <<apic_find_highest_isr>> result = find_highest_vector(apic->regs + APIC_ISR);
+ */
 static int find_highest_vector(void *bitmap)
 {
 	int vec;
@@ -375,6 +425,11 @@ static u8 count_vectors(void *bitmap)
 	return count;
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|456| <<kvm_apic_update_irr>> return __kvm_apic_update_irr(pir, apic->regs, max_irr);
+ *   - arch/x86/kvm/vmx/nested.c|3295| <<vmx_complete_nested_posted_interrupt>> __kvm_apic_update_irr(vmx->nested.pi_desc->pir,
+ */
 bool __kvm_apic_update_irr(u32 *pir, void *regs, int *max_irr)
 {
 	u32 i, vec;
@@ -384,6 +439,20 @@ bool __kvm_apic_update_irr(u32 *pir, void *regs, int *max_irr)
 	max_updated_irr = -1;
 	*max_irr = -1;
 
+	/*
+	 * 以IRR举例子...
+	 * 8个寄存器的地址并不连续, 每个寄存器看似占据16 bytes, 实际只用32-bit=4-byte
+	 * FEE0 0200H  Interrupt Request Register (IRR); bits 31:0
+	 * FEE0 0210H  Interrupt Request Register (IRR); bits 63:32
+	 * FEE0 0220H  Interrupt Request Register (IRR); bits 95:64
+	 * FEE0 0230H  Interrupt Request Register (IRR); bits 127:96
+	 * FEE0 0240H  Interrupt Request Register (IRR); bits 159:128
+	 * FEE0 0250H  Interrupt Request Register (IRR); bits 191:160
+	 * FEE0 0260H  Interrupt Request Register (IRR); bits 223:192
+	 * FEE0 0270H  Interrupt Request Register (IRR); bits 255:224
+	 */
+
+	/* 每个pir[i]是32个bit */
 	for (i = vec = 0; i <= 7; i++, vec += 32) {
 		pir_val = READ_ONCE(pir[i]);
 		irr_val = *((u32 *)(regs + APIC_IRR + i * 0x10));
@@ -405,6 +474,10 @@ bool __kvm_apic_update_irr(u32 *pir, void *regs, int *max_irr)
 }
 EXPORT_SYMBOL_GPL(__kvm_apic_update_irr);
 
+/*
+ * called by:
+ *   - arch/x86/kvm/vmx/vmx.c|6092| <<vmx_sync_pir_to_irr>> kvm_apic_update_irr(vcpu, vmx->pi_desc.pir, &max_irr);
+ */
 bool kvm_apic_update_irr(struct kvm_vcpu *vcpu, u32 *pir, int *max_irr)
 {
 	struct kvm_lapic *apic = vcpu->arch.apic;
@@ -454,6 +527,10 @@ static inline void apic_clear_irr(int vec, struct kvm_lapic *apic)
 	}
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|2461| <<kvm_get_apic_interrupt>> apic_set_isr(vector, apic);
+ */
 static inline void apic_set_isr(int vec, struct kvm_lapic *apic)
 {
 	struct kvm_vcpu *vcpu;
@@ -482,6 +559,14 @@ static inline void apic_set_isr(int vec, struct kvm_lapic *apic)
 	}
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|598| <<apic_clear_isr>> apic_find_highest_isr(apic));
+ *   - arch/x86/kvm/lapic.c|755| <<__apic_update_ppr>> isr = apic_find_highest_isr(apic);
+ *   - arch/x86/kvm/lapic.c|1251| <<apic_set_eoi>> int vector = apic_find_highest_isr(apic);
+ *   - arch/x86/kvm/lapic.c|2570| <<kvm_apic_set_state>> apic_find_highest_isr(apic));
+ *   - arch/x86/kvm/lapic.c|2697| <<kvm_lapic_sync_to_vapic>> max_isr = apic_find_highest_isr(apic);
+ */
 static inline int apic_find_highest_isr(struct kvm_lapic *apic)
 {
 	int result;
@@ -1058,6 +1143,11 @@ static int __apic_accept_irq(struct kvm_lapic *apic, int delivery_mode,
 				apic_clear_vector(vector, apic->regs + APIC_TMR);
 		}
 
+		/*
+		 * 在以下设置apicv_active:
+		 *   - arch/x86/kvm/x86.c|7171| <<kvm_vcpu_deactivate_apicv>> vcpu->arch.apicv_active = false;
+		 *   - arch/x86/kvm/x86.c|9153| <<kvm_arch_vcpu_init>> vcpu->arch.apicv_active = kvm_x86_ops->get_enable_apicv(vcpu);
+		 */
 		if (vcpu->arch.apicv_active)
 			kvm_x86_ops->deliver_posted_interrupt(vcpu, vector);
 		else {
@@ -2266,6 +2356,10 @@ void kvm_apic_nmi_wd_deliver(struct kvm_vcpu *vcpu)
 		kvm_apic_local_deliver(apic, APIC_LVT0);
 }
 
+/*
+ * used by:
+ *   - arch/x86/kvm/lapic.c|2328| <<kvm_create_lapic>> kvm_iodevice_init(&apic->dev, &apic_mmio_ops);
+ */
 static const struct kvm_io_device_ops apic_mmio_ops = {
 	.read     = apic_mmio_read,
 	.write    = apic_mmio_write,
@@ -2286,6 +2380,10 @@ static enum hrtimer_restart apic_timer_fn(struct hrtimer *data)
 		return HRTIMER_NORESTART;
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/x86.c|9154| <<kvm_arch_vcpu_init>> r = kvm_create_lapic(vcpu, lapic_timer_advance_ns);
+ */
 int kvm_create_lapic(struct kvm_vcpu *vcpu, int timer_advance_ns)
 {
 	struct kvm_lapic *apic;
@@ -2537,6 +2635,11 @@ static void apic_sync_pv_eoi_from_guest(struct kvm_vcpu *vcpu,
 	trace_kvm_pv_eoi(apic, vector);
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/x86.c|8032| <<vcpu_enter_guest>> kvm_lapic_sync_from_vapic(vcpu);
+ *   - arch/x86/kvm/x86.c|8041| <<vcpu_enter_guest>> kvm_lapic_sync_from_vapic(vcpu);
+ */
 void kvm_lapic_sync_from_vapic(struct kvm_vcpu *vcpu)
 {
 	u32 data;
@@ -2580,6 +2683,10 @@ static void apic_sync_pv_eoi_to_guest(struct kvm_vcpu *vcpu,
 	pv_eoi_set_pending(apic->vcpu);
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/x86.c|7892| <<vcpu_enter_guest>> kvm_lapic_sync_to_vapic(vcpu);
+ */
 void kvm_lapic_sync_to_vapic(struct kvm_vcpu *vcpu)
 {
 	u32 data, tpr;
@@ -2600,10 +2707,20 @@ void kvm_lapic_sync_to_vapic(struct kvm_vcpu *vcpu)
 		max_isr = 0;
 	data = (tpr & 0xff) | ((max_isr & 0xf0) << 8) | (max_irr << 24);
 
+	/*
+	 * vapic_cache在以下使用:
+	 *   - arch/x86/kvm/lapic.c|2602| <<kvm_lapic_sync_from_vapic>> if (kvm_read_guest_cached(vcpu->kvm, &vcpu->arch.apic->vapic_cache, &data,
+	 *   - arch/x86/kvm/lapic.c|2655| <<kvm_lapic_sync_to_vapic>> kvm_write_guest_cached(vcpu->kvm, &vcpu->arch.apic->vapic_cache, &data,
+	 *   - arch/x86/kvm/lapic.c|2663| <<kvm_lapic_set_vapic_addr>> &vcpu->arch.apic->vapic_cache,
+	 */
 	kvm_write_guest_cached(vcpu->kvm, &vcpu->arch.apic->vapic_cache, &data,
 				sizeof(u32));
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/x86.c|4062| <<kvm_arch_vcpu_ioctl>> r = kvm_lapic_set_vapic_addr(vcpu, va.vapic_addr);
+ */
 int kvm_lapic_set_vapic_addr(struct kvm_vcpu *vcpu, gpa_t vapic_addr)
 {
 	if (vapic_addr) {
diff --git a/arch/x86/kvm/lapic.h b/arch/x86/kvm/lapic.h
index d6d049b..57c0af1 100644
--- a/arch/x86/kvm/lapic.h
+++ b/arch/x86/kvm/lapic.h
@@ -44,6 +44,18 @@ struct kvm_lapic {
 	u32 divide_count;
 	struct kvm_vcpu *vcpu;
 	bool sw_enabled;
+	/*
+	 * 设置irr_pending的地方:
+	 *   - arch/x86/kvm/lapic.c|517| <<apic_clear_irr>> apic->irr_pending = false;
+	 *   - arch/x86/kvm/lapic.c|520| <<apic_clear_irr>> apic->irr_pending = true;
+	 *   - arch/x86/kvm/lapic.c|2271| <<kvm_lapic_reset>> apic->irr_pending = vcpu->arch.apicv_active;
+	 *   - arch/x86/kvm/lapic.c|2550| <<kvm_apic_set_state>> apic->irr_pending = true;
+	 *   - arch/x86/kvm/lapic.h|163| <<kvm_lapic_set_irr>> apic->irr_pending = true;
+	 *
+	 * 使用irr_pending的地方:
+	 *   - arch/x86/kvm/lapic.c|496| <<apic_find_highest_irr>> if (!apic->irr_pending)
+	 *   - arch/x86/kvm/lapic.c|2647| <<apic_sync_pv_eoi_to_guest>> apic->irr_pending ||
+	 */
 	bool irr_pending;
 	bool lvt0_in_nmi_mode;
 	/* Number of bits set in ISR. */
@@ -57,6 +69,12 @@ struct kvm_lapic {
 	 */
 	void *regs;
 	gpa_t vapic_addr;
+	/*
+	 * vapic_cache在以下使用:
+	 *   - arch/x86/kvm/lapic.c|2602| <<kvm_lapic_sync_from_vapic>> if (kvm_read_guest_cached(vcpu->kvm, &vcpu->arch.apic->vapic_cache, &data,
+	 *   - arch/x86/kvm/lapic.c|2655| <<kvm_lapic_sync_to_vapic>> kvm_write_guest_cached(vcpu->kvm, &vcpu->arch.apic->vapic_cache, &data,
+	 *   - arch/x86/kvm/lapic.c|2663| <<kvm_lapic_set_vapic_addr>> &vcpu->arch.apic->vapic_cache,
+	 */
 	struct gfn_to_hva_cache vapic_cache;
 	unsigned long pending_events;
 	unsigned int sipi_vector;
@@ -129,11 +147,29 @@ void kvm_lapic_exit(void);
 #define VEC_POS(v) ((v) & (32 - 1))
 #define REG_POS(v) (((v) >> 5) << 4)
 
+/*
+ * 以IRR举例子...
+ * 8个寄存器的地址并不连续, 每个寄存器看似占据16 bytes, 实际只用32-bit=4-byte
+ * FEE0 0200H  Interrupt Request Register (IRR); bits 31:0
+ * FEE0 0210H  Interrupt Request Register (IRR); bits 63:32
+ * FEE0 0220H  Interrupt Request Register (IRR); bits 95:64
+ * FEE0 0230H  Interrupt Request Register (IRR); bits 127:96
+ * FEE0 0240H  Interrupt Request Register (IRR); bits 159:128
+ * FEE0 0250H  Interrupt Request Register (IRR); bits 191:160
+ * FEE0 0260H  Interrupt Request Register (IRR); bits 223:192
+ * FEE0 0270H  Interrupt Request Register (IRR); bits 255:224
+ */
+
 static inline void kvm_lapic_set_vector(int vec, void *bitmap)
 {
 	set_bit(VEC_POS(vec), (bitmap) + REG_POS(vec));
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|1135| <<__apic_accept_irq>> kvm_lapic_set_irr(vector, apic);
+ *   - arch/x86/kvm/svm.c|5160| <<svm_deliver_avic_intr>> kvm_lapic_set_irr(vec, vcpu->arch.apic);
+ */
 static inline void kvm_lapic_set_irr(int vec, struct kvm_lapic *apic)
 {
 	kvm_lapic_set_vector(vec, apic->regs + APIC_IRR);
@@ -141,6 +177,18 @@ static inline void kvm_lapic_set_irr(int vec, struct kvm_lapic *apic)
 	 * irr_pending must be true if any interrupt is pending; set it after
 	 * APIC_IRR to avoid race with apic_clear_irr
 	 */
+	/*
+	 * 设置irr_pending的地方:
+	 *   - arch/x86/kvm/lapic.c|517| <<apic_clear_irr>> apic->irr_pending = false;
+	 *   - arch/x86/kvm/lapic.c|520| <<apic_clear_irr>> apic->irr_pending = true;
+	 *   - arch/x86/kvm/lapic.c|2271| <<kvm_lapic_reset>> apic->irr_pending = vcpu->arch.apicv_active;
+	 *   - arch/x86/kvm/lapic.c|2550| <<kvm_apic_set_state>> apic->irr_pending = true;
+	 *   - arch/x86/kvm/lapic.h|163| <<kvm_lapic_set_irr>> apic->irr_pending = true;
+	 *
+	 * 使用irr_pending的地方:
+	 *   - arch/x86/kvm/lapic.c|496| <<apic_find_highest_irr>> if (!apic->irr_pending)
+	 *   - arch/x86/kvm/lapic.c|2647| <<apic_sync_pv_eoi_to_guest>> apic->irr_pending ||
+	 */
 	apic->irr_pending = true;
 }
 
diff --git a/arch/x86/kvm/vmx/vmx.c b/arch/x86/kvm/vmx/vmx.c
index d98eac3..a94e2a5 100644
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -6019,6 +6019,10 @@ static void vmx_hwapic_isr_update(struct kvm_vcpu *vcpu, int max_isr)
 	}
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/vmx/vmx.c|6060| <<vmx_hwapic_irr_update>> vmx_set_rvi(max_irr);
+ */
 static void vmx_set_rvi(int vector)
 {
 	u16 status;
@@ -6036,6 +6040,16 @@ static void vmx_set_rvi(int vector)
 	}
 }
 
+/*
+ * hwapic_irr_update在以下调用:
+ *   - arch/x86/kvm/lapic.c|491| <<apic_clear_irr>> kvm_x86_ops->hwapic_irr_update(vcpu,
+ *   - arch/x86/kvm/lapic.c|2260| <<kvm_lapic_reset>> kvm_x86_ops->hwapic_irr_update(vcpu, -1);
+ *   - arch/x86/kvm/lapic.c|2533| <<kvm_apic_set_state>> kvm_x86_ops->hwapic_irr_update(vcpu,
+ *
+ * used by:
+ *   - struct kvm_x86_ops vmx_x86_ops.hwapic_irr_update = vmx_hwapic_irr_update()
+ *   - arch/x86/kvm/vmx/vmx.c|6087| <<vmx_sync_pir_to_irr>> vmx_hwapic_irr_update(vcpu, max_irr);
+ */
 static void vmx_hwapic_irr_update(struct kvm_vcpu *vcpu, int max_irr)
 {
 	/*
@@ -6050,12 +6064,26 @@ static void vmx_hwapic_irr_update(struct kvm_vcpu *vcpu, int max_irr)
 		vmx_set_rvi(max_irr);
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/lapic.c|711| <<apic_has_interrupt_for_ppr>> highest_irr = kvm_x86_ops->sync_pir_to_irr(apic->vcpu);
+ *   - arch/x86/kvm/x86.c|3355| <<kvm_vcpu_ioctl_get_lapic>> kvm_x86_ops->sync_pir_to_irr(vcpu);
+ *   - arch/x86/kvm/x86.c|7678| <<vcpu_scan_ioapic>> kvm_x86_ops->sync_pir_to_irr(vcpu);
+ *   - arch/x86/kvm/x86.c|7934| <<vcpu_enter_guest>> kvm_x86_ops->sync_pir_to_irr(vcpu);
+ *
+ * struct kvm_x86_ops vmx_x86_ops.sync_pir_to_irr = vmx_sync_pir_to_irr()
+ */
 static int vmx_sync_pir_to_irr(struct kvm_vcpu *vcpu)
 {
 	struct vcpu_vmx *vmx = to_vmx(vcpu);
 	int max_irr;
 	bool max_irr_updated;
 
+	/*
+	 * 在以下设置apicv_active:
+	 *   - arch/x86/kvm/x86.c|7171| <<kvm_vcpu_deactivate_apicv>> vcpu->arch.apicv_active = false;
+	 *   - arch/x86/kvm/x86.c|9153| <<kvm_arch_vcpu_init>> vcpu->arch.apicv_active = kvm_x86_ops->get_enable_apicv(vcpu);
+	 */
 	WARN_ON(!vcpu->arch.apicv_active);
 	if (pi_test_on(&vmx->pi_desc)) {
 		pi_clear_on(&vmx->pi_desc);
diff --git a/arch/x86/kvm/vmx/vmx.h b/arch/x86/kvm/vmx/vmx.h
index 61128b4..9fab489 100644
--- a/arch/x86/kvm/vmx/vmx.h
+++ b/arch/x86/kvm/vmx/vmx.h
@@ -324,6 +324,10 @@ void vmx_update_host_rsp(struct vcpu_vmx *vmx, unsigned long host_rsp);
 #define POSTED_INTR_ON  0
 #define POSTED_INTR_SN  1
 
+/*
+ * called by:
+ *   - arch/x86/kvm/vmx/vmx.c|3717| <<vmx_deliver_posted_interrupt>> if (pi_test_and_set_on(&vmx->pi_desc))
+ */
 static inline bool pi_test_and_set_on(struct pi_desc *pi_desc)
 {
 	return test_and_set_bit(POSTED_INTR_ON,
@@ -347,18 +351,33 @@ static inline void pi_set_sn(struct pi_desc *pi_desc)
 		(unsigned long *)&pi_desc->control);
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/vmx/vmx.c|1225| <<vmx_vcpu_pi_load>> pi_set_on(pi_desc);
+ */
 static inline void pi_set_on(struct pi_desc *pi_desc)
 {
 	set_bit(POSTED_INTR_ON,
 		(unsigned long *)&pi_desc->control);
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/vmx/vmx.c|6085| <<vmx_sync_pir_to_irr>> pi_clear_on(&vmx->pi_desc);
+ *   - arch/x86/kvm/vmx/vmx.c|6130| <<vmx_apicv_post_state_restore>> pi_clear_on(&vmx->pi_desc);
+ */
 static inline void pi_clear_on(struct pi_desc *pi_desc)
 {
 	clear_bit(POSTED_INTR_ON,
 		(unsigned long *)&pi_desc->control);
 }
 
+/*
+ * called by:
+ *   - arch/x86/kvm/vmx/vmx.c|5248| <<wakeup_handler>> if (pi_test_on(pi_desc) == 1)
+ *   - arch/x86/kvm/vmx/vmx.c|6084| <<vmx_sync_pir_to_irr>> if (pi_test_on(&vmx->pi_desc)) {
+ *   - arch/x86/kvm/vmx/vmx.c|7259| <<pi_pre_block>> if (pi_test_on(pi_desc) == 1)
+ */
 static inline int pi_test_on(struct pi_desc *pi_desc)
 {
 	return test_bit(POSTED_INTR_ON,
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index fafd81d..121368f 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -7930,6 +7930,9 @@ static int vcpu_enter_guest(struct kvm_vcpu *vcpu)
 	 * This handles the case where a posted interrupt was
 	 * notified with kvm_vcpu_kick.
 	 */
+	/*
+	 * vmx: vmx_sync_pir_to_irr()
+	 */
 	if (kvm_lapic_enabled(vcpu) && vcpu->arch.apicv_active)
 		kvm_x86_ops->sync_pir_to_irr(vcpu);
 
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index d1ad38a..43027f8 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -219,6 +219,14 @@ int kvm_async_pf_wakeup_all(struct kvm_vcpu *vcpu);
 
 enum {
 	OUTSIDE_GUEST_MODE,
+	/*
+	 * x86下使用IN_GUEST_MODE的例子:
+	 *   - arch/x86/kvm/vmx/vmx.c|3644| <<kvm_vcpu_trigger_posted_interrupt>> if (vcpu->mode == IN_GUEST_MODE) {
+	 *   - arch/x86/kvm/x86.c|7911| <<vcpu_enter_guest>> vcpu->mode = IN_GUEST_MODE;
+	 *   - arch/x86/kvm/x86.c|9651| <<kvm_arch_vcpu_should_kick>> return kvm_vcpu_exiting_guest_mode(vcpu) == IN_GUEST_MODE;
+	 *   - include/linux/kvm_host.h|333| <<kvm_vcpu_exiting_guest_mode>> return cmpxchg(&vcpu->mode, IN_GUEST_MODE, EXITING_GUEST_MODE);
+	 *   - virt/kvm/kvm_main.c|196| <<kvm_request_needs_ipi>> return mode == IN_GUEST_MODE;
+	 */
 	IN_GUEST_MODE,
 	EXITING_GUEST_MODE,
 	READING_SHADOW_PAGE_TABLES,
-- 
2.7.4

