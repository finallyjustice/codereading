From 997aacb52504135f49c96b3ab3e1127a63437f8b Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang@oracle.com>
Date: Sun, 6 Jan 2019 22:27:52 +0800
Subject: [PATCH 1/1] linux bug report for 4.18.12

- hung_task, soft-lockup, hard-lockup
- rcu stall
- lockdep
- kmemleak, kasan

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
---
 kernel/hung_task.c    | 62 +++++++++++++++++++++++++++++++++++++++++++++++++++
 kernel/rcu/tree.c     |  4 ++++
 kernel/watchdog.c     | 38 +++++++++++++++++++++++++++++++
 kernel/watchdog_hld.c |  4 ++++
 4 files changed, 108 insertions(+)

diff --git a/kernel/hung_task.c b/kernel/hung_task.c
index 32b4794..aef04fc 100644
--- a/kernel/hung_task.c
+++ b/kernel/hung_task.c
@@ -22,6 +22,65 @@
 #include <trace/events/sched.h>
 
 /*
+ * hung_task   : kernel/hung_task.c
+ *   检测函数是check_hung_task()
+ * soft-lockup : kernel/watchdog.c
+ *   检测函数是watchdog_timer_fn()
+ * hard-lockup : kernel/watchdog_hld.c
+ *   检测函数是watchdog_overflow_callback()
+ *
+ *
+ * >>>>>>>> hung_task:
+ *
+ * 进程长时间(系统默认配置120秒)处于TASK_UNINTERRUPTIBLE睡眠状态,这种状态下进程不响应异步信号.如:进
+ * 程与外设硬件的交互(如read),通常使用这种状态来保证进程与设备的交互过程不被打断,否则设备可能处于不
+ * 可控的状态.
+ *
+ * Linux的进程存在多种状态,如TASK_RUNNING的运行态,EXIT_DEAD的停止态和TASK_INTERRUPTIBLE的接收信号的
+ * 等待状态等等(可在include/linux/sched.h中查看).其中有一种状态等待为TASK_UNINTERRUPTIBLE,称为D状态,
+ * 该种状态下进程不接收信号,只能通过wake_up唤醒.处于这种状态的情况有很多.例如mutex锁就可能会设置进
+ * 程于该状态,有时候进程在等待某种IO资源就绪时(wait_event机制)会设置进程进入该状态.一般情况下,进程处
+ * 于该状态的时间不会太久,但若IO设备出现故障或者出现进程死锁等情况,进程就可能长期处于该状态而无法再
+ * 返回到TASK_RUNNING态.因此,内核为了便于发现这类情况设计出了hung task机制专门用于检测长期处于D状态
+ * 的进程并发出告警.
+ *
+ * 核心思想为创建一个内核监测进程循环监测处于D状态的每一个进程(任务),统计它们在两次检测之间的调度次数,
+ * 如果发现有任务在两次监测之间没有发生任何的调度则可判断该进程一直处于D状态,很有可能已经死锁,因此触
+ * 发报警日志打印,输出进程的基本信息,栈回溯以及寄存器保存信息以供内核开发人员定位.
+ *
+ * 核心函数是kernel/hung_task.c的watchdog(), 会创建一个内核线程khungtaskd.
+ *
+ *
+ * >>>>>>>> soft-lockup:
+ *
+ * 进程长时间(系统默认配置60秒)处于TASK_RUNNING状态垄断cpu而不发生切换,一般情况下是进程关抢占后长时
+ * 候干活,有时候可能进程关抢占后处于死循环或者睡眠后,这样就造成系统异常.
+ *
+ * 内核会为每一个cpu创建一个内核线程"watchdog/%u",主要工作就是调用__touch_watchdog()函数来刷新时间戳
+ * watchdog_touch_ts.此线程函数是在watchdog_timer_fn中唤醒的. 此内核线程为实时的FIFO线程,优先级为
+ * MAX_RT_PRIO-1,优先级第二高了,这样就能够在进程被唤醒的时候能够强制其它优先级低的线程/进程了.
+ *
+ * hrtimer的处理函数watchdog_timer_fn()用来进行所有的检测.首先读取per CPU变量watchdog_touch_ts赋值给
+ * touch_ts,表示上一次刷新的时间戳.然后调用wake_up_process函数唤醒此cpu上的watchdog线程,如果watchdog
+ * 线程被唤醒就会去刷新时间戳,如果系统关了抢占,此watchdog线程不会被唤醒,这样时间戳就不会更新.
+ * is_softlockup()函数会判断当前时间与上次刷新时间touch_ts的差值,如果差值大于设定的阈值,就返回差值即
+ * 变量duration,否则返回0.如果duration不为0,则表示内核有超过设定的阈值时间没有发生调度。
+ *
+ *
+ * >>>>>>>> hard-lockup:
+ *
+ * hard-lockup利用了硬件的nmi.perf_event_create_kernel_counter()函数主要是注册了一个硬件的事件.这个硬
+ * 件在x86里叫performance monitoring,这个硬件有一个功能就是在cpu clock经过了多少个周期后发出一个NMI中
+ * 断出来.hw_nmi_get_sample_period()根据当前cpu的频率,算出一个值,也就是20秒cpu clock经过的周期数.这样
+ * 一来,当cpu全负荷跑完20秒后,就会有一个NMI中断发出,而这个中断的出路函数就是watchdog_overflow_callback().
+ * watchdog_overflow_callback()通过is_hardlockup()查看hrtimer_interrupts(是per cpu的)变量在时钟中断处
+ * 理函数里有没有被更新.假如没有更新,就意味着中断出了问题,可能被错误代码长时间的关中断了.
+ *
+ * per-cpu变量watchdog_overflow_callback()是在watchdog_timer_fn()-->watchdog_interrupt_count()更新的.
+ * watchdog_timer_fn()是一个hrtimer的处理函数.
+ */
+
+/*
  * The number of tasks checked:
  */
 int __read_mostly sysctl_hung_task_check_count = PID_MAX_LIMIT;
@@ -241,6 +300,9 @@ static int watchdog(void *dummy)
 {
 	unsigned long hung_last_checked = jiffies;
 
+	/*
+	 * 本进程首先设置优先级为0,即一般优先级,不影响其他进程
+	 */
 	set_user_nice(current, 0);
 
 	for ( ; ; ) {
diff --git a/kernel/rcu/tree.c b/kernel/rcu/tree.c
index aa7cade..690a205 100644
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@ -1502,6 +1502,10 @@ static void print_cpu_stall(struct rcu_state *rsp)
 	resched_cpu(smp_processor_id());
 }
 
+/*
+ * called by:
+ *   - kernel/rcu/tree.c|3244| <<__rcu_pending>> check_cpu_stall(rsp, rdp);
+ */
 static void check_cpu_stall(struct rcu_state *rsp, struct rcu_data *rdp)
 {
 	unsigned long completed;
diff --git a/kernel/watchdog.c b/kernel/watchdog.c
index 51f5a64..260a9ee 100644
--- a/kernel/watchdog.c
+++ b/kernel/watchdog.c
@@ -31,6 +31,16 @@
 #include <linux/kvm_para.h>
 #include <linux/kthread.h>
 
+/*
+ * 1. 抢占被长时间关闭而导致进程无法调度 (soft lockup)
+ *
+ * 2. 中断被长时间关闭而导致更严重的问题 (hard lockup)
+ *
+ * Softlockup是用来检测内核长时间不发生调度的情况,它的工作原理是在内核中启动一个优先级
+ * 为MAX_RT_PRIO-1的FIFO进程,在此进程里面会刷新时间戳.如果此时间戳超过设定的时间阈值
+ * 没有更新,则会报softlockup错误.
+ */
+
 static DEFINE_MUTEX(watchdog_mutex);
 
 #if defined(CONFIG_HARDLOCKUP_DETECTOR) || defined(CONFIG_HAVE_NMI_WATCHDOG)
@@ -177,6 +187,13 @@ static DEFINE_PER_CPU(struct task_struct *, softlockup_watchdog);
 static DEFINE_PER_CPU(struct hrtimer, watchdog_hrtimer);
 static DEFINE_PER_CPU(bool, softlockup_touch_sync);
 static DEFINE_PER_CPU(bool, soft_watchdog_warn);
+/*
+ * used by:
+ *   - kernel/watchdog.c|347| <<is_hardlockup>> unsigned long hrint = __this_cpu_read(hrtimer_interrupts);
+ *   - kernel/watchdog.c|358| <<watchdog_interrupt_count>> __this_cpu_inc(hrtimer_interrupts);
+ *   - kernel/watchdog.c|528| <<watchdog_should_run>> return __this_cpu_read(hrtimer_interrupts) !=
+ *   - kernel/watchdog.c|543| <<watchdog>> __this_cpu_read(hrtimer_interrupts));
+ */
 static DEFINE_PER_CPU(unsigned long, hrtimer_interrupts);
 static DEFINE_PER_CPU(unsigned long, soft_lockup_hrtimer_cnt);
 static DEFINE_PER_CPU(struct task_struct *, softlockup_task_ptr_saved);
@@ -224,6 +241,11 @@ static void __lockup_detector_cleanup(void);
  * the thresholds with a factor: we make the soft threshold twice the amount of
  * time the hard threshold is.
  */
+/*
+ * called by:
+ *   - kernel/watchdog.c|261| <<set_sample_period>> sample_period = get_softlockup_thresh() * ((u64)NSEC_PER_SEC / 5);
+ *   - kernel/watchdog.c|329| <<is_softlockup>> if (time_after(now, touch_ts + get_softlockup_thresh()))
+ */
 static int get_softlockup_thresh(void)
 {
 	return watchdog_thresh * 2;
@@ -306,6 +328,10 @@ void touch_softlockup_watchdog_sync(void)
 	__this_cpu_write(watchdog_touch_ts, 0);
 }
 
+/*
+ * called by only:
+ *   - kernel/watchdog.c|380| <<watchdog_timer_fn>> duration = is_softlockup(touch_ts);
+ */
 static int is_softlockup(unsigned long touch_ts)
 {
 	unsigned long now = get_timestamp();
@@ -319,6 +345,10 @@ static int is_softlockup(unsigned long touch_ts)
 }
 
 /* watchdog detector functions */
+/*
+ * called by only:
+ *   - kernel/watchdog_hld.c|131| <<watchdog_overflow_callback>> if (is_hardlockup()) {
+ */
 bool is_hardlockup(void)
 {
 	unsigned long hrint = __this_cpu_read(hrtimer_interrupts);
@@ -330,12 +360,20 @@ bool is_hardlockup(void)
 	return false;
 }
 
+/*
+ * called only by:
+ *   - kernel/watchdog.c|377| <<watchdog_timer_fn>> watchdog_interrupt_count();
+ */
 static void watchdog_interrupt_count(void)
 {
 	__this_cpu_inc(hrtimer_interrupts);
 }
 
 /* watchdog kicker functions */
+/*
+ * 在以下被使用:
+ *   - kernel/watchdog.c|485| <<watchdog_enable>> hrtimer->function = watchdog_timer_fn;
+ */
 static enum hrtimer_restart watchdog_timer_fn(struct hrtimer *hrtimer)
 {
 	unsigned long touch_ts = __this_cpu_read(watchdog_touch_ts);
diff --git a/kernel/watchdog_hld.c b/kernel/watchdog_hld.c
index 4ece602..3d13bdd 100644
--- a/kernel/watchdog_hld.c
+++ b/kernel/watchdog_hld.c
@@ -107,6 +107,10 @@ static struct perf_event_attr wd_hw_attr = {
 };
 
 /* Callback function for perf event subsystem */
+/*
+ * 在以下被使用:
+ *   - kernel/watchdog_hld.c|176| <<hardlockup_detector_event_create>> watchdog_overflow_callback, NULL);
+ */
 static void watchdog_overflow_callback(struct perf_event *event,
 				       struct perf_sample_data *data,
 				       struct pt_regs *regs)
-- 
2.7.4

