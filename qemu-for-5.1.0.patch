From 44641c99522bfa20df7c3c9116e75d8ba3b9cc2f Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Thu, 5 Nov 2020 16:11:33 -0800
Subject: [PATCH 1/1] qemu for 5.1.0

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 accel/kvm/kvm-all.c       |  4 ++
 hw/scsi/vhost-scsi.c      | 42 +++++++++++++++++++
 hw/virtio/virtio.c        | 17 ++++++++
 linux-headers/linux/kvm.h |  4 ++
 qdev-monitor.c            | 19 +++++++++
 qom/qom-qmp-cmds.c        | 25 ++++++++++++
 target/i386/kvm.c         | 86 +++++++++++++++++++++++++++++++++++++++
 7 files changed, 197 insertions(+)

diff --git a/accel/kvm/kvm-all.c b/accel/kvm/kvm-all.c
index 63ef6af9..99efba1b 100644
--- a/accel/kvm/kvm-all.c
+++ b/accel/kvm/kvm-all.c
@@ -430,6 +430,10 @@ static int kvm_get_vcpu(KVMState *s, unsigned long vcpu_id)
     return kvm_vm_ioctl(s, KVM_CREATE_VCPU, (void *)vcpu_id);
 }
 
+/*
+ * called by:
+ *   - softmmu/cpus.c|1173| <<qemu_kvm_cpu_thread_fn>> r = kvm_init_vcpu(cpu);
+ */
 int kvm_init_vcpu(CPUState *cpu)
 {
     KVMState *s = kvm_state;
diff --git a/hw/scsi/vhost-scsi.c b/hw/scsi/vhost-scsi.c
index 13b05af2..78215ebf 100644
--- a/hw/scsi/vhost-scsi.c
+++ b/hw/scsi/vhost-scsi.c
@@ -246,6 +246,48 @@ static void vhost_scsi_realize(DeviceState *dev, Error **errp)
     return;
 }
 
+/*
+ * (gdb) bt
+ * #0  0x00005555558eff73 in vhost_scsi_unrealize (dev=0x555557949590) at /home/zhang/test/qemu-5.1.0/hw/scsi/vhost-scsi.c:251
+ * #1  0x0000555555916da4 in virtio_device_unrealize (dev=0x555557949590) at /home/zhang/test/qemu-5.1.0/hw/virtio/virtio.c:3678
+ * #2  0x0000555555a9a5e5 in device_set_realized (obj=0x555557949590, value=false, errp=0x7fff30ffaf88) at hw/core/qdev.c:935
+ * #3  0x0000555555cc1fbf in property_set_bool (obj=0x555557949590, v=0x7fff1c8ad470, name=0x555555f8e844 "realized", opaque=0x555556870b60, errp=0x7fff30ffaf88) at qom/object.c:2202
+ * #4  0x0000555555cc00dc in object_property_set (obj=0x555557949590, name=0x555555f8e844 "realized", v=0x7fff1c8ad470, errp=0x5555567e5b18 <error_abort>) at qom/object.c:1349
+ * #5  0x0000555555cc3431 in object_property_set_qobject (obj=0x555557949590, name=0x555555f8e844 "realized", value=0x7fff1c8c7780, errp=0x5555567e5b18 <error_abort>) at qom/qom-qobject.c:28
+ * #6  0x0000555555cc0421 in object_property_set_bool (obj=0x555557949590, name=0x555555f8e844 "realized", value=false, errp=0x5555567e5b18 <error_abort>) at qom/object.c:1416
+ * #7  0x0000555555a98f22 in qdev_unrealize (dev=0x555557949590) at hw/core/qdev.c:393
+ * #8  0x0000555555a9ef69 in bus_set_realized (obj=0x555557949508, value=false, errp=0x7fff30ffb148) at hw/core/bus.c:199
+ * #9  0x0000555555cc1fbf in property_set_bool (obj=0x555557949508, v=0x7fff1c8ad3a0, name=0x555555f8fcf0 "realized", opaque=0x555557950890, errp=0x7fff30ffb148) at qom/object.c:2202
+ * #10 0x0000555555cc00dc in object_property_set (obj=0x555557949508, name=0x555555f8fcf0 "realized", v=0x7fff1c8ad3a0, errp=0x5555567e5b18 <error_abort>) at qom/object.c:1349
+ * #11 0x0000555555cc3431 in object_property_set_qobject (obj=0x555557949508, name=0x555555f8fcf0 "realized", value=0x7fff1c8c7760, errp=0x5555567e5b18 <error_abort>) at qom/qom-qobject.c:28
+ * #12 0x0000555555cc0421 in object_property_set_bool (obj=0x555557949508, name=0x555555f8fcf0 "realized", value=false, errp=0x5555567e5b18 <error_abort>) at qom/object.c:1416
+ * #13 0x0000555555a9ee2f in qbus_unrealize (bus=0x555557949508) at hw/core/bus.c:174
+ * #14 0x0000555555a9a553 in device_set_realized (obj=0x555557941400, value=false, errp=0x7fff30ffb368) at hw/core/qdev.c:929
+ * #15 0x0000555555cc1fbf in property_set_bool (obj=0x555557941400, v=0x7fff1c8c94d0, name=0x555555f8e844 "realized", opaque=0x555556870b60, errp=0x7fff30ffb368) at qom/object.c:2202
+ * #16 0x0000555555cc00dc in object_property_set (obj=0x555557941400, name=0x555555f8e844 "realized", v=0x7fff1c8c94d0, errp=0x5555567e5b18 <error_abort>) at qom/object.c:1349
+ * #17 0x0000555555cc3431 in object_property_set_qobject (obj=0x555557941400, name=0x555555f8e844 "realized", value=0x7fff1c8c7740, errp=0x5555567e5b18 <error_abort>) at qom/qom-qobject.c:28
+ * #18 0x0000555555cc0421 in object_property_set_bool (obj=0x555557941400, name=0x555555f8e844 "realized", value=false, errp=0x5555567e5b18 <error_abort>) at qom/object.c:1416
+ * #19 0x0000555555a98f22 in qdev_unrealize (dev=0x555557941400) at hw/core/qdev.c:393
+ * #20 0x0000555555a53ee2 in acpi_pcihp_device_unplug_cb (hotplug_dev=0x555557781210, s=0x555557782300, dev=0x555557941400, errp=0x5555567e5b18 <error_abort>) at hw/acpi/pcihp.c:268
+ * #21 0x0000555555a51f89 in piix4_device_unplug_cb (hotplug_dev=0x555557781210, dev=0x555557941400, errp=0x5555567e5b18 <error_abort>) at hw/acpi/piix4.c:413
+ * #22 0x0000555555aa20f8 in hotplug_handler_unplug (plug_handler=0x555557781210, plugged_dev=0x555557941400, errp=0x5555567e5b18 <error_abort>) at hw/core/hotplug.c:56
+ * #23 0x0000555555a53970 in acpi_pcihp_eject_slot (s=0x555557782300, bsel=1, slots=2) at hw/acpi/pcihp.c:170
+ * #24 0x0000555555a541e1 in pci_write (opaque=0x555557782300, addr=8, data=2, size=4) at hw/acpi/pcihp.c:340
+ * #25 0x000055555597c180 in memory_region_write_accessor (mr=0x555557782f10, addr=8, value=0x7fff30ffb698, size=4, shift=0, mask=4294967295, attrs=...) at /home/zhang/test/qemu-5.1.0/softmmu/memory.c:483
+ * #26 0x000055555597c39e in access_with_adjusted_size (addr=8, value=0x7fff30ffb698, size=4, access_size_min=1, access_size_max=4, access_fn=
+ *                                                      0x55555597c0a1 <memory_region_write_accessor>, mr=0x555557782f10, attrs=...) at /home/zhang/test/qemu-5.1.0/softmmu/memory.c:544
+ * #27 0x000055555597f26c in memory_region_dispatch_write (mr=0x555557782f10, addr=8, data=2, op=MO_32, attrs=...) at /home/zhang/test/qemu-5.1.0/softmmu/memory.c:1465
+ * #28 0x000055555582efcf in flatview_write_continue (fv=0x7fff1c8c7a80, addr=44552, attrs=..., ptr=0x7ffff7fea000, len=4, addr1=8, l=4, mr=0x555557782f10) at /home/zhang/test/qemu-5.1.0/exec.c:3176
+ * #29 0x000055555582f114 in flatview_write (fv=0x7fff1c8c7a80, addr=44552, attrs=..., buf=0x7ffff7fea000, len=4) at /home/zhang/test/qemu-5.1.0/exec.c:3216
+ * #30 0x000055555582f469 in address_space_write (as=0x5555567bfbc0 <address_space_io>, addr=44552, attrs=..., buf=0x7ffff7fea000, len=4) at /home/zhang/test/qemu-5.1.0/exec.c:3307
+ * #31 0x000055555582f4d6 in address_space_rw (as=0x5555567bfbc0 <address_space_io>, addr=44552, attrs=..., buf=0x7ffff7fea000, len=4, is_write=true) at /home/zhang/test/qemu-5.1.0/exec.c:3317
+ * #32 0x0000555555891678 in kvm_handle_io (port=44552, attrs=..., data=0x7ffff7fea000, direction=1, size=4, count=1) at /home/zhang/test/qemu-5.1.0/accel/kvm/kvm-all.c:2262
+ * #33 0x0000555555891de0 in kvm_cpu_exec (cpu=0x555556b250f0) at /home/zhang/test/qemu-5.1.0/accel/kvm/kvm-all.c:2508
+ * #34 0x00005555559765a1 in qemu_kvm_cpu_thread_fn (arg=0x555556b250f0) at /home/zhang/test/qemu-5.1.0/softmmu/cpus.c:1188
+ * #35 0x0000555555e17301 in qemu_thread_start (args=0x555556b4b4f0) at util/qemu-thread-posix.c:521
+ * #36 0x00007ffff4ed1ea5 in start_thread () at /lib64/libpthread.so.0
+ * #37 0x00007ffff4bfa8cd in clone () at /lib64/libc.so.6
+ */
 static void vhost_scsi_unrealize(DeviceState *dev)
 {
     VirtIODevice *vdev = VIRTIO_DEVICE(dev);
diff --git a/hw/virtio/virtio.c b/hw/virtio/virtio.c
index e9830252..2424f74f 100644
--- a/hw/virtio/virtio.c
+++ b/hw/virtio/virtio.c
@@ -80,7 +80,24 @@ typedef struct VRingMemoryRegionCaches {
 
 typedef struct VRing
 {
+    /*
+     * 在以下设置VRing->num:
+     *   - hw/virtio/virtio.c|2028| <<virtio_reset>> vdev->vq[i].vring.num = vdev->vq[i].vring.num_default;
+     *   - hw/virtio/virtio.c|2259| <<virtio_queue_set_num>> vdev->vq[n].vring.num = num;
+     *   - hw/virtio/virtio.c|2409| <<virtio_add_queue>> vdev->vq[i].vring.num = queue_size;
+     *   - hw/virtio/virtio.c|2422| <<virtio_delete_queue>> vq->vring.num = 0;
+     *   - hw/virtio/virtio.c|3062| <<virtio_load>> vdev->vq[i].vring.num = qemu_get_be32(f);
+     */
     unsigned int num;
+    /*
+     * 在以下设置VRing->num_default:
+     *   - hw/virtio/virtio.c|2715| <<global>> VMSTATE_UINT32(vring.num_default, struct VirtQueue),
+     *   - hw/virtio/virtio.c|2028| <<virtio_reset>> vdev->vq[i].vring.num = vdev->vq[i].vring.num_default;
+     *   - hw/virtio/virtio.c|2279| <<virtio_queue_get_max_num>> return vdev->vq[n].vring.num_default;
+     *   - hw/virtio/virtio.c|2410| <<virtio_add_queue>> vdev->vq[i].vring.num_default = queue_size;
+     *   - hw/virtio/virtio.c|2423| <<virtio_delete_queue>> vq->vring.num_default = 0;
+     *   - hw/virtio/virtio.c|2623| <<virtio_ringsize_needed>> if (vdev->vq[i].vring.num != vdev->vq[i].vring.num_default) {
+     */
     unsigned int num_default;
     unsigned int align;
     hwaddr desc;
diff --git a/linux-headers/linux/kvm.h b/linux-headers/linux/kvm.h
index a28c3667..0103387b 100644
--- a/linux-headers/linux/kvm.h
+++ b/linux-headers/linux/kvm.h
@@ -1484,6 +1484,10 @@ struct kvm_enc_region {
 
 /* Available with KVM_CAP_NESTED_STATE */
 #define KVM_GET_NESTED_STATE         _IOWR(KVMIO, 0xbe, struct kvm_nested_state)
+/*
+ * 在以下使用KVM_SET_NESTED_STATE:
+ *   - target/i386/kvm.c|3893| <<kvm_put_nested_state>> return kvm_vcpu_ioctl(CPU(cpu), KVM_SET_NESTED_STATE, env->nested_state);
+ */
 #define KVM_SET_NESTED_STATE         _IOW(KVMIO,  0xbf, struct kvm_nested_state)
 
 /* Available with KVM_CAP_MANUAL_DIRTY_LOG_PROTECT_2 */
diff --git a/qdev-monitor.c b/qdev-monitor.c
index e9b72284..c4b3920b 100644
--- a/qdev-monitor.c
+++ b/qdev-monitor.c
@@ -810,6 +810,11 @@ void qmp_device_add(QDict *qdict, QObject **ret_data, Error **errp)
     object_unref(OBJECT(dev));
 }
 
+/*
+ * called by:
+ *   - qdev-monitor.c|888| <<qmp_device_del>> DeviceState *dev = find_device_state(id, errp);
+ *   - qdev-monitor.c|922| <<blk_by_qdev_id>> dev = find_device_state(id, errp);
+ */
 static DeviceState *find_device_state(const char *id, Error **errp)
 {
     Object *obj;
@@ -839,6 +844,16 @@ static DeviceState *find_device_state(const char *id, Error **errp)
     return DEVICE(obj);
 }
 
+/*
+ * called by:
+ *   - hw/net/virtio-net.c|809| <<failover_add_primary>> qdev_unplug(n->primary_dev, &err);
+ *   - hw/s390x/s390-pci-bus.c|1028| <<s390_pcihost_unplug_request>> qdev_unplug(DEVICE(pbdev), errp);
+ *   - hw/s390x/s390-pci-bus.c|1039| <<s390_pcihost_unplug_request>> qdev_unplug(DEVICE(pbdev->pdev), errp);
+ *   - hw/vfio/pci.c|2646| <<vfio_req_notifier_handler>> qdev_unplug(DEVICE(vdev), &err);
+ *   - hw/xen/xen-legacy-backend.c|300| <<xen_be_get_xendev>> qdev_unplug(DEVICE(xendev), NULL);
+ *   - hw/xen/xen_pvdev.c|313| <<xen_pv_del_xendev>> qdev_unplug(&xendev->qdev, NULL);
+ *   - qdev-monitor.c|901| <<qmp_device_del>> qdev_unplug(dev, errp);
+ */
 void qdev_unplug(DeviceState *dev, Error **errp)
 {
     DeviceClass *dc = DEVICE_GET_CLASS(dev);
@@ -883,6 +898,10 @@ void qdev_unplug(DeviceState *dev, Error **errp)
     error_propagate(errp, local_err);
 }
 
+/*
+ * called by:
+ *   - qdev-monitor.c|918| <<hmp_device_del>> qmp_device_del(id, &err);
+ */
 void qmp_device_del(const char *id, Error **errp)
 {
     DeviceState *dev = find_device_state(id, errp);
diff --git a/qom/qom-qmp-cmds.c b/qom/qom-qmp-cmds.c
index 310ab2d0..41cee10a 100644
--- a/qom/qom-qmp-cmds.c
+++ b/qom/qom-qmp-cmds.c
@@ -74,10 +74,35 @@ void qmp_qom_set(const char *path, const char *property, QObject *value,
     object_property_set_qobject(obj, property, value, errp);
 }
 
+/*
+ * (gdb) bt
+ * #0  0x0000555555c88eeb in qmp_qom_get (path=0x555557086960 "/machine/peripheral/vscsi0", property=0x555556ee4720 "num_queues", errp=0x7fffffffcb60) at qom/qom-qmp-cmds.c:81
+ * #1  0x0000555555c8886f in hmp_qom_get (mon=0x555556a5d110, qdict=0x555557174c00) at qom/qom-hmp-cmds.c:78
+ * #2  0x0000555555c4fa3f in handle_hmp_command (mon=0x555556a5d110, cmdline=0x555556a806f8 "/machine/peripheral/vscsi0 num_queues") at monitor/hmp.c:1082
+ * #3  0x0000555555c4d2b0 in monitor_command_cb (opaque=0x555556a5d110, cmdline=0x555556a806f0 "qom-get /machine/peripheral/vscsi0 num_queues", readline_opaque=0x0) at monitor/hmp.c:47
+ * #4  0x0000555555e44890 in readline_handle_byte (rs=0x555556a806f0, ch=13) at util/readline.c:408
+ * #5  0x0000555555c50435 in monitor_read (opaque=0x555556a5d110, buf=0x7fffffffcd70 "\r", size=1) at monitor/hmp.c:1312
+ * #6  0x0000555555d8c31c in qemu_chr_be_write_impl (s=0x555556a53780, buf=0x7fffffffcd70 "\r", len=1) at chardev/char.c:188
+ * #7  0x0000555555d8c380 in qemu_chr_be_write (s=0x555556a53780, buf=0x7fffffffcd70 "\r", len=1) at chardev/char.c:200
+ * #8  0x0000555555d8eda2 in fd_chr_read (chan=0x555556a53840, cond=G_IO_IN, opaque=0x555556a53780) at chardev/char-fd.c:68
+ * #9  0x0000555555db2440 in qio_channel_fd_source_dispatch (source=0x555557245d40, callback=0x555555d8ec44 <fd_chr_read>, user_data=0x555556a53780) at io/channel-watch.c:84
+ * #10 0x00007ffff7521099 in g_main_context_dispatch () at /lib64/libglib-2.0.so.0
+ * #11 0x0000555555e30c4f in glib_pollfds_poll () at util/main-loop.c:217
+ * #12 0x0000555555e30cc9 in os_host_main_loop_wait (timeout=499000000) at util/main-loop.c:240
+ * #13 0x0000555555e30dce in main_loop_wait (nonblocking=0) at util/main-loop.c:516
+ * #14 0x000055555598a2e4 in qemu_main_loop () at /home/zhang/test/qemu-5.1.0/softmmu/vl.c:1676
+ * #15 0x0000555555db81b5 in main (argc=20, argv=0x7fffffffe018, envp=0x7fffffffe0c0) at /home/zhang/test/qemu-5.1.0/softmmu/main.c:49
+ *
+ * (qemu) qom-get /machine/peripheral/vscsi0 num_queues
+ * 1
+ */
 QObject *qmp_qom_get(const char *path, const char *property, Error **errp)
 {
     Object *obj;
 
+    /*
+     * obj可以是VHostSCSIPCI
+     */
     obj = object_resolve_path(path, NULL);
     if (!obj) {
         error_set(errp, ERROR_CLASS_DEVICE_NOT_FOUND,
diff --git a/target/i386/kvm.c b/target/i386/kvm.c
index 6f18d940..9cb4f6ef 100644
--- a/target/i386/kvm.c
+++ b/target/i386/kvm.c
@@ -1456,6 +1456,10 @@ static Error *invtsc_mig_blocker;
 
 #define KVM_MAX_CPUID_ENTRIES  100
 
+/*
+ * called by:
+ *   - accel/kvm/kvm-all.c|471| <<kvm_init_vcpu>> ret = kvm_arch_init_vcpu(cpu);
+ */
 int kvm_arch_init_vcpu(CPUState *cs)
 {
     struct {
@@ -3860,8 +3864,28 @@ static int kvm_get_debugregs(X86CPU *cpu)
     return 0;
 }
 
+/*
+ * (gdb) bt
+ * #0  0x00005574ae6012f6 in kvm_put_nested_state (cpu=0x5574b026d6f0) at /home/zhang/kvm/qemu-5.1.0/target/i386/kvm.c:3865
+ * #1  0x00005574ae60160a in kvm_arch_put_registers (cpu=0x5574b026d6f0, level=2) at /home/zhang/kvm/qemu-5.1.0/target/i386/kvm.c:3951
+ * #2  0x00005574ae480959 in do_kvm_cpu_synchronize_post_reset (cpu=0x5574b026d6f0, arg=...) at /home/zhang/kvm/qemu-5.1.0/accel/kvm/kvm-all.c:2344
+ * #3  0x00005574ae6171ae in process_queued_cpu_work (cpu=0x5574b026d6f0) at cpus-common.c:343
+ * #4  0x00005574ae565357 in qemu_wait_io_event_common (cpu=0x5574b026d6f0) at /home/zhang/kvm/qemu-5.1.0/softmmu/cpus.c:1117
+ * #5  0x00005574ae5654a2 in qemu_wait_io_event (cpu=0x5574b026d6f0) at /home/zhang/kvm/qemu-5.1.0/softmmu/cpus.c:1157
+ * #6  0x00005574ae5655c5 in qemu_kvm_cpu_thread_fn (arg=0x5574b026d6f0) at /home/zhang/kvm/qemu-5.1.0/softmmu/cpus.c:1193
+ * #7  0x00005574aea06301 in qemu_thread_start (args=0x5574b0294560) at util/qemu-thread-posix.c:521
+ * #8  0x00007f7255132ea5 in start_thread () at /lib64/libpthread.so.0
+ * #9  0x00007f7254e5b8cd in clone () at /lib64/libc.so.6
+ *
+ * called by:
+ *   - target/i386/kvm.c|3955| <<kvm_arch_put_registers>> ret = kvm_put_nested_state(x86_cpu);
+ */
 static int kvm_put_nested_state(X86CPU *cpu)
 {
+    /*
+     * CPUX86State:
+     *  -> struct kvm_nested_state *nested_state;
+     */
     CPUX86State *env = &cpu->env;
     int max_nested_state_len = kvm_max_nested_state_length();
 
@@ -3886,6 +3910,62 @@ static int kvm_put_nested_state(X86CPU *cpu)
     }
 
     assert(env->nested_state->size <= max_nested_state_len);
+    /*
+     * 没有nested的前提下到这里的数据.
+     * (gdb) p *env->nested_state
+     * $2 = {
+     *   flags = 0,
+     *   format = 0,
+     *   size = 128,
+     *   hdr = {
+     *     vmx = {
+     *       vmxon_pa = 18446744073709551615,
+     *       vmcs12_pa = 18446744073709551615,
+     *       smm = {
+     *         flags = 0
+     *       },
+     *       flags = 0,
+     *       preemption_timer_deadline = 0
+     *     },
+     *     svm = {
+     *       vmcb_pa = 18446744073709551615
+     *     },
+     *     pad = '\377' <repeats 16 times>, '\000' <repeats 103 times>
+     *   },
+     *   data = {
+     *     vmx = 0x7f718c002090,
+     *     svm = 0x7f718c002090
+     *   }
+     * }
+     *
+     *
+     * 在有nested的前提下.
+     * (gdb) p *env->nested_state
+     * $3 = {
+     *   flags = 0,
+     *   format = 0,
+     *   size = 128,
+     *   hdr = {
+     *     vmx = {
+     *       vmxon_pa = 2946011136, = 0xaf989000
+     *       vmcs12_pa = 18446744073709551615, = 0xffffffffffffffff
+     *       smm = {
+     *         flags = 0
+     *       },
+     *       flags = 0,
+     *       preemption_timer_deadline = 0
+     *     },
+     *     svm = {
+     *       vmcb_pa = 2946011136
+     *     },
+     *     pad = "\000\220\230\257\000\000\000\000\377\377\377\377\377\377\377\377", '\000' <repeats 103 times>
+     *   },
+     *   data = {
+     *     vmx = 0x7fefdc002090,
+     *     svm = 0x7fefdc002090
+     *   }
+     * }
+     */
     return kvm_vcpu_ioctl(CPU(cpu), KVM_SET_NESTED_STATE, env->nested_state);
 }
 
@@ -3934,6 +4014,12 @@ static int kvm_get_nested_state(X86CPU *cpu)
     return ret;
 }
 
+/*
+ * called by:
+ *   - accel/kvm/kvm-all.c|2348| <<do_kvm_cpu_synchronize_post_reset>> kvm_arch_put_registers(cpu, KVM_PUT_RESET_STATE);
+ *   - accel/kvm/kvm-all.c|2359| <<do_kvm_cpu_synchronize_post_init>> kvm_arch_put_registers(cpu, KVM_PUT_FULL_STATE);
+ *   - accel/kvm/kvm-all.c|2452| <<kvm_cpu_exec>> kvm_arch_put_registers(cpu, KVM_PUT_RUNTIME_STATE);
+ */
 int kvm_arch_put_registers(CPUState *cpu, int level)
 {
     X86CPU *x86_cpu = X86_CPU(cpu);
-- 
2.17.1

