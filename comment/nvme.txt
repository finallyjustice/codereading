一个nvme controller相当于scsi的HBA: namespace对应scsi的lun.

一个nvme controller的硬件队列其实就是一组ring buffer, 每组ring buffer是一个硬件队列. admin_queue的ring buffer信息在pci bar配置, io_queue的ring buffer信息通过admin_queue下发cmd配置.

软件中的tagset管理这些硬件队列. 其中io_queue一个tagset, admin_queue一个tagset.

io_queue的tagset可以有好多queue, admin_queue的只有一个.

blk_mq_init_queue()用来在一个已初始化的tagset上分配一个request_queue. 因为admin_queue只有一个request_queue, 所以在初始化的时候调用blk_mq_init_queue(). 而io_queue可能被多个namespace共享, 所以在分配namespace的时候调用blk_mq_init_queue().

一个namespace一个request一个gendisk. gendisk在nvme_alloc_ns()分配.

============================================

关于admin ring buffer和async event, nvme的admin queue的tagset有30个元素, 但是ring buffer有32个,除了一个用来表示full, 另外一个用在async event


每个nvme pci device (func) 是一个controller.
可能很多个controller输入同一个subsystem. 但是pci的入口都是从probe controller开始的.
subsystem的数据结构的分配是初始化每一个controller的时候on demand的.
如果两个controller属于同一个subsystem, 那初始化第二个controller的时候就不会再分配subsystem的结构了.
每一个nvme0或者nvme1都是一个controller.
