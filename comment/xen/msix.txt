nvme_reset_work()
 -> nvme_setup_io_queues()
     -> pci_alloc_irq_vectors()
     -> queue_request_irq(adminq)
     -> nvme_create_io_queues()
	 -> nvme_create_queue()
	     -> queue_request_irq(nvmeq)


pci_alloc_irq_vectors()
 -> __pci_enable_msix_range()
     -> __pci_enable_msix()
	 -> msix_capability_init()
	     -> pci_msi_setup_msi_irqs()
	         -> x86_msi.setup_msi_irqs = xen_initdom_setup_msi_irqs()
	             -> PHYSDEVOP_map_pirq
		         申请pirq (xen hypervisor申请对应的vector)
                         !!! 在这里xen hypervisor会把分配的cpu vector写入msix table
			 !!! dom0并不负责更新msix table的cpu vector
	             -> xen_bind_pirq_msi_to_irq()
	                 申请irq, 设置info_for_irq(irq)->u.pirq.pirq = pirq

-> request_irq()
    -> request_threaded_irq()
        -> __setup_irq()
            -> irq_startup()
	        -> irq_domain_activate_irq()
	            ----> 对xen dom0来说这里相当于不执行
	        -> desc->irq_data.chip->irq_startup = startup_pirq()
	            -> EVTCHNOP_bind_pirq
		        通过info_for_irq(irq)->u.pirq.pirq获取pirq
			用pirq使xen hypervisor分配一个evtchn
		    -> set_evtchn_to_irq(evtchn, irq)
	                绑定evtchn与irq


PHYSDEVOP_map_pirq在xen hypervisor会申请vector写入msix table对应的位置.
msix table的地址或者msix vector的index是dom0传入的.


-----------------------------------------------------

在arch/x86/x86_64/entry.S,
autogen_entrypoints生成vector table, 每一个vector指向一个处理函数
函数都差不多 (每个cpu支持256个vector):

先"movb  $vec,4(%rsp)", 再"jmp   common_interrupt"

在arch/x86/x86_64/entry.S:
392 ENTRY(common_interrupt)
393         SAVE_ALL CLAC
394         CR4_PV32_RESTORE
395         movq %rsp,%rdi
396         callq do_IRQ
397         jmp ret_from_intr

do_IRQ()如何把vector发送到guest?

1. 先通过vector查找percpu的vector_irq[vector]找到irq:
int irq = __get_cpu_var(vector_irq[vector]);

2. 再通过irq找到对应的struct irq_desc, x86下就是&irq_desc[irq]:
desc = irq_to_desc(irq);

3. 很可能desc->status & IRQ_GUEST是true, 就要调用__do_IRQ_guest(irq)了

4. 如果是dom0, 调用send_guest_pirq()往dom0插入event


重要的函数或者数据结构:

- vector_irq[vector]: 把cpu的vector转换成irq, 索引&irq_desc[irq]
- domain_irq_to_pirq(d, irq)负责将xen的irq转换成某个domain d的pirq
- pirq_info(d, pirq)负责将某个domain d的pirq转换成'struct pirq'

struct pirq {
    int pirq;
    u16 evtchn;
    bool_t masked;
    struct rcu_head rcu_head;
    struct arch_pirq arch;
};

dom0 linux的核心函数是__startup_pirq()

xen有自己的irq, linux有自己的irq, pirq是domain相关的, linux和xen都认识
