有好多struct page_info [] 是一个数组:

page_info[0]
page_info[1]
... ...
... ...
page_info[N]

连续的page_info[i]在物理地址上也是连续的.
不同组的page_info[i]属于不同的order,我们用每组的第一个page_info表示
这组page的头.如果把头链接入了某个链表,说明整组的page_info都在某个链
表中了(其实就第一个page_info在,后面的可以用page_info[i+x]推出).

每个((*_heap[node])[zone][order])是一个struct page_list_head链表.
正如上面说的,每组page_info的第一个被放入这个链表,
表明这组page_info属于这个order.

分配的时候尽量从所要求的最小的order分配.如果不够就从大的order分配,
然后把分配了但实际不用的切割,放入小的order.

回收的时候会和前后的邻居尝试merge成更大的order.

----------------------------------

populate_physmap()用来为虚拟机分配内存, 最终会调用以下来分配一段order的内存:

page = alloc_domheap_pages(d, a->extent_order, a->memflags);

然后会assign给domain:

assign_pages(d, pg, order, memflags)

assign_pages()会把每一个pg[i]放入链表:

page_set_owner(&pg[i], d);
pg[i].count_info = PGC_allocated | 1;
page_list_add_tail(&pg[i], &d->page_list);

所以d->page_list上放的是一个一个的page,而不是一组一组的page!
