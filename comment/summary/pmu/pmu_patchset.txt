Intel有2类PMU, 一类是non-architectural的, 不能用cpuid查看, 只能用https://perfmon-events.intel.com.

一类是architectual的, 是每个Intel CPU都有的, 可以用CPUID.0AH查询.

VERSION 1:

IA32_PERFEVTSELx是selector (186H)
IA32_PMCx是counter (起始地址0C1H)


VERSION 2:

添加了3个Fixed Counter. 只能用指定的event.
这3个Fixed Counter没有对应的selector寄存器, 因为用一个IA32_FIXED_CTR_CTRL就可以了

还添加了3个global寄存器, 可以同时管理所有的GP/Fixed.

- IA32_PERF_GLOBAL_CTRL     -> enable/disable, 用一次WRMSR就可以了!
- IA32_PERF_GLOBAL_STATUS   -> query overflow status, 用一次RDMSR就知道所有的!
- IA32_PERF_GLOBAL_OVF_CTRL -> clear overflow, 用一个wrmsr就可以了 (以前要好多个)


VERSION 4:

又有了新的global寄存器.

1. IA32_PERF_GLOBAL_OVF_CTRL被改成了IA32_PERF_GLOBAL_STATUS_RESET

2. 以前不能修改overflow status, 现在添加了IA32_PERF_GLOBAL_STATUS_SET能修改overflow status
这样就可以随便设置, 为VM模拟overflow了, 想overflow更容易了

3. 增加了 IA32_PERF_GLOBAL_INUSE (可以同时服务GP和FIXED) 

==============

寄存器的共享.

#define MSR_CORE_PERF_GLOBAL_STATUS     0x38e
#define MSR_CORE_PERF_GLOBAL_CTRL       0x38f
#define MSR_CORE_PERF_GLOBAL_OVF_CTRL   0x390

 638 int kvm_pmu_get_msr(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 639 {
 640         struct kvm_pmu *pmu = vcpu_to_pmu(vcpu);
 641         u32 msr = msr_info->index;
 642
 643         switch (msr) {
 644         case MSR_CORE_PERF_GLOBAL_STATUS:
 645         case MSR_AMD64_PERF_CNTR_GLOBAL_STATUS:
 646                 msr_info->data = pmu->global_status;
 647                 break;
 648         case MSR_AMD64_PERF_CNTR_GLOBAL_CTL:
 649         case MSR_CORE_PERF_GLOBAL_CTRL:
 650                 msr_info->data = pmu->global_ctrl;
 651                 break;
 652         case MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR:
 653         case MSR_CORE_PERF_GLOBAL_OVF_CTRL:
 654                 msr_info->data = 0;
 655                 break;
 656         default:
 657                 return static_call(kvm_x86_pmu_get_msr)(vcpu, msr_info);
 658         }
 659
 660         return 0;
 661 }


#define MSR_CORE_PERF_GLOBAL_STATUS     0x0000038e
#define MSR_CORE_PERF_GLOBAL_CTRL       0x0000038f
#define MSR_CORE_PERF_GLOBAL_OVF_CTRL   0x00000390

#define MSR_AMD64_PERF_CNTR_GLOBAL_STATUS       0xc0000300
#define MSR_AMD64_PERF_CNTR_GLOBAL_CTL          0xc0000301
#define MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR   0xc0000302


uint64_t msr_global_ctrl;
uint64_t msr_global_status;
uint64_t msr_global_ovf_ctrl;

==============

定义一个host_vendor=AMD or Intel.

1. 如果host和VM的vendor不一样, 直接禁止pmu!

2. 如果host是AMD, (vendor也是AMD) ...

(1) 查看global的支持
(2) cpuid + X86_FEATURE_PERFCTR_CORE
(3) 默认4个


3. 如果host是Intel

完全是通过cpuid

------------------------

在Intel的host上写Intel的PMU MSR.

因为虚拟化是vmx, 有这些寄存器, 除非被disable了, 否则就可以使用.

------------------------

在AMD的host上写AMD的PMU MSR.

因为虚拟化是svm, 有这些寄存器, 除非被disable了, 否则就可以使用.

------------------------

在Intel的host上写AMD的PMU MSR.

因为虚拟化是vmx, 没有这些寄存器, 识别不了.

------------------------

在AMD的host上写Intel的PMU MSR.

因为虚拟化是svm, 没有这些寄存器, 识别不了.

------------------------

1. 只要是想在Intel host上用AMD的PMU就不行!

2. 在Intel host的其他case上, 看cpuid的配置(pmu=0 or pmu=1)!

一般来说, pmu=1会体现在cpuid

3. 只要是想在AMD host上用Intel的PMU就不行!

4. 如果是AMD host的其他case上, 看cpuid的配置.

(1) 如果cpuid上支持6个寄存器, 就是6个
(2) 否则就是4个寄存器

------------------------

1. 在Intel的host上:

(1) CPU=Intel, Vendor=Intel

VM试图probe Intel的PMU, cpuid也支持, 可以用!

(2) CPU=Intel, Vendor=AMD

VM试图probe AMD的PMU, 但是基本的MSR都不支持, 不可用!

(3) CPU=AMD, Vendor=Intel

VM试图probe Intel的PMU, 就看cpuid是否支持了pmu=0 or pmu=1

(4) CPU=AMD, Vendor=AMD

2. 在AMD的host上,除非指定Intel的vendor,否则PMU总是可用的(排除enable_pmu)

(1) CPU=AMD, Vendor=AMD
(2) CPU=AMD, Vendor=Intel
(3) CPU=Intel, Vendor=AMD
(4) CPU=Intel, Vendor=Intel
