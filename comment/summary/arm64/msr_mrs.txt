


1130 /*
1131  * Unlike read_cpuid, calls to read_sysreg are never expected to be
1132  * optimized away or replaced with synthetic values.
1133  */
1134 #define read_sysreg(r) ({                                       \
1135         u64 __val;                                              \
1136         asm volatile("mrs %0, " __stringify(r) : "=r" (__val)); \
1137         __val;                                                  \
1138 })
1139

读用的是MRS:
Move System Register to general-purpose register allows the PE to read an
AArch64 System register into a general-purpose register.


1140 /*
1141  * The "Z" constraint normally means a zero immediate, but when combined with
1142  * the "%x0" template means XZR.
1143  */
1144 #define write_sysreg(v, r) do {                                 \
1145         u64 __val = (u64)(v);                                   \
1146         asm volatile("msr " __stringify(r) ", %x0"              \
1147                      : : "rZ" (__val));                         \
1148 } while (0)

写用的是MSR:
Move general-purpose register to System Register allows the PE to write an
AArch64 System register from a general-purpose register.
