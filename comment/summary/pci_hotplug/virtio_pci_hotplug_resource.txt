在pci-bridge添加一个virtio设备的过程: 基于linux-6.10

一共会有下面的log.

[   24.951498] pci 0000:01:00.0: [1af4:1004] type 00 class 0x010000 conventional PCI endpoint
[   24.954179] pci 0000:01:00.0: BAR 0 [io  0x0000-0x003f]
[   24.954881] pci 0000:01:00.0: BAR 1 [mem 0x00000000-0x00000fff]
[   24.955810] pci 0000:01:00.0: BAR 4 [mem 0x00000000-0x00003fff 64bit pref]
[   24.976733] pci 0000:01:00.0: BAR 4 [mem 0x800100000-0x800103fff 64bit pref]: assigned
[   24.978331] pci 0000:01:00.0: BAR 1 [mem 0xc1000000-0xc1000fff]: assigned
[   24.979766] pci 0000:01:00.0: BAR 0 [io  0x2000-0x203f]: assigned
[   25.000982] virtio-pci 0000:01:00.0: enabling device (0000 -> 0003)

=======================

[0] pci_setup_device
[0] pci_scan_single_device
[0] pci_scan_slot
[0] acpiphp_hotplug_notify
[0] acpi_device_hotplug
[0] acpi_hotplug_work_fn
[0] process_one_work
[0] worker_thread
[0] kthread
[0] ret_from_fork
[0] ret_from_fork_asm

1899 int pci_setup_device(struct pci_dev *dev)
1900 {
... ...
1931         dev_set_name(&dev->dev, "%04x:%02x:%02x.%d", pci_domain_nr(dev->bus),
1932                      dev->bus->number, PCI_SLOT(dev->devfn),
1933                      PCI_FUNC(dev->devfn));
... ...
1959         pci_info(dev, "[%04x:%04x] type %02x class %#08x %s\n",
1960                  dev->vendor, dev->device, dev->hdr_type, dev->class,
1961                  pci_type_str(dev));

pci_setup_device()打印下面的log.

[   24.951498] pci 0000:01:00.0: [1af4:1004] type 00 class 0x010000 conventional PCI endpoint

-----------------

pci_setup_device()

1911 int pci_setup_device(struct pci_dev *dev)
1912 {
... ..
1990         switch (dev->hdr_type) {                    /* header type */
1991         case PCI_HEADER_TYPE_NORMAL:                /* standard header */
1992                 if (class == PCI_CLASS_BRIDGE_PCI)
1993                         goto bad;
1994                 pci_read_irq(dev);
1995                 pci_read_bases(dev, 6, PCI_ROM_ADDRESS)

 182 int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 183                     struct resource *res, unsigned int pos)
 184 {
... ...
 320 out:
 321         if (res->flags)
 322                 pci_info(dev, "%s %pR\n", res_name, res);
 323 
 324         return (res->flags & IORESOURCE_MEM_64) ? 1 : 0;
 325 }

之后, pci_setup_device()通过__pci_read_base()打印下面的log.

[   24.954179] pci 0000:01:00.0: BAR 0 [io  0x0000-0x003f]
[   24.954881] pci 0000:01:00.0: BAR 1 [mem 0x00000000-0x00000fff]
[   24.955810] pci 0000:01:00.0: BAR 4 [mem 0x00000000-0x00003fff 64bit pref]

====================

[0] assign_requested_resources_sorted
[0] __assign_resources_sorted
[0] __pci_bus_assign_resources
[0] enable_slot
[0] acpiphp_check_bridge.part.0
[0] acpiphp_hotplug_notify
[0] acpi_device_hotplug
[0] acpi_hotplug_work_fn
[0] process_one_work                                 
[0] worker_thread
[0] kthread  
[0] ret_from_fork
[0] ret_from_fork_asm

enable_slot()
-> __pci_bus_assign_resources()
   -> pbus_assign_resources_sorted()
      -> __assign_resources_sorted()
         -> assign_requested_resources_sorted()
            -> pci_assign_resource()

342 int pci_assign_resource(struct pci_dev *dev, int resno)
343 {
... ...
380         pci_info(dev, "%s %pR: assigned\n", res_name, res);
381         if (resno < PCI_BRIDGE_RESOURCES)
382                 pci_update_resource(dev, resno);
383 
384         return 0;
385 }
386 EXPORT_SYMBOL(pci_assign_resource);

真正的资源的log通过pci_assign_resource()打印.

[   24.976733] pci 0000:01:00.0: BAR 4 [mem 0x800100000-0x800103fff 64bit pref]: assigned
[   24.978331] pci 0000:01:00.0: BAR 1 [mem 0xc1000000-0xc1000fff]: assigned
[   24.979766] pci 0000:01:00.0: BAR 0 [io  0x2000-0x203f]: assigned


资源的结构.

struct resource {
	resource_size_t start;
	resource_size_t end;
	const char *name;
	unsigned long flags;
	unsigned long desc;
	struct resource *parent, *sibling, *child;
};

分别在每次pci_assign_resource()的开始和结束打印res->start和res->end, 能看到变化.

[   24.820309] debug: pci_assign_resource() start resno=4 (0x0000000000000000, 0x0000000000003fff)
[   24.821338] pci 0000:01:00.0: BAR 4 [mem 0x800100000-0x800103fff 64bit pref]: assigned
[   24.822395] debug: pci_assign_resource() end!!! resno=4 (4 0x0000000800100000, 0x0000000800103fff)

[   24.823407] debug: pci_assign_resource() start resno=1 (0x0000000000000000, 0x0000000000000fff)
[   24.824464] pci 0000:01:00.0: BAR 1 [mem 0xc1000000-0xc1000fff]: assigned
[   24.825343] debug: pci_assign_resource() end resno=1 (0x00000000c1000000, 0x00000000c1000fff)

[   24.826382] debug: pci_assign_resource() start resno=0 (0x0000000000000000, 0x000000000000003f)
[   24.827408] pci 0000:01:00.0: BAR 0 [io  0x2000-0x203f]: assigned
[   24.828197] debug: pci_assign_resource() end resno=0 (0x0000000000002000, 0x000000000000203f)

-----------------

[0] pci_enable_resources
[0] pcibios_enable_device
[0] do_pci_enable_device
[0] pci_enable_device_flags
[0] virtio_pci_probe
[0] local_pci_probe
[0] pci_device_probe
[0] really_probe
[0] __driver_probe_device 
[0] driver_probe_device
[0] __device_attach_driver
[0] bus_for_each_drv
[0] __device_attach
[0] pci_bus_add_device
[0] pci_bus_add_devices
[0] enable_slot
[0] acpiphp_check_bridge.part.0
[0] acpiphp_hotplug_notify
[0] acpi_device_hotplug
[0] acpi_hotplug_work_fn
[0] process_one_work
[0] worker_thread
[0] kthread
[0] ret_from_fork
[0] ret_from_fork_asm


547 int pci_enable_resources(struct pci_dev *dev, int mask)
548 {
.. ...
587         if (cmd != old_cmd) {
588                 pci_info(dev, "enabling device (%04x -> %04x)\n", old_cmd, cmd);
589                 pci_write_config_word(dev, PCI_COMMAND, cmd);
590         }
591         return 0;
592 }

[   25.000982] virtio-pci 0000:01:00.0: enabling device (0000 -> 0003)

====================


