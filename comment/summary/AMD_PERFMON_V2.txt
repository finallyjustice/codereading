关于PERFMON_V2.

这是在patch set中Like Xu的总结.

Starting with Zen4, core PMU on AMD platforms such as Genoa and
Ryzen-7000 will support PerfMonV2, and it is also compatible with
legacy PERFCTR_CORE behavior and msr addresses.

If you don't have access to the hardware specification, the commits
d6d0c7f681fd..7685665c390d for host perf can also bring a quick
overview. Its main change is the addition of three msr's equivalent
to Intel V2, namely global_ctrl, global_status, global_status_clear.

It is worth noting that this feature is very attractive for reducing the
overhead of PMU virtualization, since multiple msr accesses to multiple
counters will be replaced by a single access to the global register,
plus more accuracy gain when multiple guest counters are used.

All related testcases are passed on a Genoa box.
Please feel free to run more tests, add more or share comments.

---------------

下面是用cpuid在旧的和新的CPU上的结果.

OLD# cpuid -1 -l 0x80000022
CPU:
   Extended Performance Monitoring and Debugging (0x80000022):
      AMD performance monitoring V2         = false
      AMD LBR V2                            = false
      AMD LBR stack & PMC freezing          = false
      number of core perf ctrs              = 0x0 (0)
      number of LBR stack entries           = 0x0 (0)
      number of avail Northbridge perf ctrs = 0x0 (0)
      number of available UMC PMCs          = 0x0 (0)
      active UMCs bitmask                   = 0x0

OLD# cpuid -1 -l 0x80000001
CPU:
   0x80000001 0x00: eax=0x00800f12 ebx=0x40000000 ecx=0x35c233ff edx=0x2fd3fbff


   AMD feature flags (0x80000001/ecx):
      LAHF/SAHF supported in 64-bit mode     = true
      CMP Legacy                             = true
      SVM: secure virtual machine            = true
      extended APIC space                    = true
      AltMovCr8                              = true
      LZCNT advanced bit manipulation        = true
      SSE4A support                          = true
      misaligned SSE mode                    = true
      3DNow! PREFETCH/PREFETCHW instructions = true
      OS visible workaround                  = true
      instruction based sampling             = false
      XOP support                            = false
      SKINIT/STGI support                    = true
      watchdog timer support                 = true
      lightweight profiling support          = false
      4-operand FMA instruction              = false
      TCE: translation cache extension       = true
      NodeId MSR C001100C                    = false
      TBM support                            = false
      topology extensions                    = true
      core performance counter extensions    = true
      NB/DF performance counter extensions   = true
      data breakpoint extension              = true
      performance time-stamp counter support = false
      LLC performance counter extensions     = true
      MWAITX/MONITORX supported              = true
      Address mask extension support         = false


NEW# cpuid -1 -l 0x80000022
CPU:
   Extended Performance Monitoring and Debugging (0x80000022):
      AMD performance monitoring V2         = true
      AMD LBR V2                            = true
      AMD LBR stack & PMC freezing          = false
      number of core perf ctrs              = 0x6 (6)
      number of LBR stack entries           = 0x10 (16)
      number of avail Northbridge perf ctrs = 0x10 (16)
      number of available UMC PMCs          = 0x30 (48)
      active UMCs bitmask                   = 0xfff

NEW# cpuid -1 -l 0x80000001
CPU:
   0x80000001 0x00: eax=0x00a10f11 ebx=0x40000000 ecx=0x75c237ff edx=0x2fd3fbff


   AMD feature flags (0x80000001/ecx):
      LAHF/SAHF supported in 64-bit mode     = true
      CMP Legacy                             = true
      SVM: secure virtual machine            = true
      extended APIC space                    = true
      AltMovCr8                              = true
      LZCNT advanced bit manipulation        = true
      SSE4A support                          = true
      misaligned SSE mode                    = true
      3DNow! PREFETCH/PREFETCHW instructions = true
      OS visible workaround                  = true
      instruction based sampling             = true
      XOP support                            = false
      SKINIT/STGI support                    = true
      watchdog timer support                 = true
      lightweight profiling support          = false
      4-operand FMA instruction              = false
      TCE: translation cache extension       = true
      NodeId MSR C001100C                    = false
      TBM support                            = false
      topology extensions                    = true
      core performance counter extensions    = true
      NB/DF performance counter extensions   = true
      data breakpoint extension              = true
      performance time-stamp counter support = false
      LLC performance counter extensions     = true
      MWAITX/MONITORX supported              = true
      Address mask extension support         = true



关于"core performance counter extensions":

112 
113 160 /* More extended AMD flags: CPUID level 0x80000001, ECX, word 6 */
114 ... ...
115 181 #define X86_FEATURE_PERFCTR_CORE        ( 6*32+23) /* Core performance counter extensions */

---------------

下面是一些内核中的代码

680 /* AMD Performance Counter Global Status and Control MSRs */
681 #define MSR_AMD64_PERF_CNTR_GLOBAL_STATUS       0xc0000300
682 #define MSR_AMD64_PERF_CNTR_GLOBAL_CTL          0xc0000301
683 #define MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR   0xc0000302

714 #define MSR_F15H_PERF_CTL               0xc0010200
715 #define MSR_F15H_PERF_CTL0              MSR_F15H_PERF_CTL
716 #define MSR_F15H_PERF_CTL1              (MSR_F15H_PERF_CTL + 2)
717 #define MSR_F15H_PERF_CTL2              (MSR_F15H_PERF_CTL + 4)
718 #define MSR_F15H_PERF_CTL3              (MSR_F15H_PERF_CTL + 6)
719 #define MSR_F15H_PERF_CTL4              (MSR_F15H_PERF_CTL + 8)
720 #define MSR_F15H_PERF_CTL5              (MSR_F15H_PERF_CTL + 10)
721 
722 #define MSR_F15H_PERF_CTR               0xc0010201
723 #define MSR_F15H_PERF_CTR0              MSR_F15H_PERF_CTR
724 #define MSR_F15H_PERF_CTR1              (MSR_F15H_PERF_CTR + 2)
725 #define MSR_F15H_PERF_CTR2              (MSR_F15H_PERF_CTR + 4)
726 #define MSR_F15H_PERF_CTR3              (MSR_F15H_PERF_CTR + 6)
727 #define MSR_F15H_PERF_CTR4              (MSR_F15H_PERF_CTR + 8)
728 #define MSR_F15H_PERF_CTR5              (MSR_F15H_PERF_CTR + 10)

768 #define MSR_K7_EVNTSEL0                 0xc0010000
769 #define MSR_K7_PERFCTR0                 0xc0010004
770 #define MSR_K7_EVNTSEL1                 0xc0010001
771 #define MSR_K7_PERFCTR1                 0xc0010005
772 #define MSR_K7_EVNTSEL2                 0xc0010002
773 #define MSR_K7_PERFCTR2                 0xc0010006
774 #define MSR_K7_EVNTSEL3                 0xc0010003
775 #define MSR_K7_PERFCTR3                 0xc0010007

104 static bool amd_is_valid_msr(struct kvm_vcpu *vcpu, u32 msr)
105 {
106         struct kvm_pmu *pmu = vcpu_to_pmu(vcpu);
107 
108         switch (msr) {
109         case MSR_K7_EVNTSEL0 ... MSR_K7_PERFCTR3:
110                 return pmu->version > 0;
111         case MSR_F15H_PERF_CTL0 ... MSR_F15H_PERF_CTR5:
112                 return guest_cpuid_has(vcpu, X86_FEATURE_PERFCTR_CORE);
113         case MSR_AMD64_PERF_CNTR_GLOBAL_STATUS:
114         case MSR_AMD64_PERF_CNTR_GLOBAL_CTL:
115         case MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR:
116                 return pmu->version > 1;
117         default:
118                 if (msr > MSR_F15H_PERF_CTR5 &&
119                     msr < MSR_F15H_PERF_CTL0 + 2 * pmu->nr_arch_gp_counters)
120                         return pmu->version > 1;
121                 break;
122         }
123 
124         return amd_msr_idx_to_pmc(vcpu, msr);
125 }


176 static void amd_pmu_refresh(struct kvm_vcpu *vcpu)
177 {
178         struct kvm_pmu *pmu = vcpu_to_pmu(vcpu);
179         union cpuid_0x80000022_ebx ebx;
180
181         pmu->version = 1;
182         if (guest_cpuid_has(vcpu, X86_FEATURE_PERFMON_V2)) {
183                 pmu->version = 2;
184                 /*
185                  * Note, PERFMON_V2 is also in 0x80000022.0x0, i.e. the guest
186                  * CPUID entry is guaranteed to be non-NULL.
187                  */
188                 BUILD_BUG_ON(x86_feature_cpuid(X86_FEATURE_PERFMON_V2).function != 0x80000022 ||
189                              x86_feature_cpuid(X86_FEATURE_PERFMON_V2).index);
190                 ebx.full = kvm_find_cpuid_entry_index(vcpu, 0x80000022, 0)->ebx;
191                 pmu->nr_arch_gp_counters = ebx.split.num_core_pmc;
192         } else if (guest_cpuid_has(vcpu, X86_FEATURE_PERFCTR_CORE)) {
193                 pmu->nr_arch_gp_counters = AMD64_NUM_COUNTERS_CORE;
194         } else {
195                 pmu->nr_arch_gp_counters = AMD64_NUM_COUNTERS;
196         }

---------------

根据上面的代码,

添加AMD PerfMonV2的虚拟化.

主要支持下面3个global寄存器.

- MSR_AMD64_PERF_CNTR_GLOBAL_STATUS
- MSR_AMD64_PERF_CNTR_GLOBAL_CTL
- MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR

此外, 还支持4/6之外的gp寄存器数目.

1. 查看cpuid是否支持X86_FEATURE_PERFMON_V2.
   如果支持, 根据0x80000022获取寄存器的数目.
   此外, 3个global的也支持!
   寄存器的base address和MSR_F15H_PERF_CTR5的一样(KVM svm其实限制了最多6个)

2. 如果不是ver=2, 如果支持X86_FEATURE_PERFCTR_CORE,
   就是6个寄存器

3. 默认只支持4个


其实手册上列出了4个global寄存器, 但是不知道什么原因现在linux只使用3个.

MSR Address          MSR Name            Functional Group                Cross-Reference

C000_0300h     PerfCntrGlobalStatus        Performance      "Core Performance Counter Status Registers" on page 415
C000_0301h     PerfCntrGobalCtl            Performance      "Core Performance Global Control Register" on page 415
C000_0302h     PerfCntrGlobalStatusClr     Performance      "Performance Counter Global Status Clear Register" on page 418
C000_0303h     PerfCntrGlobalStatusSet     Performance      "Performance Counter Global Status Set Register" on page 417

在以后的patch里也许会多添加一个.

[RFC PATCH v3 04/58] x86/msr: Define PerfCntrGlobalStatusSet register
https://lore.kernel.org/all/20240801045907.4010984-5-mizhang@google.com/

diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index e022e6eb766c..b9f8744b47e5 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -681,6 +681,7 @@
 #define MSR_AMD64_PERF_CNTR_GLOBAL_STATUS	0xc0000300
 #define MSR_AMD64_PERF_CNTR_GLOBAL_CTL		0xc0000301
 #define MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_CLR	0xc0000302
+#define MSR_AMD64_PERF_CNTR_GLOBAL_STATUS_SET	0xc0000303
 
 /* AMD Last Branch Record MSRs */
 #define MSR_AMD64_LBR_SELECT			0xc000010e
