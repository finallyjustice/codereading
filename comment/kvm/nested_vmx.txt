有一个结构是struct vmcs.

struct vmcs {
    struct vmcs_hdr hdr;
    u32 abort;
    char data[0];
};

在alloc_vmcs_cpu()分配的时候是:

pages = __alloc_pages_node(node, GFP_KERNEL, vmcs_config.order);


loaded_vmcs points to the VMCS currently used in this vcpu. For a
non-nested (L1) guest, it always points to vmcs01. For a nested
guest (L2), it points to a different VMCS.  loaded_cpu_state points
to the VMCS whose state is loaded into the CPU registers that only
need to be switched when transitioning to/from the kernel; a NULL
value indicates that host state is loaded.

struct vcpu_vmx:
 -> struct kvm_vcpu vcpu;
 -> u8 fail;
 -> struct loaded_vmcs vmcs01;
     -> struct vmcs *vmcs;
     -> struct vmcs *shadow_vmcs;
     -> int cpu;
 -> struct loaded_vmcs *loaded_vmcs;
 -> struct loaded_vmcs *loaded_cpu_state;
 -> u32 exit_reason;
 -> struct nested_vmx nested;
     -> struct vmcs12 *cached_vmcs12;
     -> struct vmcs12 *cached_shadow_vmcs12;
     -> struct loaded_vmcs vmcs02;
         -> struct vmcs *vmcs;
         -> struct vmcs *shadow_vmcs;
         -> int cpu;

----------------------------------------

prepare_vmcs02 is called when the L1 guest hypervisor runs its nested
L2 guest. L1 has a vmcs for L2 (vmcs12), and this function "merges" it
with L0's requirements for its guest (a.k.a. vmcs01), so we can run the L2
guest in a way that will both be appropriate to L1's requests, and our
needs. In addition to modifying the active vmcs (which is vmcs02), this
function also has additional necessary side-effects, like setting various
vcpu->arch fields.

假设是L1中要vmresume.

1. 为从L0进入L2做准备.

handle_vmresume()
 -> nested_vmx_run(vcpu, false);

copy_shadow_to_vmcs12(vmx)会把vmx->vmcs01.shadow_vmcs(类型vmcs)的数据同
步到vmx->nested.cached_vmcs12(类型vmcs12) 这里的shadow vmcs是L1中用来支
持L2的vmcs.

Copy the writable VMCS shadow fields back to the VMCS12, in case
they have been modified by the L1 guest. Note that the "read-only"
VM-exit information fields are actually writable if the vCPU is
configured to support "VMWRITE to any supported field in the VMCS."


enter_vmx_non_root_mode()
-> enter_guest_mode(vcpu) --> 为vcpu->arch.hflags设置HF_GUEST_MASK
-> vmx_switch_vmcs(vcpu, &vmx->nested.vmcs02); --> 把vmx->loaded_vmcs设置成参数的vmx->nested.vmcs02
-> prepare_vmcs02()

prepare_vmcs02 is called when the L1 guest hypervisor runs its nested
L2 guest. L1 has a vmcs for L2 (vmcs12), and this function "merges" it
with L0's requirements for its guest (a.k.a. vmcs01), so we can run the L2
guest in a way that will both be appropriate to L1's requests, and our
needs. In addition to modifying the active vmcs (which is vmcs02), this
function also has additional necessary side-effects, like setting various
vcpu->arch fields.


2. 从L0进入L2.

vmx_vcpu_run()
 -> copy_vmcs12_to_shadow() --> 把vmx->nested.cached_vmcs12(类型vmcs12)给
                                同步到vmx->vmcs01.shadow_vmcs(类型vmcs)
                                这里为了在L1修改针对L2的vmcs时不用trap到L0了
 -> vmx->__launched = vmx->loaded_vmcs->launched;
 -> 进入guest mode (直接vmcs02的L2)
