#define KVM_IRQCHIP_PIC_MASTER   0
#define KVM_IRQCHIP_PIC_SLAVE    1
#define KVM_IRQCHIP_IOAPIC       2
#define KVM_NR_IRQCHIPS          3

/* gsi routing entry types */
#define KVM_IRQ_ROUTING_IRQCHIP 1
#define KVM_IRQ_ROUTING_MSI 2
#define KVM_IRQ_ROUTING_S390_ADAPTER 3
#define KVM_IRQ_ROUTING_HV_SINT 4


KVM_SET_GSI_ROUTING->kvm_set_irq_routing()向kvm注册irq的结构.

struct kvm_irq_routing_entry {
	__u32 gsi;
	__u32 type;
	__u32 flags;
	__u32 pad;
	union {
		struct kvm_irq_routing_irqchip irqchip;
		struct kvm_irq_routing_msi msi;
		struct kvm_irq_routing_s390_adapter adapter;
		struct kvm_irq_routing_hv_sint hv_sint;
		__u32 pad[8];
	} u;
};

struct kvm_irq_routing {
	__u32 nr;
	__u32 flags;
	struct kvm_irq_routing_entry entries[0];
};

---------------------------------

在内核中会在kvm->irq_routing管理所有的routing entry.

struct kvm_irq_routing_table {
	int chip[KVM_NR_IRQCHIPS][KVM_IRQCHIP_NUM_PINS];
	u32 nr_rt_entries;
	/*
	 * Array indexed by gsi. Each entry contains list of irq chips
	 * the gsi is connected to.
	 */
	struct hlist_head map[];
};

这是routing entry.

struct kvm_kernel_irq_routing_entry {
	u32 gsi;
	u32 type;
	int (*set)(struct kvm_kernel_irq_routing_entry *e,
		   struct kvm *kvm, int irq_source_id, int level,
		   bool line_status);
	union {
		struct {
			unsigned irqchip;
			unsigned pin;
		} irqchip;
		struct {
			u32 address_lo;
			u32 address_hi;
			u32 data;
			u32 flags;
			u32 devid;
		} msi;
		struct kvm_s390_adapter_int adapter;
		struct kvm_hv_sint hv_sint;
	};
	struct hlist_node link;
};


这是kvm->irq_routing的例子.

struct kvm_irq_routing_table {
  chip = {{0, 1, -1, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1}, {-1, 1, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}},
  nr_rt_entries = 31,
  map = 0xffff934edaadf528
}

这是一个routing entry的例子.

crash> kvm_kernel_irq_routing_entry ffff934ed5a61680
struct kvm_kernel_irq_routing_entry {
  gsi = 28,
  type = 2,
  set = 0xffffffffc096a860 <kvm_set_msi>,
  {
    irqchip = {
      irqchip = 4276101120,
      pin = 0
    },
    msi = {
      address_lo = 4276101120,
      address_hi = 0,
      data = 16418,
      flags = 0,
      devid = 0
    },
    adapter = {
      ind_addr = 4276101120,
      summary_addr = 16418,
      ind_offset = 0,
      summary_offset = 0,
      adapter_id = 0
    },
    hv_sint = {
      vcpu = 4276101120,
      sint = 0
    }
  },
  link = {
    next = 0x0,
    pprev = 0xffff934edaadf608
  }
}

-----------------------------------

有些中断是可以通过eventfd插入的.

kvm_vm_ioctl(KVM_IRQFD)通过kvm_irqfd()绑定或者解除eventfd.

所有的irqfd都在kvm->irqfds.items中.

crash> kvm_kernel_irqfd ffff934fb0fc2400
struct kvm_kernel_irqfd {
  kvm = 0xffffbb1381c05000,
  wait = {
    flags = 0,
    private = 0x0,
    func = 0xffffffffc0927bc0 <irqfd_wakeup>,
    entry = {
      next = 0xffff934e10a6a290,
      prev = 0xffff934e10a6a290
    }
  },
  irq_entry = {
    gsi = 28,
    type = 2,
    set = 0xffffffffc096a860 <kvm_set_msi>,
    {
      irqchip = {
        irqchip = 4276101120,
        pin = 0
      },
      msi = {
        address_lo = 4276101120,
        address_hi = 0,
        data = 16418,
        flags = 0,
        devid = 0
      },
      adapter = {
        ind_addr = 4276101120,
        summary_addr = 16418,
        ind_offset = 0,
        summary_offset = 0,
        adapter_id = 0
      },
      hv_sint = {
        vcpu = 4276101120,
        sint = 0
      }
    },
    link = {
      next = 0x0,
      pprev = 0xffff934edaadf608
    }
  },
  irq_entry_sc = {
    sequence = 44
  },
  gsi = 28,
  inject = {
    data = {
      counter = 68719476704
    },
    entry = {
      next = 0xffff934fb0fc2480,
      prev = 0xffff934fb0fc2480
    },
    func = 0xffffffffc0927470 <irqfd_inject>,
    uek_reserved1 = 0,
    uek_reserved2 = 0,
    uek_reserved3 = 0,
    uek_reserved4 = 0
  },
  resampler = 0x0,
  resamplefd = 0x0,
  resampler_link = {
    next = 0x0,
    prev = 0x0
  },
  eventfd = 0xffff934e10a6a280,
  list = {
    next = 0xffff934fb0fc20e0,
    prev = 0xffff934fb0fc02e0
  },
  pt = {
    _qproc = 0xffffffffc0927450 <irqfd_ptable_queue_proc>,
    _key = 4294967295
  },
  shutdown = {
    data = {
      counter = 68719476704
    },
    entry = {
      next = 0xffff934fb0fc2508,
      prev = 0xffff934fb0fc2508
    },
    func = 0xffffffffc0928020 <irqfd_shutdown>,
    uek_reserved1 = 0,
    uek_reserved2 = 0,
    uek_reserved3 = 0,
    uek_reserved4 = 0
  },
  consumer = {
    node = {
      next = 0xffff934fb0fc0340,
      prev = 0xffff934fb0fc2140
    },
    token = 0xffff934e10a6a280,
    add_producer = 0xffffffffc09452c0 <kvm_arch_irq_bypass_add_producer>,
    del_producer = 0xffffffffc0945320 <kvm_arch_irq_bypass_del_producer>,
    stop = 0xffffffffc0927430 <kvm_arch_irq_bypass_stop>,
    start = 0xffffffffc0927440 <kvm_arch_irq_bypass_start>
  },
  producer = 0x0
}
