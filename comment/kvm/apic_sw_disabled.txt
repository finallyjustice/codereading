测试apic_hw_disabled的例子.

__read_mostly DEFINE_STATIC_KEY_DEFERRED_FALSE(test_hw_disabled, HZ);

此时static_branch_unlikely(&test_hw_disabled.key)是0

static_branch_slow_dec_deferred(&test_hw_disabled);
static_branch_slow_dec_deferred(&test_hw_disabled);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是0

static_branch_inc(&test_hw_disabled.key);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是0

static_branch_inc(&test_hw_disabled.key);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是0

static_branch_inc(&test_hw_disabled.key);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是1

static_branch_inc(&test_hw_disabled.key);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是1

static_branch_slow_dec_deferred(&test_hw_disabled);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是1

static_branch_slow_dec_deferred(&test_hw_disabled);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是0

static_branch_slow_dec_deferred(&test_hw_disabled);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是0

static_branch_slow_dec_deferred(&test_hw_disabled);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是0

static_branch_slow_dec_deferred(&test_hw_disabled);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是0

static_branch_slow_dec_deferred(&test_hw_disabled);
msleep(2000);
此时static_branch_unlikely(&test_hw_disabled.key)是0

---------------------------------------


apic_hw_disabled代表HW enabled APIC in APIC_BASE MSR
比如过去是return (apic)->vcpu->arch.apic_base & MSR_IA32_APICBASE_ENABLE;

commit c5cc421ba3219b90f11d151bc55f1608c12830fa
Author: Gleb Natapov <gleb@redhat.com>
Date:   Sun Aug 5 15:58:30 2012 +0300

    KVM: use jump label to optimize checking for HW enabled APIC in APIC_BASE MSR
    
    Usually all APICs are HW enabled so the check can be optimized out.
    
    Signed-off-by: Gleb Natapov <gleb@redhat.com>
    Signed-off-by: Avi Kivity <avi@redhat.com>


apic_sw_disabled代表SW enabled apic in spurious interrupt register,
比如过去是return apic_get_reg(apic, APIC_SPIV) & APIC_SPIV_APIC_ENABLED;

commit f8c1ea103947038b7197bdd4c8451886a58af0c0
Author: Gleb Natapov <gleb@redhat.com>
Date:   Sun Aug 5 15:58:31 2012 +0300

    KVM: use jump label to optimize checking for SW enabled apic in spurious interrupt register

    Usually all APICs are SW enabled so the check can be optimized out.

    Signed-off-by: Gleb Natapov <gleb@redhat.com>
    Signed-off-by: Avi Kivity <avi@redhat.com>

---------------------------------------

初始化的时候在kvm_create_lapic() ...

static_branch_inc(&apic_sw_disabled.key);

稍后在apic_set_spiv()中会dec.

---------------------------------------

[   32.126841] apic_set_spiv() vcpu=0, val=255, enabled=0, apic->sw_enabled=0
[   32.128273] apic_set_spiv() vcpu=1, val=255, enabled=0, apic->sw_enabled=0
[   32.130049] apic_set_spiv() vcpu=2, val=255, enabled=0, apic->sw_enabled=0
[   32.131888] apic_set_spiv() vcpu=3, val=255, enabled=0, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reset
[0] kvm_vcpu_reset
[0] kvm_arch_vcpu_create
[0] kvm_vm_ioctl
[0] __x64_sys_ioctl+0x7e/0xb0
[0] do_syscall_64+0x40/0x80
[0] entry_SYSCALL_64_after_hwframe


[   32.158805] apic_set_spiv() vcpu=0, val=255, enabled=0, apic->sw_enabled=0
[   32.159980] apic_set_spiv() vcpu=1, val=255, enabled=0, apic->sw_enabled=0
[   32.160908] apic_set_spiv() vcpu=2, val=255, enabled=0, apic->sw_enabled=0
[   32.162657] apic_set_spiv() vcpu=3, val=255, enabled=0, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_apic_set_state
[0] kvm_arch_vcpu_ioctl
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe


[   32.204971] apic_set_spiv() vcpu=0, val=511, enabled=1, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reg_write
[0] kvm_apic_write_nodecode
[0] handle_apic_write
[0] vmx_handle_exit
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe


[   32.205945] apic_set_spiv() vcpu=3, val=255, enabled=0, apic->sw_enabled=0
[   32.205964] apic_set_spiv() vcpu=1, val=255, enabled=0, apic->sw_enabled=0
[   32.207484] apic_set_spiv() vcpu=2, val=255, enabled=0, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reset
[0] kvm_vcpu_reset
[0] kvm_apic_accept_events
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe


[   43.321573] apic_set_spiv() vcpu=0, val=511, enabled=1, apic->sw_enabled=1

[0] apic_set_spiv
[0] kvm_lapic_reg_write
[0] __kvm_set_msr
[0] kvm_emulate_wrmsr
[0] vmx_handle_exit
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe


[   43.468150] apic_set_spiv() vcpu=1, val=255, enabled=0, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reset
[0] kvm_vcpu_reset
[0] kvm_apic_accept_events
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

[   43.473252] apic_set_spiv() vcpu=1, val=511, enabled=1, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reset
[0] kvm_vcpu_reset
[0] kvm_apic_accept_events
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe


[   43.519682] apic_set_spiv() vcpu=2, val=255, enabled=0, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reset
[0] kvm_vcpu_reset
[0] kvm_apic_accept_events
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

[   43.521950] apic_set_spiv() vcpu=2, val=511, enabled=1, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reg_write
[0] __kvm_set_msr
[0] kvm_emulate_wrmsr
[0] vmx_handle_exit
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe


[   43.541906] apic_set_spiv() vcpu=3, val=255, enabled=0, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reset
[0] kvm_vcpu_reset
[0] kvm_apic_accept_events
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

[   43.544478] apic_set_spiv() vcpu=3, val=511, enabled=1, apic->sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reg_write
[0] __kvm_set_msr
[0] kvm_emulate_wrmsr
[0] vmx_handle_exit
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

-------------------------------------------

hotplug第四个CPU的时候:

[  445.146366] orabug: apic_set_spiv() vcpu=4, val=255, enabled=0, sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reset
[0] kvm_vcpu_reset
[0] kvm_arch_vcpu_create
[0] kvm_vm_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

[  445.147641] orabug: apic_set_spiv() vcpu=4, val=255, enabled=0, sw_enabled=0

[0] apic_set_spiv
[0] kvm_apic_set_state
[0] kvm_arch_vcpu_ioctl
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

[  445.177453] orabug: apic_set_spiv() vcpu=4, val=255, enabled=0, sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reset
[0] kvm_vcpu_reset
[0] kvm_apic_accept_events
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

[  445.179706] orabug: apic_set_spiv() vcpu=4, val=511, enabled=1, sw_enabled=0

[0] apic_set_spiv
[0] kvm_lapic_reg_write
[0] __kvm_set_msr
[0] kvm_emulate_wrmsr
[0] vmx_handle_exit
[0] kvm_arch_vcpu_ioctl_run
[0] kvm_vcpu_ioctl
[0] __x64_sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

-------------------------------------------

hot-remove (或者sysfs offline)没有调用apic_set_spiv()
