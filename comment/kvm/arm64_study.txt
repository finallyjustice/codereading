
===================================

CPU虚拟化(指令trap/emulate)

在ARMv8中,通过设置HCR(Hyp Configuration Register)寄存器的E2H位,来开启VHE模式.

Executing in            HCR_EL2.E2H	HCR_EL2.TGE
Guest Kernel (EL1)       1                0
Guest Application (EL0)  1                0
Host Kernel (EL2)        1                1
Host Application (EL0)   1                1


HCR_EL2 (64-bit) trap的寄存器/指令.

- TID5, bit [58]

GMID_EL1寄存器

- TTLBOS, bit [55]

Trap TLB maintenance instructions that operate on the Outer Shareable domain.
Traps execution of those TLB maintenance instructions at EL1 to EL2, when EL2
is enabled in the current Security state. This applies to the following
instructions:

TLBI VMALLE1OS
TLBI VMALLE1OSNXS
TLBI VAE1OS
TLBI VAE1OSNXS
TLBI ASIDE1OS
TLBI ASIDE1OSNXS
TLBI VAAE1OS
TLBI VAAE1OSNXS
TLBI VALE1OS
TLBI VALE1OSNXS
TLBI VAALE1OS
TLBI VAALE1OSNXS
TLBI RVAE1OS
TLBI RVAE1OSNXS
TLBI RVAAE1OS
TLBI RVAAE1OSNXS
TLBI RVALE1OS
TLBI RVALE1OSNXS
TLBI RVAALE1OS
TLBI RVAALE1OSNXS

- TTLBIS, bit [54]

Trap TLB maintenance instructions that operate on the Inner Shareable domain.
Traps execution of those TLB maintenance instructions at EL1 to EL2, when EL2
is enabled in the current Security state. This applies to the following
instructions:

TLBI VMALLE1IS
TLBI VMALLE1ISNXS
TLBI VAE1IS
TLBI VAE1ISNXS
TLBI ASIDE1IS
TLBI ASIDE1ISNXS
TLBI VAAE1IS
TLBI VAAE1ISNXS
TLBI VALE1IS
TLBI VALE1ISNXS
TLBI VAALE1IS
TLBI VAALE1ISNXS
TLBI RVAE1IS
TLBI RVAE1ISNXS
TLBI RVAAE1IS
TLBI RVAAE1ISNXS
TLBI RVALE1IS
TLBI RVALE1ISNXS
TLBI RVAALE1IS
TLBI RVAALE1ISNXS

- TOCU, bit [52]

Trap cache maintenance instructions that operate to the Point of Unification.

- TICAB, bit [50]

Trap ICIALLUIS/IC IALLUIS cache maintenance instructions, e.g.,  IC IALLUIS.

- TID4, bit [49]

Trap ID group 4. Traps the following register accesses to EL2, when EL2 is
enabled in the current Security state:

CCSIDR_EL1
CCSIDR2_EL1
CLIDR_EL1
CSSELR_EL1
CSSELR_EL1.

- FIEN, bit [47]

Fault Injection Enable. Unless this bit is set to 1, accesses to the
ERXPFGCDN_EL1, ERXPFGCTL_EL1, and ERXPFGF_EL1 registers from EL1 generate a
Trap exception to EL2, when EL2 is enabled in the current Security state,
reported using EC syndrome value 0x18.

- NV2, bit [45]

Nested Virtualization. Changes the behaviors of HCR_EL2.{NV1, NV} to provide a
mechanism for hardware to transform reads and writes from System registers into
reads and writes from memory.

- AT, bit [44]

Address Translation. EL1 execution of the following address translation
instructions is trapped to EL2, when EL2 is enabled in the current Security
state, reported using EC syndrome value 0x18:

AT S1E0R
AT S1E0W
AT S1E1R
AT S1E1W
AT S1E1RP
AT S1E1WP

- TME, bit [39]

EL0 and EL1 accesses to TSTART, TCOMMIT, TTEST, and TCANCEL instructions are
UNDEFINED, or not.

- TEA, bit [37]

Route synchronous External abort exceptions to EL2.

- TERR, bit [36]

Trap accesses of Error Record registers.

- TLOR, bit [35]

Trap LOR registers.

- E2H, bit [34]

EL2 Host. Enables a configuration where a Host Operating System is running in
EL2, and the Host Operating System's applications are running in EL0.

- TRVM, bit [30]

Trap Reads of Virtual Memory controls. Traps reads of the virtual memory
control registers to EL2, when EL2 is enabled in the current Security state, as
follows:

SCTLR_EL1
TTBR0_EL1
TTBR1_EL1
TCR_EL1
ESR_EL1
FAR_EL1
AFSR0_EL1
AFSR1_EL1
MAIR_EL1
AMAIR_EL1
CONTEXTIDR_EL1

- TDZ, bit [28]

Trap DC ZVA instructions.

- TGE, bit [27]

Trap General Exceptions, from EL0.

- TVM, bit [26]

Trap Virtual Memory controls. Traps writes to the virtual memory control
registers to EL2, when EL2 is enabled in the current Security state, as
follows:

SCTLR_EL1
TTBR0_EL1
TTBR1_EL1
TCR_EL1
ESR_EL1
FAR_EL1
AFSR0_EL1
AFSR1_EL1
MAIR_EL1
AMAIR_EL1
CONTEXTIDR_EL1

- TTLB, bit [25]

Trap TLB maintenance instructions.

- TACR, bit [21]

Trap Auxiliary Control Registers.

- TIDCP, bit [20]

Trap IMPLEMENTATION DEFINED functionality. Traps EL1 accesses to the encodings
reserved for IMPLEMENTATION DEFINED functionality to EL2.

- TWE, bit [14]

Traps EL0 and EL1 execution of WFE instructions to EL2, when EL2 is enabled in
the current Security state, from both Execution states, reported using EC
syndrome value 0x01.

- TWI, bit [13]

Traps EL0 and EL1 execution of WFI instructions to EL2, when EL2 is enabled in
the current Security state, from both Execution states, reported using EC
syndrome value 0x01.

- VM, bit [0]

Virtualization enable. Enables stage 2 address translation for the EL1&0
translation regime, when EL2 is enabled in the current Security state.

---------------------------

除了HCR, 还有其他的寄存器:

- HACR_EL2, Hypervisor Auxiliary Control Register
- HAFGRTR_EL2, Hypervisor Activity Monitors Fine-Grained Read Trap Register
- HCR_EL2, Hypervisor Configuration Register
- HCRX_EL2, Extended Hypervisor Configuration Register
- HDFGRTR_EL2, Hypervisor Debug Fine-Grained Read Trap Register
- HDFGWTR_EL2, Hypervisor Debug Fine-Grained Write Trap Register
- HFGITR_EL2, Hypervisor Fine-Grained Instruction Trap Register
- HFGRTR_EL2, Hypervisor Fine-Grained Read Trap Register
- HFGWTR_EL2, Hypervisor Fine-Grained Write Trap Register
- HPFAR_EL2, Hypervisor IPA Fault Address Register
- HSTR_EL2, Hypervisor System Trap Register

---------------------------

关于PSTATE.

Process state, or PSTATE, is an abstraction of process state information.

Special-purpose register    PSTATE fields
NZCV                        N, Z, C, V
DAIF                        D, A, I, F
CurrentEL                   EL
SPSel                       SP
PAN                         PAN
UAO                         UAO
DIT                         DIT
SSBS                        SSBS
TCO                         TCO
ALLINT                      ALLINT

在print_pstate()打印pstate.

===================================

寄存器虚拟化

(1) trap
(2) 像是x86的pmu一样一起分享
(3) 影子寄存器


目前的理解, arm64并没有一个所谓的guest mode (vmx/svm), 只有EL0/EL1/EL2.

对于vhe, host运行在EL0/EL2, 而VM运行在EL0/EL1. (总有一种错觉,VM也运行在EL1)

有些指令/寄存器会trap, 有些不会.

不会trap的那些, 就是访问的EL1的寄存器 (EL2有另外一套), 有点类此x86的PMU寄存器.

进入VM (EL1)前配置好, 退出VM (EL1)的时候保存好现场. (vhe需要在EL2访问EL1的寄存器)

EL2本来是不能直接访问EL1的寄存器的, 但是通过配置HCR_EL2.{E2H, TGE}.
不太懂, 感觉下面应该是在EL2状态下加载EL1的寄存器.


kvm_arch_vcpu_load()
-> __sysreg_restore_el1_state()
   -> write_sysreg_el1(ctxt_sys_reg(ctxt, TTBR0_EL1), SYS_TTBR0);
   -> write_sysreg_el1(ctxt_sys_reg(ctxt, TTBR1_EL1), SYS_TTBR1);


kvm_arch_vcpu_put()
-> __sysreg_save_el1_state()
   -> ctxt_sys_reg(ctxt, TTBR0_EL1)   = read_sysreg_el1(SYS_TTBR0);
   -> ctxt_sys_reg(ctxt, TTBR1_EL1)   = read_sysreg_el1(SYS_TTBR1);


下面是部分在__sysreg_restore_el1_state()中的寄存器:

130         write_sysreg_el1(ctxt_sys_reg(ctxt, CPACR_EL1), SYS_CPACR);
131         write_sysreg_el1(ctxt_sys_reg(ctxt, TTBR0_EL1), SYS_TTBR0);
132         write_sysreg_el1(ctxt_sys_reg(ctxt, TTBR1_EL1), SYS_TTBR1);
133         if (cpus_have_final_cap(ARM64_HAS_TCR2))
134                 write_sysreg_el1(ctxt_sys_reg(ctxt, TCR2_EL1),  SYS_TCR2);
135         write_sysreg_el1(ctxt_sys_reg(ctxt, ESR_EL1),   SYS_ESR);
136         write_sysreg_el1(ctxt_sys_reg(ctxt, AFSR0_EL1), SYS_AFSR0);
137         write_sysreg_el1(ctxt_sys_reg(ctxt, AFSR1_EL1), SYS_AFSR1);
138         write_sysreg_el1(ctxt_sys_reg(ctxt, FAR_EL1),   SYS_FAR);
139         write_sysreg_el1(ctxt_sys_reg(ctxt, MAIR_EL1),  SYS_MAIR);
140         write_sysreg_el1(ctxt_sys_reg(ctxt, VBAR_EL1),  SYS_VBAR);
141         write_sysreg_el1(ctxt_sys_reg(ctxt, CONTEXTIDR_EL1), SYS_CONTEXTIDR);
142         write_sysreg_el1(ctxt_sys_reg(ctxt, AMAIR_EL1), SYS_AMAIR);
143         write_sysreg_el1(ctxt_sys_reg(ctxt, CNTKCTL_EL1), SYS_CNTKCTL);
144         if (cpus_have_final_cap(ARM64_HAS_S1PIE)) {
145                 write_sysreg_el1(ctxt_sys_reg(ctxt, PIR_EL1),   SYS_PIR);
146                 write_sysreg_el1(ctxt_sys_reg(ctxt, PIRE0_EL1), SYS_PIRE0);
147         }


还有一些寄存器, 直接保存了一个EL2的版本, 当在EL1访问的时候, 实际返回的是EL2的版本, 就不会trap了.

比如VMPIDR_EL2: Holds the value of the Virtualization Multiprocessor ID. This
is the value returned by EL1 reads of MPIDR_EL1.

kvm_arch_vcpu_load()
-> kvm_vcpu_load_sysregs_vhe()
   -> write_sysreg(ctxt_sys_reg(ctxt, MPIDR_EL1), vmpidr_el2);


===================================

时钟虚拟化

5.4的例子.

crash> arch_timer_uses_ppi
arch_timer_uses_ppi = $1 = ARCH_TIMER_HYP_PPI

crash> arch_timer_read_counter
arch_timer_read_counter = $3 = (u64 (*)(void)) 0xffffc7f9d637f4a8
crash> sym ffffc7f9d637f4a8
ffffc7f9d637f4a8 (t) arch_counter_get_cntpct /usr/src/debug/kernel-5.4.17/linux-5.4.17-2136.323.8.1.el7uek/arch/arm64/include/asm/arch_timer.h: 182

crash> struct clocksource ffffc7f9d7b707a8
struct clocksource {
  read = 0xffffc7f9d637f4d8,
  mask = 72057594037927935,
  mult = 671088640,
  shift = 24,
  max_idle_ns = 440795202646,
  maxadj = 73819750,
  uncertainty_margin = 200000,
  archdata = {
    clock_mode = VDSO_CLOCKMODE_ARCHTIMER_NOCOMPAT
  },
  max_cycles = 24763775413,
  name = 0xffffc7f9d6ce8da0 "arch_sys_counter",
  list = {
    next = 0xffffc7f9d79d7288,
    prev = 0xffffc7f9d79d7238
  },
  rating = 400,
  enable = 0x0,
  disable = 0x0,
  flags = 161,
  suspend = 0x0,
  resume = 0x0,
  mark_unstable = 0x0,
  tick_stable = 0x0,
  owner = 0x0
}

$ cat /sys/devices/system/clocksource/clocksource0/available_clocksource 
arch_sys_counter

$ cat /sys/devices/system/clockevents/clockevent2/current_device
arch_sys_timer


分为clocksource和clockevent.

---------------------------

clocksource是"arch_sys_counter". 用的是physical counter.

arch_timer_read_counter = arch_counter_get_cntpct()

---------------------------

clockevent在procfs里有四个. 用的是physical timer.

- kvm guest ptimer
- kvm guest vtimer
- arch_timer --> 默认只有这个不是0
- arch_mem_timer

---------------------------

CNTHCTL_EL2寄存器控制哪些对timer/counter的寄存器访问会trap.

分为两种情况: 支持VHE并且HCR_EL2.E2H == 1, 或者else.

这里只讨论第一种情况, 通过修改CNTHCTL_EL2, 可以决定要trap的register.
比如: 在VM读取cntvct_el0的时候应该不会trap, 还是返回cntvoff_el2

在以下使用access_arch_timer():
  - arch/arm64/kvm/sys_regs.c|2285| <<global>> { SYS_DESC(SYS_CNTPCT_EL0), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2286| <<global>> { SYS_DESC(SYS_CNTPCTSS_EL0), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2287| <<global>> { SYS_DESC(SYS_CNTP_TVAL_EL0), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2288| <<global>> { SYS_DESC(SYS_CNTP_CTL_EL0), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2289| <<global>> { SYS_DESC(SYS_CNTP_CVAL_EL0), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2663| <<global>> { SYS_DESC(SYS_AARCH32_CNTP_TVAL), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2664| <<global>> { SYS_DESC(SYS_AARCH32_CNTP_CTL), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2746| <<global>> { SYS_DESC(SYS_AARCH32_CNTPCT), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2750| <<global>> { SYS_DESC(SYS_AARCH32_CNTP_CVAL), access_arch_timer },
  - arch/arm64/kvm/sys_regs.c|2751| <<global>> { SYS_DESC(SYS_AARCH32_CNTPCTSS), access_arch_timer },

在timer_set_traps()进行的配置, 好多bit都是0.
这里非常tricky, 有些bit=1的时候trap, 有些是bit=0的时候trap.

- EL1TVT: 如果是0就不会trap任何

- EL1PTEN: 如果是1或者HCR_EL2.TGE=1, 就不会trap任何
  如果是0(没配置), 就会trap一些寄存器, 比如CNTP_CTL_EL0


- EL0PCTEN, bit [0]

When HCR_EL2.TGE is 0, this control does not cause any instructions to be
trapped.
When HCR_EL2.TGE is 1, traps EL0 accesses to the frequency register and
physical counter register to EL2, e.g., CNTPCT_EL0.

- EL0VCTEN, bit [1]

When HCR_EL2.TGE is 0, this control does not cause any instructions to be
trapped.
When HCR_EL2.TGE is 1, traps EL0 accesses to the frequency register and virtual
counter register to EL2, e.g., CNTVCT_EL0.

- EL0VTEN, bit [8]

When HCR_EL2.TGE is 0, this control does not cause any instructions to be
trapped.
When HCR_EL2.TGE is 1, traps EL0 accesses to the virtual timer registers to
EL2, e.g.,: CNTV_CTL_EL0, CNTV_CVAL_EL0, CNTV_TVAL_EL0.

- EL0PTEN, bit [9]

When HCR_EL2.TGE is 0, this control does not cause any instructions to be
trapped.
When HCR_EL2.TGE is 1, traps EL0 accesses to the physical timer registers to
EL2, e.g.,: CNTP_CTL_EL0, CNTP_CVAL_EL0, CNTP_TVAL_EL0.

- EL1PCTEN, bit [10]

When HCR_EL2.TGE is 0, traps EL0 and EL1 accesses to the EL1 physical counter
register to EL2 when EL2 is enabled in the current Security state. E.g., in
AArch64 state, accesses to CNTPCT_EL0 are trapped to EL2, reported using EC
syndrome value 0x18.

- EL1PTEN, bit [11]

When HCR_EL2.TGE is 0, traps EL0 and EL1 accesses to the E1 physical timer
registers to EL2 when EL2 is enabled in the current Security state. E.g., EL0
and EL1 accesses to the CNTP_CTL_EL0, CNTP_CVAL_EL0, and CNTP_TVAL_EL0 are
trapped to EL2 when EL2 is enabled in the current Security state, unless they
are trapped by CNTKCTL_EL1.EL0PTEN.

- ECV, bit [12]

Enables the Enhanced Counter Virtualization functionality registers.
举一个例子: An MRS to CNTPCT_EL0 from either EL0 or EL1 that is not trapped will
return the value (PCount<63:0> - CNTPOFF_EL2<63:0>).

- EL1TVT, bit [13]

Traps EL0 and EL1 accesses to the EL1 virtual timer registers to EL2, when EL2
is enabled for the current Security state. e.g., CNTV_CTL_EL0, CNTV_CVAL_EL0,
CNTV_TVAL_EL0.

- EL1TVCT, bit [14]

Traps EL0 and EL1 accesses to the EL1 virtual counter registers to EL2, when
EL2 is enabled for the current Security state, e.g., CNTVCT_EL0.

===================================

中断虚拟化

针对每个vCPU, VGIC引入了VGIC CPU Interfaces和对应的Hypervisor控制接口;
可以通过写Hypervisor控制接口中的LR(List Register)寄存器来产生虚拟中断,
VGIC CPU Interface会将虚拟中断信号送入到Guest中;
VGIC CPU Interface支持ACK和EOI,因此这些操作也不需要trap到Hypervisor中来通过软件进行模拟,
也减少了CPU接收中断的overhead.
Distributor仍然需要trap到Hypervisor中来进行软件模拟, 比如, 当某个vCPU需要发送虚拟IPI到另一个vCPU时,
此时是需要Distributor来辅助完成功能的,这个过程就需要trap到Hypervisor;

---------------------------

IPI

---------------------------

===================================

内存虚拟化

在普通的OS中, 似乎TTBR0_EL0用作user页表, TTBR0_EL1用作kernel页表.


设置页表的地方:

在以下使用kvm_s2_mmu->pgd_phys:
  - arch/arm64/include/asm/kvm_mmu.h|289| <<kvm_get_vttbr>> baddr = mmu->pgd_phys;
  - arch/arm64/kvm/hyp/nvhe/mem_protect.c|157| <<kvm_host_prepare_stage2>> mmu->pgd_phys = __hyp_pa(host_mmu.pgt.pgd);
  - arch/arm64/kvm/hyp/nvhe/mem_protect.c|264| <<kvm_guest_prepare_stage2>> vm->kvm.arch.mmu.pgd_phys = __hyp_pa(vm->pgt.pgd);
  - arch/arm64/kvm/hyp/nvhe/mem_protect.c|276| <<reclaim_guest_pages>> vm->kvm.arch.mmu.pgd_phys = 0ULL;
  - arch/arm64/kvm/mmu.c|925| <<kvm_init_stage2_mmu>> mmu->pgd_phys = __pa(pgt->pgd);
  - arch/arm64/kvm/mmu.c|1017| <<kvm_free_stage2_pgd>> mmu->pgd_phys = 0;

更新vttbr_el2的地方(相当于EPT)

__kvm_vcpu_run_vhe()
-> __load_stage2(vcpu->arch.hw_mmu, vcpu->arch.hw_mmu->arch);
   -> write_sysreg(kvm_get_vttbr(mmu), vttbr_el2);
-> __activate_traps()
   -> ___activate_traps()
      -> write_sysreg(hcr, hcr_el2);
-> __guest_enter(()
-> __deactivate_traps()
   -> ___deactivate_traps()
      -> vcpu->arch.hcr_el2 |= read_sysreg(hcr_el2) & HCR_VSE;

加载VM的页表(cr3)

kvm_arch_vcpu_load()
-> __sysreg_restore_el1_state()
   -> write_sysreg_el1(ctxt_sys_reg(ctxt, TTBR0_EL1), SYS_TTBR0);
   -> write_sysreg_el1(ctxt_sys_reg(ctxt, TTBR1_EL1), SYS_TTBR1);

保存VM的页表(cr3)

kvm_arch_vcpu_put()
-> __sysreg_save_el1_state()
   -> ctxt_sys_reg(ctxt, TTBR0_EL1)   = read_sysreg_el1(SYS_TTBR0);
   -> ctxt_sys_reg(ctxt, TTBR1_EL1)   = read_sysreg_el1(SYS_TTBR1);

这里有个更全的例子

vcpu_load() or kvm_sched_in()
-> kvm_arch_vcpu_load()
   -> kvm_vcpu_load_sysregs_vhe()
      -> __sysreg32_restore_state(vcpu);
      -> __sysreg_restore_user_state(guest_ctxt);
      -> __sysreg_restore_el1_state(guest_ctxt);
         -> write_sysreg(ctxt_sys_reg(ctxt, MPIDR_EL1), vmpidr_el2);
         -> write_sysreg_el1(ctxt_sys_reg(ctxt, TTBR0_EL1), SYS_TTBR0);
         -> write_sysreg_el1(ctxt_sys_reg(ctxt, TTBR1_EL1), SYS_TTBR1);


为了模拟外设, Hypervisor需要知道访问的是哪个外设以及访问的寄存器, 读访问还是写访问,
访问长度是多少, 使用哪些寄存器来传送数据等. Stage 2转换有一个专门的
Hypervisor IPA Fault Address Register, EL2(HPFAR_EL2)寄存器, 用于捕获Stage 2转换过程中的fault.
比如, 使用hpfar_el2的地方:
  - arch/arm64/include/asm/kvm_host.h|296| <<global>> u64 hpfar_el2;
  - arch/arm64/include/asm/kvm_emulate.h|317| <<kvm_vcpu_get_fault_ipa>> return ((phys_addr_t)vcpu->arch.fault.hpfar_el2 & HPFAR_MASK) << 8;
  - arch/arm64/kvm/hyp/include/hyp/fault.h|67| <<__get_fault_info>> hpfar = read_sysreg(hpfar_el2);
  - arch/arm64/kvm/hyp/include/hyp/fault.h|71| <<__get_fault_info>> fault->hpfar_el2 = hpfar;
  - arch/arm64/kvm/hyp/nvhe/mem_protect.c|538| <<handle_host_mem_abort>> addr = (fault.hpfar_el2 & HPFAR_MASK) << 8;
  - arch/arm64/kvm/hyp/vhe/switch.c|343| <<__hyp_call_panic>> read_sysreg(hpfar_el2), par, vcpu);

===================================

PCI虚拟化

===================================

VFIO虚拟化

========================================

PMU虚拟化

========================================

MIDR_EL1: 存有处理器类型信息
MPIDR_EL1：亲和性配置

Hypervisor可能希望在访问上述两个寄存器时不要总是陷入. 对这些寄存器, Armv8提供了与其对应
的不需要陷入的版本.Hypervisor可以在进入VM时先配置好这些寄存器的值.
当VM中读到MIDR_EL1/MPIDR_EL1时会自动返回VPIDR_EL2/VMPIDR_EL2的值而不发生陷入.

VPIDR_EL2:读取MIDR_EL1返回VPIDR_EL2的值避免陷入
VMPIDR_EL2:读取MPIDR_EL1返回VMPIDR_EL2的值避免陷入

https://github.com/akangakang/OS-Study-Note/blob/main/16-%E8%99%9A%E6%8B%9F%E5%8C%96.md
https://www.cnblogs.com/LoyenWang/p/13584020.html
https://www.cnblogs.com/LoyenWang/category/1828942.html
https://www.cnblogs.com/LoyenWang/tag/%E8%99%9A%E6%8B%9F%E5%8C%96/
https://www.cnblogs.com/LoyenWang/p/14017052.html
https://zhuanlan.zhihu.com/p/531826473
https://aijishu.com/a/1060000000359277


