KVM cpuid init/process.

KVM在定义cpuid的时候分为下面核心的步骤.

1. KVM会通过KVM_GET_SUPPORTED_CPUID这个ioctl让QEMU知道那些cpuid的feature是支持的 (会有不支持的).

2. QEMU会把KVM_GET_SUPPORTED_CPUID的结果和"-cpu xxx,+feature0,-feature1,feature=on"的结果and一下.

3. 最终的结果会通过KVM_SET_CPUID2配置到KVM.

----------------------------------

在KVM side, 最初的时候, 通过vmx_set_cpu_caps()或者svm_set_cpu_caps()设置一些caps,
比方是否支持X86_FEATURE_SVM.

这样在__do_cpuid_func()中, 如果X86_FEATURE_SVM不被支持(没有nested),对应的KVM_GET_SUPPORTED_CPUID cpuid就返回0.

 789 static inline int __do_cpuid_func(struct kvm_cpuid_array *array, u32 function)
 790 {
1134         case 0x8000000A:
1135                 if (!kvm_cpu_cap_has(X86_FEATURE_SVM)) {
1136                         entry->eax = entry->ebx = entry->ecx = entry->edx = 0;
1137                         break;
1138                 }
1139                 entry->eax = 1; /* SVM revision 1 */
1140                 entry->ebx = 8; /* Lets support 8 ASIDs in case we add proper
1141                                    ASID emulation to nested SVM */
1142                 entry->ecx = 0; /* Reserved */
1143                 cpuid_entry_override(entry, CPUID_8000_000A_EDX);
1144                 break;


这样为了返回KVM_GET_SUPPORTED_CPUID而调用__do_cpuid_func()的时候,KVM先调用host硬件的cpuid, 然后根据caps过滤.

 814 static inline int __do_cpuid_func(struct kvm_cpuid_array *array, u32 function)
 815 {
 816         struct kvm_cpuid_entry2 *entry;
 817         int r, i, max_idx;
 818 
 819         /* all calls to cpuid_count() should be made on the same cpu */
 820         get_cpu();
 821 
 822         r = -E2BIG;
 823 
 824         entry = do_host_cpuid(array, function, 0);
 825         if (!entry)
 826                 goto out;
 827 
 828         switch (function) {
 829         case 0:
 830                 /* Limited to the highest leaf implemented in KVM. */
 831                 entry->eax = min(entry->eax, 0x1fU);
 832                 break;
 833         case 1:
 834                 cpuid_entry_override(entry, CPUID_1_EDX);
 835                 cpuid_entry_override(entry, CPUID_1_ECX);
 836                 break;
 837         case 2:

----------------------------------

cap配置好了, KVM_GET_SUPPORTED_CPUID就能返回KVM支持哪些cpuid的feature了.

通过get_supported_cpuid()-->try_get_cpuid()-->KVM_GET_SUPPORTED_CPUID来获取KVM支持的feature/cpuid.

为了减少和KVM的沟通, 结果可以缓存在cpuid_cache.

321 static struct kvm_cpuid2 *get_supported_cpuid(KVMState *s)
322 {
323     struct kvm_cpuid2 *cpuid;
324     int max = 1;
325
326     if (cpuid_cache != NULL) {
327         return cpuid_cache;
328     }
329     while ((cpuid = try_get_cpuid(s, max)) == NULL) {
330         max *= 2;
331     }
332     cpuid_cache = cpuid;
333     return cpuid;
334 }

(gdb) bt
#0  try_get_cpuid (s=0x55555680c600, max=64) at ../target/i386/kvm/kvm.c:257
#1  0x0000555555b144dc in get_supported_cpuid (s=0x55555680c600) at ../target/i386/kvm/kvm.c:288
#2  0x0000555555b146d2 in kvm_arch_get_supported_cpuid (s=0x55555680c600, function=0, index=0, reg=0) at ../target/i386/kvm/kvm.c:356
#3  0x0000555555b219d1 in kvm_cpu_max_instance_init (cpu=0x555556a5f390) at ../target/i386/kvm/kvm-cpu.c:77
#4  0x0000555555b21cb6 in kvm_cpu_instance_init (cs=0x555556a5f390) at ../target/i386/kvm/kvm-cpu.c:183
#5  0x0000555555ce9da1 in accel_cpu_instance_init (cpu=0x555556a5f390) at ../accel/accel-common.c:110
#6  0x0000555555b6dd3b in x86_cpu_post_initfn (obj=0x555556a5f390) at ../target/i386/cpu.c:6686
#7  0x0000555555d28c2d in object_post_init_with_type (obj=0x555556a5f390, ti=0x5555567e1470) at ../qom/object.c:384
 267  * #8  0x0000555555d28c5b in object_post_init_with_type (obj=0x555556a5f390, ti=0x5555567f4600) at ../qom/object.c:388
 268  * #9  0x0000555555d28c5b in object_post_init_with_type (obj=0x555556a5f390, ti=0x5555567f4960) at ../qom/object.c:388
 269  * #10 0x0000555555d29141 in object_initialize_with_type (obj=0x555556a5f390, size=51344, type=0x5555567f4960) at ../qom/object.c:520
 270  * #11 0x0000555555d29838 in object_new_with_type (type=0x5555567f4960) at ../qom/object.c:734
 271  * #12 0x0000555555d2988f in object_new (typename=0x5555567f4ae0 "host-x86_64-cpu") at ../qom/object.c:749
 272  * #13 0x0000555555b2dfce in x86_cpu_new (x86ms=0x555556a0b990, apic_id=0, errp=0x55555679a800 <error_fatal>) at ../hw/i386/x86.c:96
 273  * #14 0x0000555555b2e0e6 in x86_cpus_init (x86ms=0x555556a0b990, default_cpu_version=1) at ../hw/i386/x86.c:128
 274  * #15 0x0000555555b398df in pc_init1 (machine=0x555556a0b990, host_type=0x55555606fef4 "i440FX-pcihost", pci_type=0x55555606feed "i440FX") at ../hw/i386/pc_piix.c:157
 275  * #16 0x0000555555b3a322 in pc_init_v7_0 (machine=0x555556a0b990) at ../hw/i386/pc_piix.c:427
 276  * #17 0x0000555555954dff in machine_run_board_init (machine=0x555556a0b990) at ../hw/core/machine.c:1189
 277  * #18 0x0000555555896b1d in qemu_init_board () at ../softmmu/vl.c:2656
 278  * #19 0x0000555555896d5b in qmp_x_exit_preconfig (errp=0x55555679a800 <error_fatal>) at ../softmmu/vl.c:2746
 279  * #20 0x0000555555899362 in qemu_init (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/vl.c:3776
 280  * #21 0x0000555555836e7d in main (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/main.c:49

----------------------------------

QEMU初始化的时候, x86_cpu_common_class_init()-->x86_cpu_register_feature_bit_props()会为每一个cpu的feature (e.g., -x2apic,+x2apic,x2apic=on)注册.

7018 static void x86_cpu_common_class_init(ObjectClass *oc, void *data)
7019 {
... ...
7092     for (w = 0; w < FEATURE_WORDS; w++) {
7093         int bitnr;
7094         for (bitnr = 0; bitnr < 64; bitnr++) {
7095             x86_cpu_register_feature_bit_props(xcc, w, bitnr);
7096         }
7097     }
7098 }

FEATURE_WORDS包括比如FEAT_1_ECX.

676 FeatureWordInfo feature_word_info[FEATURE_WORDS] = {
677     [FEAT_1_EDX] = {
678         .type = CPUID_FEATURE_WORD,
679         .feat_names = {
680             "fpu", "vme", "de", "pse",
681             "tsc", "msr", "pae", "mce",
682             "cx8", "apic", NULL, "sep",
683             "mtrr", "pge", "mca", "cmov",
684             "pat", "pse36", "pn" /* Intel psn */, "clflush" /* Intel clfsh */,
685             NULL, "ds" /* Intel dts */, "acpi", "mmx",
686             "fxsr", "sse", "sse2", "ss",
687             "ht" /* Intel htt */, "tm", "ia64", "pbe",
688         },
689         .cpuid = {.eax = 1, .reg = R_EDX, },
690         .tcg_features = TCG_FEATURES,
691     },
692     [FEAT_1_ECX] = {
693         .type = CPUID_FEATURE_WORD,
694         .feat_names = { 
695             "pni" /* Intel,AMD sse3 */, "pclmulqdq", "dtes64", "monitor",
696             "ds-cpl", "vmx", "smx", "est",
697             "tm2", "ssse3", "cid", NULL,
698             "fma", "cx16", "xtpr", "pdcm",
699             NULL, "pcid", "dca", "sse4.1",
700             "sse4.2", "x2apic", "movbe", "popcnt",
701             "tsc-deadline", "aes", "xsave", NULL /* osxsave */,
702             "avx", "f16c", "rdrand", "hypervisor",
703         },
704         .cpuid = { .eax = 1, .reg = R_ECX, },
705         .tcg_features = TCG_EXT_FEATURES,
706     },

最终这些property(e.g., x2apic, vmx)的setter是x86_cpu_set_bit_prop(),
就是修改cpu->env.features[fp->w].

6605 static void x86_cpu_set_bit_prop(Object *obj, Visitor *v, const char *name,
6606                                  void *opaque, Error **errp)
6607 {
6608     DeviceState *dev = DEVICE(obj);
6609     X86CPU *cpu = X86_CPU(obj);
6610     BitProperty *fp = opaque;
6611     bool value;
6612 
6613     if (dev->realized) {
6614         qdev_prop_set_after_realize(dev, name, errp);
6615         return;
6616     }
6617 
6618     if (!visit_type_bool(v, name, &value, errp)) {
6619         return;
6620     }
6621 
6622     if (value) {
6623         cpu->env.features[fp->w] |= fp->mask;
6624     } else {
6625         cpu->env.features[fp->w] &= ~fp->mask;
6626     }
6627     cpu->env.user_features[fp->w] |= fp->mask;
6628 }

(gdb) bt
#0  x86_cpu_register_bit_prop (xcc=0x555556812140, prop_name=0x55555607a689 "x2apic", w=FEAT_1_ECX, bitnr=21) at ../target/i386/cpu.c:6641
#1  0x0000555555b6dd1e in x86_cpu_register_feature_bit_props (xcc=0x555556812140, w=FEAT_1_ECX, bitnr=21) at ../target/i386/cpu.c:6681
#2  0x0000555555b6e9ec in x86_cpu_common_class_init (oc=0x555556812140, data=0x0) at ../target/i386/cpu.c:7095
#3  0x0000555555d28b97 in type_initialize (ti=0x5555567e1470) at ../qom/object.c:366
#4  0x0000555555d28902 in type_initialize (ti=0x5555567ea7e0) at ../qom/object.c:314
#5  0x0000555555d2a0fa in object_class_foreach_tramp (key=0x5555567ea960, value=0x5555567ea7e0, opaque=0x7fffffffdb90) at ../qom/object.c:1071
#6  0x00007ffff6e46710 in g_hash_table_foreach () at /lib64/libglib-2.0.so.0
#7  0x0000555555d2a1d9 in object_class_foreach (fn=0x555555d2a336 <object_class_get_list_tramp>, implements_type=0x555555faee84 "machine", include_abstract=false, opaque=0x7fffffffdbe0) at ../qom/object.c:1093
#8  0x0000555555d2a3b1 in object_class_get_list (implements_type=0x555555faee84 "machine", include_abstract=false) at ../qom/object.c:1150
#9  0x0000555555894512 in select_machine (qdict=0x55555680c600, errp=0x55555679a800 <error_fatal>) at ../softmmu/vl.c:1661
#10 0x00005555558956a4 in qemu_create_machine (qdict=0x55555680c600) at ../softmmu/vl.c:2146
#11 0x00005555558991e5 in qemu_init (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/vl.c:3708
#12 0x0000555555836e7d in main (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/main.c:49

下面是其中一个property的例子.

(gdb) p *prop
$8 = {name = 0x555556817690 "x2apic", type = 0x5555568176b0 "bool", description = 0x0, get = 0x555555b6d930 <x86_cpu_get_bit_prop>, set = 0x555555b6d9de <x86_cpu_set_bit_prop>, resolve = 0x0, release = 0x0,
  init = 0x0, opaque = 0x555556817610, defval = 0x0}

----------------------------------

启动以后, QEMU有两处初始化property的地方, 一个是"+x2apic,-x2apic", 一个是"x2apic=on".

对于"+"或者"-", 用x86_cpu_parse_featurestr()添加到plus_features或者minus_features, 比如line 4694和line 4698.

(gdb) bt
4711  * #0  x86_cpu_parse_featurestr (typename=0x5555567f4ae0 "host-x86_64-cpu", features=0x55555680e620 "-x2apic", errp=0x55555679a800 <error_fatal>) at ../target/i386/cpu.c:4669
4712  * #1  0x0000555555bf2f64 in parse_cpu_option (cpu_option=0x7fffffffe290 "host,-x2apic") at ../cpu.c:265
4713  * #2  0x0000555555899305 in qemu_init (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/vl.c:3761
4714  * #3  0x0000555555836e7d in main (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/main.c:49

4667 static void x86_cpu_parse_featurestr(const char *typename, char *features,
4668                                      Error **errp)
4669 {
4670     char *featurestr; /* Single 'key=value" string being parsed */
4671     static bool cpu_globals_initialized;
4672     bool ambiguous = false;
4673
4674     if (cpu_globals_initialized) {
4675         return;
4676     }
4677     cpu_globals_initialized = true;
4678
4679     if (!features) {
4680         return;
4681     }
4682
4683     for (featurestr = strtok(features, ",");
4684          featurestr;
4685          featurestr = strtok(NULL, ",")) {
4686         const char *name;
4687         const char *val = NULL;
4688         char *eq = NULL;
4689         char num[32];
4690         GlobalProperty *prop;
4691
4692         /* Compatibility syntax: */
4693         if (featurestr[0] == '+') {
4694             plus_features = g_list_append(plus_features,
4695                                           g_strdup(featurestr + 1));
4696             continue;
4697         } else if (featurestr[0] == '-') {
4698             minus_features = g_list_append(minus_features,
4699                                            g_strdup(featurestr + 1));
4700             continue;
4701         }

稍后在x86_cpu_expand_features()设置true或者false.

6145 void x86_cpu_expand_features(X86CPU *cpu, Error **errp)
6146 {
6147     CPUX86State *env = &cpu->env;
6148     FeatureWord w;
6149     int i;
6150     GList *l;
6151 
6152     for (l = plus_features; l; l = l->next) {
6153         const char *prop = l->data;
6154         if (!object_property_set_bool(OBJECT(cpu), prop, true, errp)) {
6155             return;
6156         }
6157     }
6158 
6159     for (l = minus_features; l; l = l->next) {
6160         const char *prop = l->data;
6161         if (!object_property_set_bool(OBJECT(cpu), prop, false, errp)) {
6162             return;
6163         }
6164     }

(gdb) bt
#0  x86_cpu_expand_features (cpu=0x555556a5f460, errp=0x7fffffffd790) at ../target/i386/cpu.c:6147
#1  0x0000555555b6d14e in x86_cpu_realizefn (dev=0x555556a5f460, errp=0x7fffffffd810) at ../target/i386/cpu.c:6381
#2  0x0000555555d2325a in device_set_realized (obj=0x555556a5f460, value=true, errp=0x7fffffffd920) at ../hw/core/qdev.c:531
#3  0x0000555555d2cd6c in property_set_bool (obj=0x555556a5f460, v=0x555556a6e980, name=0x5555560c1221 "realized", opaque=0x555556812500, errp=0x7fffffffd920) at ../qom/object.c:2273
#4  0x0000555555d2adb3 in object_property_set (obj=0x555556a5f460, name=0x5555560c1221 "realized", v=0x555556a6e980, errp=0x7fffffffd920) at ../qom/object.c:1408
#5  0x0000555555d2f15e in object_property_set_qobject (obj=0x555556a5f460, name=0x5555560c1221 "realized", value=0x555556a6be10, errp=0x55555679a800 <error_fatal>) at ../qom/qom-qobject.c:28
#6  0x0000555555d2b118 in object_property_set_bool (obj=0x555556a5f460, name=0x5555560c1221 "realized", value=true, errp=0x55555679a800 <error_fatal>) at ../qom/object.c:1477
#7  0x0000555555d22b22 in qdev_realize (dev=0x555556a5f460, bus=0x0, errp=0x55555679a800 <error_fatal>) at ../hw/core/qdev.c:333
#8  0x0000555555b2e017 in x86_cpu_new (x86ms=0x555556a0b990, apic_id=0, errp=0x55555679a800 <error_fatal>) at ../hw/i386/x86.c:101
#9  0x0000555555b2e0e6 in x86_cpus_init (x86ms=0x555556a0b990, default_cpu_version=1) at ../hw/i386/x86.c:128
#10 0x0000555555b398df in pc_init1 (machine=0x555556a0b990, host_type=0x55555606fef4 "i440FX-pcihost", pci_type=0x55555606feed "i440FX") at ../hw/i386/pc_piix.c:157
#11 0x0000555555b3a322 in pc_init_v7_0 (machine=0x555556a0b990) at ../hw/i386/pc_piix.c:427
#12 0x0000555555954dff in machine_run_board_init (machine=0x555556a0b990) at ../hw/core/machine.c:1189
#13 0x0000555555896b1d in qemu_init_board () at ../softmmu/vl.c:2656
#14 0x0000555555896d5b in qmp_x_exit_preconfig (errp=0x55555679a800 <error_fatal>) at ../softmmu/vl.c:2746
#15 0x0000555555899362 in qemu_init (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/vl.c:3776
#16 0x0000555555836e7d in main (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/main.c:49


对于第二种情况"x2apic=on"或"x2apic=off", 在x86_cpu_parse_featurestr()的最后一种情况处理, line 4742.

4667 static void x86_cpu_parse_featurestr(const char *typename, char *features,
4668                                      Error **errp)
4669 {
... ...
4742         prop = g_new0(typeof(*prop), 1);
4743         prop->driver = typename;
4744         prop->property = g_strdup(name);
4745         prop->value = g_strdup(val);
4746         qdev_prop_register_global(prop);
4747     }

... 然后稍后在x86_cpu_new()-->qdev_prop_set_globals()设置true or false.

(gdb) bt
#0  object_property_parse (obj=0x555556a5f460, name=0x55555680db00 "x2apic", string=0x55555680db20 "off", errp=0x7fffffffd878) at ../qom/object.c:1646
#1  0x0000555555d28d33 in object_apply_global_props (obj=0x555556a5f460, props=0x5555569b8f00, errp=0x55555679a800 <error_fatal>) at ../qom/object.c:412
#2  0x0000555555d20e5c in qdev_prop_set_globals (dev=0x555556a5f460) at ../hw/core/qdev-properties.c:790
#3  0x0000555555d2385d in device_post_init (obj=0x555556a5f460) at ../hw/core/qdev.c:697
#4  0x0000555555d28c2d in object_post_init_with_type (obj=0x555556a5f460, ti=0x555556802d20) at ../qom/object.c:384
#5  0x0000555555d28c5b in object_post_init_with_type (obj=0x555556a5f460, ti=0x5555567b2220) at ../qom/object.c:388
#6  0x0000555555d28c5b in object_post_init_with_type (obj=0x555556a5f460, ti=0x5555567e1470) at ../qom/object.c:388
#7  0x0000555555d28c5b in object_post_init_with_type (obj=0x555556a5f460, ti=0x5555567f4600) at ../qom/object.c:388
#8  0x0000555555d28c5b in object_post_init_with_type (obj=0x555556a5f460, ti=0x5555567f4960) at ../qom/object.c:388
#9  0x0000555555d29141 in object_initialize_with_type (obj=0x555556a5f460, size=51344, type=0x5555567f4960) at ../qom/object.c:520
#10 0x0000555555d29838 in object_new_with_type (type=0x5555567f4960) at ../qom/object.c:734
#11 0x0000555555d2988f in object_new (typename=0x5555567f4ae0 "host-x86_64-cpu") at ../qom/object.c:749
#12 0x0000555555b2dfce in x86_cpu_new (x86ms=0x555556a0b990, apic_id=0, errp=0x55555679a800 <error_fatal>) at ../hw/i386/x86.c:96
#13 0x0000555555b2e0e6 in x86_cpus_init (x86ms=0x555556a0b990, default_cpu_version=1) at ../hw/i386/x86.c:128
#14 0x0000555555b398df in pc_init1 (machine=0x555556a0b990, host_type=0x55555606fef4 "i440FX-pcihost", pci_type=0x55555606feed "i440FX") at ../hw/i386/pc_piix.c:157
#15 0x0000555555b3a322 in pc_init_v7_0 (machine=0x555556a0b990) at ../hw/i386/pc_piix.c:427
#16 0x0000555555954dff in machine_run_board_init (machine=0x555556a0b990) at ../hw/core/machine.c:1189
#17 0x0000555555896b1d in qemu_init_board () at ../softmmu/vl.c:2656
#18 0x0000555555896d5b in qmp_x_exit_preconfig (errp=0x55555679a800 <error_fatal>) at ../softmmu/vl.c:2746
#19 0x0000555555899362 in qemu_init (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/vl.c:3776
#20 0x0000555555836e7d in main (argc=18, argv=0x7fffffffdf08, envp=0x7fffffffdfa0) at ../softmmu/main.c:49


Again, 最终这些property(e.g., x2apic, vmx)的setter是x86_cpu_set_bit_prop(), 就是修改cpu->env.features[fp->w].

----------------------------------

这里是关于在QEMU的cpuid features的计算.

x86_cpu_realizefn()
-> x86_cpu_expand_features()
-> x86_cpu_filter_features()

x86_cpu_filter_features()会通过从KVM_GET_SUPPORTED_CPUID和已经有的env->features[w]比较, 然后and过滤掉不支持的.
比如line 6295-6300.

6283 static void x86_cpu_filter_features(X86CPU *cpu, bool verbose)
6284 {
6285     CPUX86State *env = &cpu->env;
6286     FeatureWord w;
6287     const char *prefix = NULL;
6288
6289     if (verbose) {
6290         prefix = accel_uses_host_cpuid()
6291                  ? "host doesn't support requested feature"
6292                  : "TCG doesn't support requested feature";
6293     }
6294
6295     for (w = 0; w < FEATURE_WORDS; w++) {
6296         uint64_t host_feat =
6297             x86_cpu_get_supported_feature_word(w, false);
6298         uint64_t requested_features = env->features[w];
6299         uint64_t unavailable_features = requested_features & ~host_feat;
6300         mark_unavailable_features(cpu, w, unavailable_features, prefix);
6301     }


最终会通过KVM_SET_CPUID2更新到KVM. 首先在kvm_arch_init_vcpu()把env->features[w]转换成以下的结构.
然后通过KVM_SET_CPUID2更新到KVM.

struct {
    struct kvm_cpuid2 cpuid;
    struct kvm_cpuid_entry2 entries[KVM_MAX_CPUID_ENTRIES];
}

(gdb) bt
#0  kvm_arch_init_vcpu (cs=0x555556a5f460) at ../target/i386/kvm/kvm.c:1621
#1  0x0000555555d0c631 in kvm_init_vcpu (cpu=0x555556a5f460, errp=0x55555679a800 <error_fatal>) at ../accel/kvm/kvm-all.c:516
#2  0x0000555555d13504 in kvm_vcpu_thread_fn (arg=0x555556a5f460) at ../accel/kvm/kvm-accel-ops.c:40
#3  0x0000555555efbfb0 in qemu_thread_start (args=0x555556a6f3a0) at ../util/qemu-thread-posix.c:556
#4  0x00007ffff55efea5 in start_thread () at /lib64/libpthread.so.0
#5  0x00007ffff53189fd in clone () at /lib64/libc.so.6

----------------------------------

KVM side处理KVM_SET_CPUID2, 把cpuid的结构更新到下面.

struct kvm_vcpu_arch {
... ...
    int cpuid_nent;
    struct kvm_cpuid_entry2 *cpuid_entries;

这样在kvm_cpuid()的时候就可以用kvm_find_cpuid_entry()获得了.


======================================

下面是QEMU comment中的流程.

/***** Steps involved on loading and filtering CPUID data
6168  *
6169  * When initializing and realizing a CPU object, the steps
6170  * involved in setting up CPUID data are:
6171  *
6172  * 1) Loading CPU model definition (X86CPUDefinition). This is
6173  *    implemented by x86_cpu_load_model() and should be completely
6174  *    transparent, as it is done automatically by instance_init.
6175  *    No code should need to look at X86CPUDefinition structs
6176  *    outside instance_init.
6177  *
6178  * 2) CPU expansion. This is done by realize before CPUID
6179  *    filtering, and will make sure host/accelerator data is
6180  *    loaded for CPU models that depend on host capabilities
6181  *    (e.g. "host"). Done by x86_cpu_expand_features().
6182  *
6183  * 3) CPUID filtering. This initializes extra data related to
6184  *    CPUID, and checks if the host supports all capabilities
6185  *    required by the CPU. Runnability of a CPU model is
6186  *    determined at this step. Done by x86_cpu_filter_features().
6187  *
6188  * Some operations don't require all steps to be performed.
6189  * More precisely:
6190  *
6191  * - CPU instance creation (instance_init) will run only CPU
6192  *   model loading. CPU expansion can't run at instance_init-time
6193  *   because host/accelerator data may be not available yet.
6194  * - CPU realization will perform both CPU model expansion and CPUID
6195  *   filtering, and return an error in case one of them fails.
6196  * - query-cpu-definitions needs to run all 3 steps. It needs
6197  *   to run CPUID filtering, as the 'unavailable-features'
6198  *   field is set based on the filtering results.
6199  * - The query-cpu-model-expansion QMP command only needs to run
6200  *   CPU model loading and CPU expansion. It should not filter
6201  *   any CPUID data based on host capabilities.
6202  */

==============================================

几种VM不支持x2apic的原因.

1. "-cpu"中有-x2apic

2. 没有kvm_irqchip_in_kernel().

 389 uint32_t kvm_arch_get_supported_cpuid(KVMState *s, uint32_t function,
 390                                       uint32_t index, int reg)
... ...
 423         /* x2apic is reported by GET_SUPPORTED_CPUID, but it can't be enabled
 424          * without the in-kernel irqchip
 425          */
 426         if (!kvm_irqchip_in_kernel()) {
 427             ret &= ~CPUID_EXT_X2APIC;
 428         }
