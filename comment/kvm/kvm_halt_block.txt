v5.13
	
vcpu_run()
-> if (kvm_vcpu_running(vcpu))
     r = vcpu_enter_guest(vcpu);
     -> kvm_x86_run = vmx_vcpu_run()
     -> kvm_x86_handle_exit = vmx_handle_exit()
        -> __vmx_handle_exit()
           -> kvm_vmx_exit_handlers[exit_handler_index](vcpu)
              kvm_emulate_halt()
              -> kvm_vcpu_halt()
                 -> __kvm_vcpu_halt(vcpu, KVM_MP_STATE_HALTED, KVM_EXIT_HLT);
                    -> vcpu->arch.mp_state = KVM_MP_STATE_HALTED;
-> else
     r = vcpu_block(kvm, vcpu);
         -> kvm_vcpu_block()
         -> vcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE;


从vcpu_run()首先进入vcpu_enter_guest(), 从而进入guest mode.
当guest HLT的时候, 会trap到__kvm_vcpu_halt(), 并且vcpu->arch.mp_state = KVM_MP_STATE_HALTED.

当从vcpu_run()再次进入for loop的时候, 因为vcpu->arch.mp_state = KVM_MP_STATE_HALTED,
所以kvm_vcpu_running()会返回false. 因此进入了vcpu_block().

static inline bool kvm_vcpu_running(struct kvm_vcpu *vcpu)
{
    if (is_guest_mode(vcpu))
        kvm_check_nested_events(vcpu);

    return (vcpu->arch.mp_state == KVM_MP_STATE_RUNNABLE &&
            !vcpu->arch.apf.halted);
}

kvm_vcpu_block()的时候, 会先poll (spin)一会, 然后再schedule().
最后vcpu_block()设置vcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE.
