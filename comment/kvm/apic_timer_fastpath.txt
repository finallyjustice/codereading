
https://lore.kernel.org/all/YdjX%2F%2FgxZtP%2FZMME@google.com/

有下面的commit message.

When delivering a virtual interrupt, don't actually send a posted interrupt
if the target vCPU is also the currently running vCPU and is IN_GUEST_MODE,
in which case the interrupt is being sent from a VM-Exit fastpath and the
core run loop in vcpu_enter_guest() will manually move the interrupt from
the PIR to vmcs.GUEST_RVI.  IRQs are disabled while IN_GUEST_MODE, thus
there's no possibility of the virtual interrupt being sent from anything
other than KVM, i.e. KVM won't suppress a wake event from an IRQ handler
(see commit fdba608f15e2, "KVM: VMX: Wake vCPU when delivering posted IRQ
even if vCPU == this vCPU").

Eliding the posted interrupt restores the performance provided by the
combination of commits 379a3c8ee444 ("KVM: VMX: Optimize posted-interrupt
delivery for timer fastpath") and 26efe2fd92e5 ("KVM: VMX: Handle
preemption timer fastpath").


在kvm_vcpu_trigger_posted_interrupt()的修改.
-		apic->send_IPI_mask(get_cpu_mask(vcpu->cpu), pi_vec);
+		if (vcpu != kvm_get_running_vcpu())
+			apic->send_IPI_mask(get_cpu_mask(vcpu->cpu), pi_vec);


下面是apic timer fastpath的过程.

vcpu_enter_guest()
-> preempt_disable()
-> local_irq_disable();
-> vcpu->mode = IN_GUEST_MODE;
-> kvm_x86_sync_pir_to_irr
-> kvm_x86_run = vmx_vcpu_run()
   -> vmx_vcpu_enter_exit()
      -> __vmx_vcpu_run()
   -> vmx_exit_handlers_fastpath()
      -> EXIT_REASON_PREEMPTION_TIMER:handle_fastpath_preemption_timer()
         -> kvm_lapic_expired_hv_timer()
            -> apic_timer_expired()
               -> kvm_apic_inject_pending_timer_irqs()
                  -> kvm_apic_local_deliver()
                     -> __apic_accept_irq()
                        -> kvm_x86_deliver_posted_interrupt = vmx_deliver_posted_interrupt()
-> vcpu->mode = OUTSIDE_GUEST_MODE;
-> kvm_x86_handle_exit_irqoff
-> kvm_before_interrupt(vcpu);
-> local_irq_enable();
-> local_irq_disable();
-> kvm_after_interrupt(vcpu);
-> local_irq_enable();
-> preempt_enable();
