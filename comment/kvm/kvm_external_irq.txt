4.14上handle_external_intr()的例子.

[0] bnxt_rx_pages
[0] bnxt_rx_pkt
[0] __bnxt_poll_work
[0] bnxt_poll
[0] net_rx_action
[0] __softirqentry_text_start
[0] irq_exit
[0] do_IRQ
--- <IRQ stack> ---
[0] ret_from_intr
[0] vmx_handle_external_intr
[0] kvm_arch_vcpu_ioctl_run
[0] __dta_kvm_vcpu_ioctl
[0] do_vfs_ioctl
[0] sys_ioctl
[0] do_syscall_64
[0] entry_SYSCALL_64_after_hwframe

4.14对应line7998.

7994         vcpu->mode = OUTSIDE_GUEST_MODE;
7995         smp_wmb();
7996
7997         kvm_before_interrupt(vcpu);
7998         kvm_x86_ops->handle_external_intr(vcpu);
7999         kvm_after_interrupt(vcpu);
8000
8001         ++vcpu->stat.exits;
8002
8003         guest_exit_irqoff();
8004
8005         local_irq_enable();
8006         preempt_enable();


6.6应该是对应line 10827.

10816         vcpu->mode = OUTSIDE_GUEST_MODE;
10817         smp_wmb();
10818
10819         /*
10820          * Sync xfd before calling handle_exit_irqoff() which may
10821          * rely on the fact that guest_fpu::xfd is up-to-date (e.g.
10822          * in #NM irqoff handler).
10823          */
10824         if (vcpu->arch.xfd_no_write_intercept)
10825                 fpu_sync_guest_vmexit_xfd_state();
10826
10827         static_call(kvm_x86_handle_exit_irqoff)(vcpu);
10828
10829         if (vcpu->arch.guest_fpu.xfd_err)
10830                 wrmsrl(MSR_IA32_XFD_ERR, 0);
10831
10832         /*
10833          * Consume any pending interrupts, including the possible source of
10834          * VM-Exit on SVM and any ticks that occur between VM-Exit and now.
10835          * An instruction is required after local_irq_enable() to fully unblock
10836          * interrupts on processors that implement an interrupt shadow, the
10837          * stat.exits increment will do nicely.
10838          */
10839         kvm_before_interrupt(vcpu, KVM_HANDLING_IRQ);
10840         local_irq_enable();
10841         ++vcpu->stat.exits;
10842         local_irq_disable();
10843         kvm_after_interrupt(vcpu);
