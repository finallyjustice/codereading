SpectreV2.

根据Linux内核代码, 除非在whilelist列出NO_SPECULATION或NO_SPECTRE_V2,
否则都被X86_BUG_SPECTRE_V2影响.

1320 static void __init cpu_set_bug_bits(struct cpuinfo_x86 *c)
1321 {
1322         u64 x86_arch_cap_msr = x86_read_arch_cap_msr();
1323
1324         /* Set ITLB_MULTIHIT bug if cpu is not in the whitelist and not mitigated */
1325         if (!cpu_matches(cpu_vuln_whitelist, NO_ITLB_MULTIHIT) &&
1326             !(x86_arch_cap_msr & ARCH_CAP_PSCHANGE_MC_NO))
1327                 setup_force_cpu_bug(X86_BUG_ITLB_MULTIHIT);
1328
1329         if (cpu_matches(cpu_vuln_whitelist, NO_SPECULATION))
1330                 return;
1331
1332         setup_force_cpu_bug(X86_BUG_SPECTRE_V1);
1333
1334         if (!cpu_matches(cpu_vuln_whitelist, NO_SPECTRE_V2))
1335                 setup_force_cpu_bug(X86_BUG_SPECTRE_V2);


SpectrV2分为kernel和user.

# cat /sys/devices/system/cpu/vulnerabilities/spectre_v2 
Mitigation: Retpolines; IBPB: conditional; IBRS_FW; STIBP: conditional; RSB filling; PBRSB-eIBRS: Not affected; BHI: Not affected

[   19.426717] Spectre V1 : Mitigation: usercopy/swapgs barriers and __user pointer sanitization
[   19.427717] Spectre V2 : Mitigation: Retpolines
[   19.428714] Spectre V2 : Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch
[   19.429714] Spectre V2 : Spectre v2 / SpectreRSB : Filling RSB on VMEXIT
[   19.430714] Spectre V2 : Enabling Restricted Speculation for firmware calls
[   19.431716] Spectre V2 : mitigation: Enabling conditional Indirect Branch Prediction Barrier
[   19.432715] Spectre V2 : User space: Mitigation: STIBP via prctl

这是在比较新的机器上.

# cat /sys/devices/system/cpu/vulnerabilities/spectre_v2
Mitigation: Enhanced / Automatic IBRS; IBPB: conditional; RSB filling; PBRSB-eIBRS: SW sequence; BHI: SW loop, KVM: SW loop

[    3.674807] Spectre V1 : Mitigation: usercopy/swapgs barriers and __user pointer sanitization
[    3.675805] Spectre V2 : Spectre BHI mitigation: SW BHB clearing on vm exit
[    3.676802] Spectre V2 : Spectre BHI mitigation: SW BHB clearing on syscall
[    3.677802] Spectre V2 : Mitigation: Enhanced / Automatic IBRS
[    3.678802] Spectre V2 : Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch
[    3.679802] Spectre V2 : Spectre v2 / PBRSB-eIBRS: Retire a single CALL on VMEXIT
[    3.680804] Spectre V2 : mitigation: Enabling conditional Indirect Branch Prediction Barrier

当配置了"spectre_v2=eibrs,lfence"之后.

# cat /sys/devices/system/cpu/vulnerabilities/spectre_v2 
Mitigation: Enhanced / Automatic IBRS + LFENCE; IBPB: conditional; RSB filling; PBRSB-eIBRS: SW sequence; BHI: SW loop, KVM: SW loop

-----------------------

对于kernel的部分, 主要分为下面几种.

- Retpoline.
- Retpoline + LFENCE.
- EIBRS.
- EIBRS + Retpoline + LFENCE.
- EIBRS + Retpoline
- IBRS

1432 static const char * const spectre_v2_strings[] = {
1433         [SPECTRE_V2_NONE]                       = "Vulnerable",
1434         [SPECTRE_V2_RETPOLINE]                  = "Mitigation: Retpolines",
1435         [SPECTRE_V2_LFENCE]                     = "Mitigation: LFENCE",
1436         [SPECTRE_V2_EIBRS]                      = "Mitigation: Enhanced / Automatic IBRS",
1437         [SPECTRE_V2_EIBRS_LFENCE]               = "Mitigation: Enhanced / Automatic IBRS + LFENCE",
1438         [SPECTRE_V2_EIBRS_RETPOLINE]            = "Mitigation: Enhanced / Automatic IBRS + Retpolines",
1439         [SPECTRE_V2_IBRS]                       = "Mitigation: IBRS",
1440 };
1441 
1442 static const struct {
1443         const char *option;
1444         enum spectre_v2_mitigation_cmd cmd;
1445         bool secure;
1446 } mitigation_options[] __initconst = {
1447         { "off",                SPECTRE_V2_CMD_NONE,              false },
1448         { "on",                 SPECTRE_V2_CMD_FORCE,             true  },
1449         { "retpoline",          SPECTRE_V2_CMD_RETPOLINE,         false },
1450         { "retpoline,amd",      SPECTRE_V2_CMD_RETPOLINE_LFENCE,  false },
1451         { "retpoline,lfence",   SPECTRE_V2_CMD_RETPOLINE_LFENCE,  false },
1452         { "retpoline,generic",  SPECTRE_V2_CMD_RETPOLINE_GENERIC, false },
1453         { "eibrs",              SPECTRE_V2_CMD_EIBRS,             false },
1454         { "eibrs,lfence",       SPECTRE_V2_CMD_EIBRS_LFENCE,      false },
1455         { "eibrs,retpoline",    SPECTRE_V2_CMD_EIBRS_RETPOLINE,   false },
1456         { "auto",               SPECTRE_V2_CMD_AUTO,              false },
1457         { "ibrs",               SPECTRE_V2_CMD_IBRS,              false },
1458 };

对于user的部分, 主要分为下面几种.

1253 enum spectre_v2_user_cmd {
1254         SPECTRE_V2_USER_CMD_NONE,
1255         SPECTRE_V2_USER_CMD_AUTO,
1256         SPECTRE_V2_USER_CMD_FORCE,
1257         SPECTRE_V2_USER_CMD_PRCTL,
1258         SPECTRE_V2_USER_CMD_PRCTL_IBPB,
1259         SPECTRE_V2_USER_CMD_SECCOMP,
1260         SPECTRE_V2_USER_CMD_SECCOMP_IBPB,
1261 };
1262 
1263 static const char * const spectre_v2_user_strings[] = {
1264         [SPECTRE_V2_USER_NONE]                  = "User space: Vulnerable",
1265         [SPECTRE_V2_USER_STRICT]                = "User space: Mitigation: STIBP protection",
1266         [SPECTRE_V2_USER_STRICT_PREFERRED]      = "User space: Mitigation: STIBP always-on protection",
1267         [SPECTRE_V2_USER_PRCTL]                 = "User space: Mitigation: STIBP via prctl",
1268         [SPECTRE_V2_USER_SECCOMP]               = "User space: Mitigation: STIBP via seccomp and prctl",
1269 };
1270 
1271 static const struct {
1272         const char                      *option;
1273         enum spectre_v2_user_cmd        cmd;
1274         bool                            secure;
1275 } v2_user_options[] __initconst = {
1276         { "auto",               SPECTRE_V2_USER_CMD_AUTO,               false },
1277         { "off",                SPECTRE_V2_USER_CMD_NONE,               false },
1278         { "on",                 SPECTRE_V2_USER_CMD_FORCE,              true  },
1279         { "prctl",              SPECTRE_V2_USER_CMD_PRCTL,              false },
1280         { "prctl,ibpb",         SPECTRE_V2_USER_CMD_PRCTL_IBPB,         false },
1281         { "seccomp",            SPECTRE_V2_USER_CMD_SECCOMP,            false },
1282         { "seccomp,ibpb",       SPECTRE_V2_USER_CMD_SECCOMP_IBPB,       false },
1283 };

-----------------------
