

每个PMU都被一个struct pmu表示, 使用perf_pmu_register()注册, 加入&pmus链表.

arch/x86/events/core.c|2156| <<init_hw_perf_events>> err = perf_pmu_register(&pmu, "cpu", PERF_TYPE_RAW);
drivers/perf/arm_pmu.c|923| <<armpmu_register>> ret = perf_pmu_register(&pmu->pmu, pmu->name, -1);
kernel/events/core.c|10415| <<perf_tp_register>> perf_pmu_register(&perf_tracepoint, "tracepoint", PERF_TYPE_TRACEPOINT);
kernel/events/core.c|10417| <<perf_tp_register>> perf_pmu_register(&perf_kprobe, "kprobe", -1);
kernel/events/core.c|10420| <<perf_tp_register>> perf_pmu_register(&perf_uprobe, "uprobe", -1);
kernel/events/core.c|13762| <<perf_event_init>> perf_pmu_register(&perf_swevent, "software", PERF_TYPE_SOFTWARE);
kernel/events/core.c|13763| <<perf_event_init>> perf_pmu_register(&perf_cpu_clock, "cpu_clock", -1);
kernel/events/core.c|13764| <<perf_event_init>> perf_pmu_register(&perf_task_clock, "task_clock", -1);
kernel/events/hw_breakpoint.c|1020| <<init_hw_breakpoint>> perf_pmu_register(&perf_breakpoint, "breakpoint", PERF_TYPE_BREAKPOINT);


下面是arm的PMU的例子.

851 struct arm_pmu *armpmu_alloc(void)
852 {
853         struct arm_pmu *pmu;
854         int cpu;
855
856         pmu = kzalloc(sizeof(*pmu), GFP_KERNEL);
857         if (!pmu)
858                 goto out;
859
860         pmu->hw_events = alloc_percpu_gfp(struct pmu_hw_events, GFP_KERNEL);
861         if (!pmu->hw_events) {
862                 pr_info("failed to allocate per-cpu PMU data.\n");
863                 goto out_free_pmu;
864         }
865
866         pmu->pmu = (struct pmu) {
867                 .pmu_enable     = armpmu_enable,
868                 .pmu_disable    = armpmu_disable,
869                 .event_init     = armpmu_event_init,
870                 .add            = armpmu_add,
871                 .del            = armpmu_del,
872                 .start          = armpmu_start,
873                 .stop           = armpmu_stop,
874                 .read           = armpmu_read,
875                 .filter         = armpmu_filter,
876                 .attr_groups    = pmu->attr_groups,
877                 /*
878                  * This is a CPU PMU potentially in a heterogeneous
879                  * configuration (e.g. big.LITTLE) so
880                  * PERF_PMU_CAP_EXTENDED_HW_TYPE is required to open
881                  * PERF_TYPE_HARDWARE and PERF_TYPE_HW_CACHE events on a
882                  * specific PMU.
883                  */
884                 .capabilities   = PERF_PMU_CAP_EXTENDED_REGS |
885                                   PERF_PMU_CAP_EXTENDED_HW_TYPE,
886         };


下面是x86的PMU的例子.

2681 static struct pmu pmu = {
2682         .pmu_enable             = x86_pmu_enable,
2683         .pmu_disable            = x86_pmu_disable,
2684 
2685         .attr_groups            = x86_pmu_attr_groups,
2686 
2687         .event_init             = x86_pmu_event_init,
2688 
2689         .event_mapped           = x86_pmu_event_mapped,
2690         .event_unmapped         = x86_pmu_event_unmapped,
2691 
2692         .add                    = x86_pmu_add,
2693         .del                    = x86_pmu_del,
2694         .start                  = x86_pmu_start,
2695         .stop                   = x86_pmu_stop,
2696         .read                   = x86_pmu_read,
2697 
2698         .start_txn              = x86_pmu_start_txn,
2699         .cancel_txn             = x86_pmu_cancel_txn,
2700         .commit_txn             = x86_pmu_commit_txn,
2701 
2702         .event_idx              = x86_pmu_event_idx,
2703         .sched_task             = x86_pmu_sched_task,
2704         .swap_task_ctx          = x86_pmu_swap_task_ctx,
2705         .check_period           = x86_pmu_check_period,
2706 
2707         .aux_output_match       = x86_pmu_aux_output_match,
2708 
2709         .filter                 = x86_pmu_filter,
2710 };
