- spectre v1 (Bounds Check Bypass)
- spectre v2 (Branch Target Injection)
- spectre v3 (meltdown)
- spectre v4 (Speculative Store Bypass)
- Spectre-NG (Lazy FP State Restore)
- L1TF (L1 Terminal Fault speculative side channel)

=======================================================

多了两个MSR,IA32_SPEC_CTRL和IA32_PRED_CMD,IBRS和STIBP通过前一个MSR控制,IBPB通过后一个MSR控制.

IBRS和STIBP是一种control,IBPB是一种command,具体来说,就是IBRS和STIBP会有状态信息,而IBPB是一种瞬时值.

IBRS: Indirect Branch Restricted Speculation,一般情况下,在高权限
代码里面向IBRS的控制位写1,就能够保证indirect branch不被低权限时
候train出来的predictor影响,也能够防止逻辑处理器的影响(超线程的时
候).这里权限转换就是host user->host kernel, guest->host等等.可以
把IBRS理解成不同特权级之间的predictor隔离.IBRS不能防止同一个级别
的predictor共享,需要配合IBPB.IBRS也不能防止RSB的污染,需要在进入特
权级的时候情况RSB.

STIBP: Single thread indirect branch predictors, 超线程中,一个core
的逻辑处理器会共享一个indirect branch predictor,STIBP就是禁止这种
共享,防止一个逻辑处理器的predictor被另一个污染.STIBP是IBRS的一个子
集,所以一般开启了IBRS就不用开STIBP了.

IBPB: Indirect Branch Predictor Barrier (IBPB): IBPB类似于一个barrier,
在这之前的indirect branch predictor不会影响这之后的.

IBRS和IBPB可以结合起来一起作为spectre变种2的mitigation: IBRS用于防
止权限之间的predictor污染,IBPB用来阻止同一个权限下不同的实体之间的
predictor污染(比如应用程序之间或者虚拟机之间).


目前有两种方案来缓解Spectre漏洞,即硬件方案和软件方案.硬件方案就
是IBRS+IBPB,直接在硬件层面阻止投机执行(speculative execution),当然,
这会导致性能很低,所以IBRS没有进入内核.软件方案主要就是retpoline了,
因为性能影响较低,最终得以进入内核主线.

每次CPU在快执行间接跳转的时候,比如jmp [xxx], call, 会去询问
indirect branch predictor,然后投机选择一个最有可能执行的路径.
retpoline就是要绕过这个indirect branch predictor,使得CPU没有办法利用
其它人故意训练出来的分支路径.retpoline是"return"和"trampoline",也就是
在间接跳转的时候用return指令添加了一个垫子.


spectre v1的缓解,V1攻击高度依赖于特殊的代码片段(gadget).因此,简单有效
的软件解决方案就是插入一个barrier来阻止推测运行机制在这段特殊代码里面
执行.Barrier可以选用LFENCE指令.MFENCE同样可以.不过它的性能损失比LFENCE大.


meltdown的缓解,抵御Meltdown攻击最有效的方式就是KAISER/KPTI.KAISER/KPTI
方案中要求操作系统维护两个页表,一个页表给用户程序使用,一个给kernel自己
使用.并且确保程序所使用的页表不会映射高优先级的页面,即不会映射kernel的
页面.KAISER/KPTI方案最早提出时是为了侧信道攻击对内核地址随机化(KASLR)的
影响.该方案恰巧也可以用来抵御Meltdown攻击.两个页表的切换,会导致CR3的重
新加载,从而引起TLB刷新,进而降低内存的访问速度.如果某些应用场景需要大量
的内核和用户空间切换(两个页表之间的切换),会造成较高的性能开销.为了降低这
些性能开销,kernel需要使用充分的利用PCID特性,把TLB的刷新降低.


spectre v4 (Speculative Store Bypass) 通过microcode和Intel的SSBD来缓解.
No performance impact with default setting, 0-8% if SSBD enabled

Spectre V4 (Speculative Store Bypass)
Mitigaged by microcode update and SSBD provided by Intel
No performance impact with default setting, 0-8% if SSBD enabled


L1TF (L1 Terminal Fault speculative side channel)
Mitigated by different mitigation combined, such as PTE inversion,
 flush L1D, Guest confinement, Interrupt isolation, disable SMT
 In default setting, performance impact 0-5%, if SMT is disabled, 0-50%

* https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2018/03/24/retpoline
* http://happyseeker.github.io/kernel/2018/05/31/retpoline-in-kernel.html
* https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2018/03/07/spectre-mitigation
* https://paper.seebug.org/501/
* https://software.intel.com/security-software-guidance/api-app/sites/default/files/Retpoline-A-Branch-Target-Injection-Mitigation.pdf?source=techstories.org
* http://happyseeker.github.io/kernel/2018/05/31/about-spectre_v2-boot-parameters.html
* https://blog.csdn.net/wangwoshida/article/details/84753945
* https://www.usenix.org/sites/default/files/conference/protected-files/lisa18_slides_masters.pdf
