

https://waruto.top/posts/memory-ordering/

Sequentially Consistent

SeqCst是最强的顺序性保证,隐含了其他所有ordering.在这个原子访问之前和之后的数据
访问都仍然在它之前和之后,不能跨越这个点.

但是即使在强顺序的硬件上,使用SeqCst也会有额外开销,需要使用内存屏障.


Acquire-Release

Acquire和Release是作为一对来使用的.它的名字隐含了适用用例:加锁/释放锁.
acquire access保证在它之后的所有acess仍然在它之后,能读到在它之前的所有写入;
release保证在它之前的仍然在它之前,相当于在这个点,对外发布了它之前的数据访问.

当线程A release某个内存位置,线程B acquire这个内存位置,因果关系就产生了.
在A release前的所有write(普通访问和relaxed atomic)都会被B acquire之后的所有
操作读到.


Relaxed

Relaxed是最弱的,对于其他读写,没有同步或者顺序要求,无法形成happen-before关系.

Relaxed只保证原子性和修改顺序一致性(其他线程不一定读取到最新值,但读取到的值都是按照写入顺序的).

relaxed适合那些一定要发生,但并不在意其他线程看到什么值的操作,例如:多线程counter,
每次fetch_add;智能指针的引用计数counter(但是析构需要以release fetch_sub,
然后以acquire load或者直接fence,来读到引用计数的最新值).



acquire access保证在它之后的所有acess仍然在它之后,能读到在它之前的所有写入;

acquire!!!
access <<--
access <<--
access <<--
access <<--

release保证在它之前的仍然在它之前,相当于在这个点,对外发布了它之前的数据访问.


- in C11, sequentially consistent atomics (except for seqcst fences)
  only affect the ordering of sequentially consistent operations.
  In particular, since relaxed loads are done with LDR on ARM, they are
  not ordered against seqcst stores (which are done with STLR).

