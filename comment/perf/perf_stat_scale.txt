抓取perf stats的system call的例子.

sudo strace -ttf ./perf stat -C 1 -e cycles,cycles,cycles,cycles,cycles,cycles,cycles ~/perfbug 10000

1. 创建下面的event fds: 3, 4, 5, 7, 8, 9, 10.

[pid 899883] 20:17:39.328785 perf_event_open({type=PERF_TYPE_HARDWARE, size=0x88 /* PERF_ATTR_SIZE_??? */, config=PERF_COUNT_HW_CPU_CYCLES, sample_period=0, sample_type=PERF_SAMPLE_IDENTIFIER, read_format=PERF_FORMAT_TOTAL_TIME_ENABLED|PERF_FORMAT_TOTAL_TIME_RUNNING, disabled=1, inherit=1, precise_ip=0 /* arbitrary skid */, exclude_guest=1, ...}, -1, 1, -1, PERF_FLAG_FD_CLOEXEC) = 3
[pid 899883] 20:17:39.328869 perf_event_open({type=PERF_TYPE_HARDWARE, size=0x88 /* PERF_ATTR_SIZE_??? */, config=PERF_COUNT_HW_CPU_CYCLES, sample_period=0, sample_type=PERF_SAMPLE_IDENTIFIER, read_format=PERF_FORMAT_TOTAL_TIME_ENABLED|PERF_FORMAT_TOTAL_TIME_RUNNING, disabled=1, inherit=1, precise_ip=0 /* arbitrary skid */, exclude_guest=1, ...}, -1, 1, -1, PERF_FLAG_FD_CLOEXEC) = 4
[pid 899883] 20:17:39.328926 perf_event_open({type=PERF_TYPE_HARDWARE, size=0x88 /* PERF_ATTR_SIZE_??? */, config=PERF_COUNT_HW_CPU_CYCLES, sample_period=0, sample_type=PERF_SAMPLE_IDENTIFIER, read_format=PERF_FORMAT_TOTAL_TIME_ENABLED|PERF_FORMAT_TOTAL_TIME_RUNNING, disabled=1, inherit=1, precise_ip=0 /* arbitrary skid */, exclude_guest=1, ...}, -1, 1, -1, PERF_FLAG_FD_CLOEXEC) = 5
[pid 899883] 20:17:39.328981 perf_event_open({type=PERF_TYPE_HARDWARE, size=0x88 /* PERF_ATTR_SIZE_??? */, config=PERF_COUNT_HW_CPU_CYCLES, sample_period=0, sample_type=PERF_SAMPLE_IDENTIFIER, read_format=PERF_FORMAT_TOTAL_TIME_ENABLED|PERF_FORMAT_TOTAL_TIME_RUNNING, disabled=1, inherit=1, precise_ip=0 /* arbitrary skid */, exclude_guest=1, ...}, -1, 1, -1, PERF_FLAG_FD_CLOEXEC) = 7
[pid 899883] 20:17:39.329033 perf_event_open({type=PERF_TYPE_HARDWARE, size=0x88 /* PERF_ATTR_SIZE_??? */, config=PERF_COUNT_HW_CPU_CYCLES, sample_period=0, sample_type=PERF_SAMPLE_IDENTIFIER, read_format=PERF_FORMAT_TOTAL_TIME_ENABLED|PERF_FORMAT_TOTAL_TIME_RUNNING, disabled=1, inherit=1, precise_ip=0 /* arbitrary skid */, exclude_guest=1, ...}, -1, 1, -1, PERF_FLAG_FD_CLOEXEC) = 8
[pid 899883] 20:17:39.329086 perf_event_open({type=PERF_TYPE_HARDWARE, size=0x88 /* PERF_ATTR_SIZE_??? */, config=PERF_COUNT_HW_CPU_CYCLES, sample_period=0, sample_type=PERF_SAMPLE_IDENTIFIER, read_format=PERF_FORMAT_TOTAL_TIME_ENABLED|PERF_FORMAT_TOTAL_TIME_RUNNING, disabled=1, inherit=1, precise_ip=0 /* arbitrary skid */, exclude_guest=1, ...}, -1, 1, -1, PERF_FLAG_FD_CLOEXEC) = 9
[pid 899883] 20:17:39.329137 perf_event_open({type=PERF_TYPE_HARDWARE, size=0x88 /* PERF_ATTR_SIZE_??? */, config=PERF_COUNT_HW_CPU_CYCLES, sample_period=0, sample_type=PERF_SAMPLE_IDENTIFIER, read_format=PERF_FORMAT_TOTAL_TIME_ENABLED|PERF_FORMAT_TOTAL_TIME_RUNNING, disabled=1, inherit=1, precise_ip=0 /* arbitrary skid */, exclude_guest=1, ...}, -1, 1, -1, PERF_FLAG_FD_CLOEXEC) = 10

2. 激活counting: 为了7个event (只在一个CPU上, 因为-C 1)

[pid 899883] 20:17:39.329385 ioctl(3, PERF_EVENT_IOC_ENABLE, 0) = 0
[pid 899883] 20:17:39.329430 ioctl(4, PERF_EVENT_IOC_ENABLE, 0) = 0
[pid 899883] 20:17:39.329471 ioctl(5, PERF_EVENT_IOC_ENABLE, 0) = 0
[pid 899883] 20:17:39.329511 ioctl(7, PERF_EVENT_IOC_ENABLE, 0) = 0
[pid 899883] 20:17:39.329554 ioctl(8, PERF_EVENT_IOC_ENABLE, 0) = 0
[pid 899883] 20:17:39.329597 ioctl(9, PERF_EVENT_IOC_ENABLE, 0) = 0
[pid 899883] 20:17:39.329649 ioctl(10, PERF_EVENT_IOC_ENABLE, 0) = 0

3. 结束counting (userspace的程序结束了).

20:17:42.692546 ioctl(3, PERF_EVENT_IOC_DISABLE, 0) = 0
20:17:42.692584 ioctl(4, PERF_EVENT_IOC_DISABLE, 0) = 0
20:17:42.692619 ioctl(5, PERF_EVENT_IOC_DISABLE, 0) = 0
20:17:42.692671 ioctl(7, PERF_EVENT_IOC_DISABLE, 0) = 0
20:17:42.692705 ioctl(8, PERF_EVENT_IOC_DISABLE, 0) = 0
20:17:42.692731 ioctl(9, PERF_EVENT_IOC_DISABLE, 0) = 0
20:17:42.692755 ioctl(10, PERF_EVENT_IOC_DISABLE, 0) = 0

4. 从内核读取结果.

20:17:42.692914 read(3, "\0024\330\3\0\0\0\0B$u\310\0\0\0\0}\267\312\253\0\0\0\0", 24) = 24
20:17:42.692944 read(4, "\355=\321\3\0\0\0\0\2>u\310\0\0\0\0\346\206\311\253\0\0\0\0", 24) = 24
20:17:42.692968 read(5, "\342\312\330\3\0\0\0\0\313[u\310\0\0\0\0\325\201\331\253\0\0\0\0", 24) = 24
20:17:42.692994 read(7, "\252\247\326\3\0\0\0\0\t0u\310\0\0\0\0]\377\326\253\0\0\0\0", 24) = 24
20:17:42.693021 read(8, "n\6\330\3\0\0\0\0\360\23u\310\0\0\0\0fd\333\253\0\0\0\0", 24) = 24
20:17:42.693048 read(9, "{\245\316\3\0\0\0\0\274\335t\310\0\0\0\0w/\327\253\0\0\0\0", 24) = 24
20:17:42.693074 read(10, "\26^\322\3\0\0\0\0\225{t\310\0\0\0\0\245\371\311\253\0\0\0\0", 24) = 24


用户用perf_read_one()读取结果. 在内核中是一个数组. values[5].

values[0] : the counter value
values[1] : counter激活的总时长
values[2] : counter实际计数的时长(multiplexing)

6669 static const struct file_operations perf_fops = {
6670         .llseek                 = no_llseek,
6671         .release                = perf_release,
6672         .read                   = perf_read,
6673         .poll                   = perf_poll,
6674         .unlocked_ioctl         = perf_ioctl,
6675         .compat_ioctl           = perf_compat_ioctl,
6676         .mmap                   = perf_mmap,
6677         .fasync                 = perf_fasync,
6678 };

5609 static int perf_read_one(struct perf_event *event,
5610                                  u64 read_format, char __user *buf)
5611 {       
5612         u64 enabled, running;
5613         u64 values[5];
5614         int n = 0;
5615         
5616         values[n++] = __perf_event_read_value(event, &enabled, &running);
5617         if (read_format & PERF_FORMAT_TOTAL_TIME_ENABLED)
5618                 values[n++] = enabled;
5619         if (read_format & PERF_FORMAT_TOTAL_TIME_RUNNING)
5620                 values[n++] = running;
5621         if (read_format & PERF_FORMAT_ID)
5622                 values[n++] = primary_event_id(event);
5623         if (read_format & PERF_FORMAT_LOST)
5624                 values[n++] = atomic64_read(&event->lost_samples);
5625 
5626         if (copy_to_user(buf, values, n * sizeof(u64)))
5627                 return -EFAULT;
5628 
5629         return n * sizeof(u64);
5630 }


在用户用perf_counts_values__scale()进行乘法: count->val * count->ena / count->run.

540 void perf_counts_values__scale(struct perf_counts_values *count,
541                                bool scale, __s8 *pscaled)
542 {
543         s8 scaled = 0;
544
545         if (scale) {
546                 if (count->run == 0) {
547                         scaled = -1;
548                         count->val = 0;
549                 } else if (count->run < count->ena) {
550                         scaled = 1;
551                         count->val = (u64)((double)count->val * count->ena / count->run);
552                 }
553         }
554
555         if (pscaled)
556                 *pscaled = scaled;
557 }

下面是两个例子.

有multiplexing的时候, run是ena的85+%.所有结果要scale以下.

$ sudo ./perf stat -C 1 -e cycles,cycles,cycles,cycles,cycles,cycles,cycles ~/perfbug 10000
 10000000000
perf_evsel__read() buf.val=65718555, ena=3358872543, run=2878892162, id=0, lost=0
perf_evsel__read() buf.val=65664243, ena=3358872543, run=2878835926, id=0, lost=0
perf_evsel__read() buf.val=65534598, ena=3358873665, run=2878904935, id=0, lost=0
perf_evsel__read() buf.val=65742430, ena=3358874036, run=2878867475, id=0, lost=0
perf_evsel__read() buf.val=65191034, ena=3358873485, run=2878862949, id=0, lost=0
perf_evsel__read() buf.val=64160428, ena=3358872053, run=2879733186, id=0, lost=0
perf_evsel__read() buf.val=65568243, ena=3358868936, run=2879142333, id=0, lost=0

 Performance counter stats for 'CPU(s) 1':

        76,675,414      cycles                                                                  (85.71%)
        76,613,543      cycles                                                                  (85.71%)
        76,460,473      cycles                                                                  (85.71%)
        76,703,961      cycles                                                                  (85.71%)
        76,060,736      cycles                                                                  (85.71%)
        74,835,637      cycles                                                                  (85.74%)
        76,493,312      cycles                                                                  (85.72%)

       3.358864023 seconds time elapsed

没有multiplexing的使用, ena和run相等. 结果val和最终的output相等.

$ sudo ./perf stat -C 1 -e cycles,cycles,cycles,cycles,cycles,cycles ~/perfbug 10000
 10000000000
perf_evsel__read() buf.val=718763, ena=3356602112, run=3356602112, id=0, lost=0
perf_evsel__read() buf.val=722050, ena=3356604236, run=3356604236, id=0, lost=0
perf_evsel__read() buf.val=724352, ena=3356605579, run=3356605579, id=0, lost=0
perf_evsel__read() buf.val=724794, ena=3356605869, run=3356605869, id=0, lost=0
perf_evsel__read() buf.val=724448, ena=3356605489, run=3356605489, id=0, lost=0
perf_evsel__read() buf.val=723444, ena=3356604036, run=3356604036, id=0, lost=0

 Performance counter stats for 'CPU(s) 1':

           718,763      cycles
           722,050      cycles
           724,352      cycles
           724,794      cycles
           724,448      cycles
           723,444      cycles

       3.356604640 seconds time elapsed
