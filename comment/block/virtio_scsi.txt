virtio_scsi初始化的例子

-device virtio-scsi-pci,id=scsi0,num_queues=4 \
-device scsi-hd,drive=drive0,bus=scsi0.0,channel=0,scsi-id=0,lun=0 \
-drive file=boot.img,if=none,id=drive0 \
-device scsi-hd,drive=drive1,bus=scsi0.0,channel=0,scsi-id=0,lun=1  \
-drive file=test.img,if=none,id=drive1

一个target上2个lun

virtscsi_probe()
 -> scsi_add_host()
 -> scsi_scan_host()
     -> async_schedule(do_scan_async, data)

do_scan_async()
 -> do_scsi_scan_host()
     -> scsi_scan_host_selected() ==> 扫描所有的channel, target和lun
         -> scsi_scan_channel() ==> 调用1次, 因为shost->max_channel=0
             -> __scsi_scan_target() ==> 调用256次
                 -> scsi_alloc_target()
                 -> scsi_probe_and_add_lun() ==> 检测lun=0
		     -> scsi_alloc_sdev()
                        会分配并把request_queue放入tagset的tag_list
                        如果最终lun不存在会再被scsi_probe_and_add_lun()->__scsi_remove_device()移除
                     -> scsi_probe_lun()
	                 -> scsi_sysfs_add_sdev()
                             -> device_add()
                 -> scsi_report_lun_scan() ==> 检测剩下的lun, 上面scsi_probe_and_add_lun()失败就不执行这里了


总结上面, scan host的时候会为每一个lun分配一个struct scsi_device
还有request_queue, 链接入tagset的tag_set_list
然后add device

scsi定义了一条scsi busi_type: scsi_bus_type in drivers/scsi/scsi_sysfs.c

上面add的device会被sd的sd_probe()初始化
在sd_probe()分配gendisk和scsi_disk

下面是probe的stack

[0] blk_mq_add_queue_tag_set
[0] blk_mq_init_allocated_queue
[0] blk_mq_init_queue
[0] scsi_mq_alloc_queue
[0] scsi_alloc_sdev
[0] scsi_probe_and_add_lun
[0] __scsi_scan_target
[0] scsi_scan_channel
[0] scsi_scan_host_selected
[0] scsi_scan_host
[0] virtscsi_probe
[0] virtio_dev_probe
[0] really_probe
[0] driver_probe_device
[0] device_driver_attach
[0] __driver_attach
[0] bus_for_each_dev
[0] bus_add_driver
[0] driver_register
[0] init
[0] do_one_initcall
[0] kernel_init_freeable
[0] kernel_init
[0] ret_from_fork


下面是sd_probe()的stack

[0] sd_probe
[0] really_probe
[0] driver_probe_device
[0] device_driver_attach
[0] __driver_attach
[0] bus_for_each_dev
[0] bus_add_driver
[0] driver_register
[0] init_sd
[0] do_one_initcall
[0] kernel_init_freeable
[0] kernel_init
[0] ret_from_fork

sd_probe()
 -> alloc_disk() 分配gendisk
 -> async_schedule_domain(sd_probe_async, sdkp, &scsi_sd_probe_domain);
     -> sd_probe_async()
         -> gd->queue = sdkp->device->request_queue;
	 -> device_add_disk() 添加gendisk
        

[    0.676944] scsi host0: Virtio SCSI HBA
[    0.679662] scsi 0:0:0:0: Direct-Access     QEMU     QEMU HARDDISK    2.5+ PQ: 0 ANSI: 5
[    0.680782] scsi 0:0:0:1: Direct-Access     QEMU     QEMU HARDDISK    2.5+ PQ: 0 ANSI: 5
[    0.693429] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    0.694888] sd 0:0:0:1: Attached scsi generic sg1 type 0
[    0.700609] sd 0:0:0:0: [sda] Attached SCSI disk
[    0.702835] sd 0:0:0:1: [sdb] Attached SCSI disk


=============================================================

[0] scsi_probe_lun
[0] scsi_probe_and_add_lun
[0] __scsi_scan_target
[0] scsi_scan_channel
[0] scsi_scan_host_selected
[0] scsi_scan_host
[0] virtscsi_probe
[0] virtio_dev_probe
[0] really_probe
[0] driver_probe_device
[0] device_driver_attach
[0] __driver_attach
[0] bus_for_each_dev
[0] bus_add_driver
[0] driver_register
[0] init
[0] do_one_initcall
[0] kernel_init_freeable
[0] kernel_init
[0] ret_from_fork

scsi_probe_lun()会准备command.

unsigned char scsi_cmd[MAX_COMMAND_SIZE]; --> MAX_COMMAND_SIZE=16
scsi_cmd[0] = INQUIRY;
scsi_cmd[4] = (unsigned char) try_inquiry_len;


scsi_request(其实是scsi_cmnd)是request的pdu.

在__scsi_execute()调用:
rq->cmd_len = COMMAND_SIZE(cmd[0]);
memcpy(rq->cmd, cmd, rq->cmd_len);


在scsi_setup_scsi_cmnd()设置
cmd->cmd_len = scsi_req(req)->cmd_len;
cmd->cmnd = scsi_req(req)->cmd


在virtio-scsi的queuecommand里调用
memcpy(cmd->req.cmd.cdb, sc->cmnd, sc->cmd_len);


vhost-scsi不处理INQUIRY, 而是直接转给targetcli.
其实vhost-scsi更像是把targetcli passthrough给VM.


---------------------------------------

关于vhost, 每个vhost_dev有一个kthread (而不是每个vhost_virtqueue有一个kthread)

vhost-net是每个vhost_dev有rx/tx queue.

vhost-scsi是所有的queue共享一个vhost_dev.
