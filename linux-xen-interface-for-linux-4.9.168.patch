From 47aa531940f7d7ca2a65a4a8c464082b2ea8c8d5 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Sun, 14 Apr 2019 20:56:32 +0800
Subject: [PATCH 1/1] linux-xen-interface-for-linux-4.9.168

xen specific interface linux-4.9.168

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/xen/irq.c                 | 53 ++++++++++++++++++++++++++++++++++++++
 arch/x86/xen/platform-pci-unplug.c |  5 ++++
 arch/x86/xen/xen-asm_64.S          |  4 +++
 3 files changed, 62 insertions(+)

diff --git a/arch/x86/xen/irq.c b/arch/x86/xen/irq.c
index 33e9295..16a041f 100644
--- a/arch/x86/xen/irq.c
+++ b/arch/x86/xen/irq.c
@@ -18,11 +18,22 @@
  * callback mask. We do this in a very simple manner, by making a call
  * down into Xen. The pending flag will be checked by Xen on return.
  */
+/*
+ * called by:
+ *   - arch/x86/xen/irq.c|59| <<xen_restore_fl>> xen_force_evtchn_callback();
+ *   - arch/x86/xen/irq.c|96| <<xen_irq_enable>> xen_force_evtchn_callback();
+ */
 void xen_force_evtchn_callback(void)
 {
 	(void)HYPERVISOR_xen_version(0, NULL);
 }
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|763| <<arch_local_save_flags>> return PVOP_CALLEE0(unsigned long , pv_irq_ops.save_fl);
+ *
+ * struct pv_irq_ops xen_irq_ops.save_fl = xen_save_fl()
+ */
 asmlinkage __visible unsigned long xen_save_fl(void)
 {
 	struct vcpu_info *vcpu;
@@ -41,6 +52,12 @@ asmlinkage __visible unsigned long xen_save_fl(void)
 }
 PV_CALLEE_SAVE_REGS_THUNK(xen_save_fl);
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|768| <<arch_local_irq_restore>> PVOP_VCALLEE1(pv_irq_ops.restore_fl, f);
+ *
+ * struct pv_irq_ops xen_irq_ops.restore_fl = xen_restore_fl()
+ */
 __visible void xen_restore_fl(unsigned long flags)
 {
 	struct vcpu_info *vcpu;
@@ -63,6 +80,12 @@ __visible void xen_restore_fl(unsigned long flags)
 }
 PV_CALLEE_SAVE_REGS_THUNK(xen_restore_fl);
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|773| <<arch_local_irq_disable>> PVOP_VCALLEE0(pv_irq_ops.irq_disable);
+ *
+ * struct pv_irq_ops xen_irq_ops.irq_disable = xen_irq_disable()
+ */
 asmlinkage __visible void xen_irq_disable(void)
 {
 	/* There's a one instruction preempt window here.  We need to
@@ -74,6 +97,12 @@ asmlinkage __visible void xen_irq_disable(void)
 }
 PV_CALLEE_SAVE_REGS_THUNK(xen_irq_disable);
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|778| <<arch_local_irq_enable>> PVOP_VCALLEE0(pv_irq_ops.irq_enable);
+ *
+ * struct pv_irq_ops xen_irq_ops.irq_enable = xen_irq_enable()
+ */
 asmlinkage __visible void xen_irq_enable(void)
 {
 	struct vcpu_info *vcpu;
@@ -99,6 +128,12 @@ asmlinkage __visible void xen_irq_enable(void)
 }
 PV_CALLEE_SAVE_REGS_THUNK(xen_irq_enable);
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|104| <<arch_safe_halt>> PVOP_VCALL0(pv_irq_ops.safe_halt);
+ *
+ * struct pv_irq_ops xen_irq_ops.safe_halt = xen_safe_halt()
+ */
 static void xen_safe_halt(void)
 {
 	/* Blocking includes an implicit local_irq_enable(). */
@@ -106,6 +141,12 @@ static void xen_safe_halt(void)
 		BUG();
 }
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|109| <<halt>> PVOP_VCALL0(pv_irq_ops.halt);
+ *
+ * struct pv_irq_ops xen_irq_ops.halt = xen_halt()
+ */
 static void xen_halt(void)
 {
 	if (irqs_disabled())
@@ -115,6 +156,10 @@ static void xen_halt(void)
 		xen_safe_halt();
 }
 
+/*
+ * used only by这个文件本身:
+ *   - arch/x86/xen/irq.c|166| <<xen_init_irq_ops>> pv_irq_ops = xen_irq_ops;
+ */
 static const struct pv_irq_ops xen_irq_ops __initconst = {
 	.save_fl = PV_CALLEE_SAVE(xen_save_fl),
 	.restore_fl = PV_CALLEE_SAVE(xen_restore_fl),
@@ -124,12 +169,20 @@ static const struct pv_irq_ops xen_irq_ops __initconst = {
 	.safe_halt = xen_safe_halt,
 	.halt = xen_halt,
 #ifdef CONFIG_X86_64
+	/* 在arch/x86/xen/xen-asm_64.S中定义 */
 	.adjust_exception_frame = xen_adjust_exception_frame,
 #endif
 };
 
+/*
+ * called by only:
+ *   - arch/x86/xen/enlighten.c|1642| <<xen_start_kernel>> xen_init_irq_ops();
+ */
 void __init xen_init_irq_ops(void)
 {
+	/*
+	 * xen_irq_ops的定义就在上面
+	 */
 	/* For PVH we use default pv_irq_ops settings. */
 	if (!xen_feature(XENFEAT_hvm_callback_vector))
 		pv_irq_ops = xen_irq_ops;
diff --git a/arch/x86/xen/platform-pci-unplug.c b/arch/x86/xen/platform-pci-unplug.c
index 90d1b83..290eb7f 100644
--- a/arch/x86/xen/platform-pci-unplug.c
+++ b/arch/x86/xen/platform-pci-unplug.c
@@ -142,6 +142,11 @@ bool xen_has_pv_and_legacy_disk_devices(void)
 }
 EXPORT_SYMBOL_GPL(xen_has_pv_and_legacy_disk_devices);
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten.c|1948| <<xen_hvm_guest_init>> xen_unplug_emulated_devices();
+ *   - arch/x86/xen/suspend.c|43| <<xen_hvm_post_suspend>> xen_unplug_emulated_devices();
+ */
 void xen_unplug_emulated_devices(void)
 {
 	int r;
diff --git a/arch/x86/xen/xen-asm_64.S b/arch/x86/xen/xen-asm_64.S
index c3df431..769269c 100644
--- a/arch/x86/xen/xen-asm_64.S
+++ b/arch/x86/xen/xen-asm_64.S
@@ -22,6 +22,10 @@
 
 #include "xen-asm.h"
 
+/*
+ * 在arch/x86/xen/irq.c中:
+ * struct pv_irq_ops xen_irq_ops.adjust_eception_frame = xen_adjust_exception_frame()
+ */
 ENTRY(xen_adjust_exception_frame)
 	mov 8+0(%rsp), %rcx
 	mov 8+8(%rsp), %r11
-- 
2.7.4

