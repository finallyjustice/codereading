From 926c551edebf307f270fa5ecd52d35df5ff1815d Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Wed, 17 Apr 2019 11:03:42 +0800
Subject: [PATCH 1/1] linux-xen-interface-for-linux-4.9.168

xen specific interface linux-4.9.168

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/xen/irq.c                  | 53 ++++++++++++++++++++
 arch/x86/xen/platform-pci-unplug.c  |  5 ++
 arch/x86/xen/xen-asm_64.S           |  4 ++
 drivers/block/xen-blkback/blkback.c | 99 +++++++++++++++++++++++++++++++++++++
 drivers/block/xen-blkback/common.h  | 25 ++++++++++
 drivers/block/xen-blkfront.c        | 60 ++++++++++++++++++++++
 drivers/xen/xenbus/xenbus_probe.c   | 17 +++++++
 7 files changed, 263 insertions(+)

diff --git a/arch/x86/xen/irq.c b/arch/x86/xen/irq.c
index 33e9295..16a041f 100644
--- a/arch/x86/xen/irq.c
+++ b/arch/x86/xen/irq.c
@@ -18,11 +18,22 @@
  * callback mask. We do this in a very simple manner, by making a call
  * down into Xen. The pending flag will be checked by Xen on return.
  */
+/*
+ * called by:
+ *   - arch/x86/xen/irq.c|59| <<xen_restore_fl>> xen_force_evtchn_callback();
+ *   - arch/x86/xen/irq.c|96| <<xen_irq_enable>> xen_force_evtchn_callback();
+ */
 void xen_force_evtchn_callback(void)
 {
 	(void)HYPERVISOR_xen_version(0, NULL);
 }
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|763| <<arch_local_save_flags>> return PVOP_CALLEE0(unsigned long , pv_irq_ops.save_fl);
+ *
+ * struct pv_irq_ops xen_irq_ops.save_fl = xen_save_fl()
+ */
 asmlinkage __visible unsigned long xen_save_fl(void)
 {
 	struct vcpu_info *vcpu;
@@ -41,6 +52,12 @@ asmlinkage __visible unsigned long xen_save_fl(void)
 }
 PV_CALLEE_SAVE_REGS_THUNK(xen_save_fl);
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|768| <<arch_local_irq_restore>> PVOP_VCALLEE1(pv_irq_ops.restore_fl, f);
+ *
+ * struct pv_irq_ops xen_irq_ops.restore_fl = xen_restore_fl()
+ */
 __visible void xen_restore_fl(unsigned long flags)
 {
 	struct vcpu_info *vcpu;
@@ -63,6 +80,12 @@ __visible void xen_restore_fl(unsigned long flags)
 }
 PV_CALLEE_SAVE_REGS_THUNK(xen_restore_fl);
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|773| <<arch_local_irq_disable>> PVOP_VCALLEE0(pv_irq_ops.irq_disable);
+ *
+ * struct pv_irq_ops xen_irq_ops.irq_disable = xen_irq_disable()
+ */
 asmlinkage __visible void xen_irq_disable(void)
 {
 	/* There's a one instruction preempt window here.  We need to
@@ -74,6 +97,12 @@ asmlinkage __visible void xen_irq_disable(void)
 }
 PV_CALLEE_SAVE_REGS_THUNK(xen_irq_disable);
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|778| <<arch_local_irq_enable>> PVOP_VCALLEE0(pv_irq_ops.irq_enable);
+ *
+ * struct pv_irq_ops xen_irq_ops.irq_enable = xen_irq_enable()
+ */
 asmlinkage __visible void xen_irq_enable(void)
 {
 	struct vcpu_info *vcpu;
@@ -99,6 +128,12 @@ asmlinkage __visible void xen_irq_enable(void)
 }
 PV_CALLEE_SAVE_REGS_THUNK(xen_irq_enable);
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|104| <<arch_safe_halt>> PVOP_VCALL0(pv_irq_ops.safe_halt);
+ *
+ * struct pv_irq_ops xen_irq_ops.safe_halt = xen_safe_halt()
+ */
 static void xen_safe_halt(void)
 {
 	/* Blocking includes an implicit local_irq_enable(). */
@@ -106,6 +141,12 @@ static void xen_safe_halt(void)
 		BUG();
 }
 
+/*
+ * called by:
+ *   - arch/x86/include/asm/paravirt.h|109| <<halt>> PVOP_VCALL0(pv_irq_ops.halt);
+ *
+ * struct pv_irq_ops xen_irq_ops.halt = xen_halt()
+ */
 static void xen_halt(void)
 {
 	if (irqs_disabled())
@@ -115,6 +156,10 @@ static void xen_halt(void)
 		xen_safe_halt();
 }
 
+/*
+ * used only by这个文件本身:
+ *   - arch/x86/xen/irq.c|166| <<xen_init_irq_ops>> pv_irq_ops = xen_irq_ops;
+ */
 static const struct pv_irq_ops xen_irq_ops __initconst = {
 	.save_fl = PV_CALLEE_SAVE(xen_save_fl),
 	.restore_fl = PV_CALLEE_SAVE(xen_restore_fl),
@@ -124,12 +169,20 @@ static const struct pv_irq_ops xen_irq_ops __initconst = {
 	.safe_halt = xen_safe_halt,
 	.halt = xen_halt,
 #ifdef CONFIG_X86_64
+	/* 在arch/x86/xen/xen-asm_64.S中定义 */
 	.adjust_exception_frame = xen_adjust_exception_frame,
 #endif
 };
 
+/*
+ * called by only:
+ *   - arch/x86/xen/enlighten.c|1642| <<xen_start_kernel>> xen_init_irq_ops();
+ */
 void __init xen_init_irq_ops(void)
 {
+	/*
+	 * xen_irq_ops的定义就在上面
+	 */
 	/* For PVH we use default pv_irq_ops settings. */
 	if (!xen_feature(XENFEAT_hvm_callback_vector))
 		pv_irq_ops = xen_irq_ops;
diff --git a/arch/x86/xen/platform-pci-unplug.c b/arch/x86/xen/platform-pci-unplug.c
index 90d1b83..290eb7f 100644
--- a/arch/x86/xen/platform-pci-unplug.c
+++ b/arch/x86/xen/platform-pci-unplug.c
@@ -142,6 +142,11 @@ bool xen_has_pv_and_legacy_disk_devices(void)
 }
 EXPORT_SYMBOL_GPL(xen_has_pv_and_legacy_disk_devices);
 
+/*
+ * called by:
+ *   - arch/x86/xen/enlighten.c|1948| <<xen_hvm_guest_init>> xen_unplug_emulated_devices();
+ *   - arch/x86/xen/suspend.c|43| <<xen_hvm_post_suspend>> xen_unplug_emulated_devices();
+ */
 void xen_unplug_emulated_devices(void)
 {
 	int r;
diff --git a/arch/x86/xen/xen-asm_64.S b/arch/x86/xen/xen-asm_64.S
index c3df431..769269c 100644
--- a/arch/x86/xen/xen-asm_64.S
+++ b/arch/x86/xen/xen-asm_64.S
@@ -22,6 +22,10 @@
 
 #include "xen-asm.h"
 
+/*
+ * 在arch/x86/xen/irq.c中:
+ * struct pv_irq_ops xen_irq_ops.adjust_eception_frame = xen_adjust_exception_frame()
+ */
 ENTRY(xen_adjust_exception_frame)
 	mov 8+0(%rsp), %rcx
 	mov 8+8(%rsp), %r11
diff --git a/drivers/block/xen-blkback/blkback.c b/drivers/block/xen-blkback/blkback.c
index d6eaaa2..c2d9578 100644
--- a/drivers/block/xen-blkback/blkback.c
+++ b/drivers/block/xen-blkback/blkback.c
@@ -155,6 +155,11 @@ static inline void put_free_pages(struct xen_blkif_ring *ring, struct page **pag
 	spin_unlock_irqrestore(&ring->free_pages_lock, flags);
 }
 
+/*
+ * called by:
+ *   - drivers/block/xen-blkback/blkback.c|653| <<xen_blkif_schedule>> shrink_free_pagepool(ring, xen_blkif_max_buffer_pages);
+ *   - drivers/block/xen-blkback/blkback.c|694| <<xen_blkbk_free_caches>> shrink_free_pagepool(ring, 0 );
+ */
 static inline void shrink_free_pagepool(struct xen_blkif_ring *ring, int num)
 {
 	/* Remove requested pages in batches of NUM_BATCH_FREE_PAGES */
@@ -208,6 +213,21 @@ static void make_response(struct xen_blkif_ring *ring, u64 id,
  * bit operations to modify the flags of a persistent grant and to count
  * the number of used grants.
  */
+/*
+ * xen_blkif_schedule()
+ *  -> do_block_io_op()
+ *      -> __do_block_io_op()
+ *          -> dispatch_rw_block_io()
+ *              -> xen_blkbk_map_seg
+ *		    -> xen_blkbk_map()
+ *                      -> add_persistent_gnt()
+ *              -> xen_blkbk_parse_indirect()
+ *                  -> xen_blkbk_map()
+ *                      -> add_persistent_gnt()
+ *
+ * called by only:
+ *   - drivers/block/xen-blkback/blkback.c|908| <<xen_blkbk_map>> if (add_persistent_gnt(ring,
+ */
 static int add_persistent_gnt(struct xen_blkif_ring *ring,
 			       struct persistent_gnt *persistent_gnt)
 {
@@ -215,6 +235,9 @@ static int add_persistent_gnt(struct xen_blkif_ring *ring,
 	struct persistent_gnt *this;
 	struct xen_blkif *blkif = ring->blkif;
 
+	/*
+	 * 超过了默认1056个就不能添加了
+	 */
 	if (ring->persistent_gnt_c >= xen_blkif_max_pgrants) {
 		if (!blkif->vbd.overflow_max_grants)
 			blkif->vbd.overflow_max_grants = 1;
@@ -240,6 +263,17 @@ static int add_persistent_gnt(struct xen_blkif_ring *ring,
 	set_bit(PERSISTENT_GNT_ACTIVE, persistent_gnt->flags);
 	/* Add new node and rebalance tree. */
 	rb_link_node(&(persistent_gnt->node), parent, new);
+	/*
+	 * ring->persistent_gnts在以下使用:
+	 *   - drivers/block/xen-blkback/blkback.c|224| <<add_persistent_gnt>> new = &ring->persistent_gnts.rb_node;
+	 *   - drivers/block/xen-blkback/blkback.c|243| <<add_persistent_gnt>> rb_insert_color(&(persistent_gnt->node), &ring->persistent_gnts);
+	 *   - drivers/block/xen-blkback/blkback.c|255| <<get_persistent_gnt>> node = ring->persistent_gnts.rb_node;
+	 *   - drivers/block/xen-blkback/blkback.c|409| <<purge_persistent_gnt>> root = &ring->persistent_gnts;
+	 *   - drivers/block/xen-blkback/blkback.c|676| <<xen_blkbk_free_caches>> if (!RB_EMPTY_ROOT(&ring->persistent_gnts))
+	 *   - drivers/block/xen-blkback/blkback.c|677| <<xen_blkbk_free_caches>> free_persistent_gnts(ring, &ring->persistent_gnts,
+	 *   - drivers/block/xen-blkback/blkback.c|680| <<xen_blkbk_free_caches>> BUG_ON(!RB_EMPTY_ROOT(&ring->persistent_gnts));
+	 *   - drivers/block/xen-blkback/xenbus.c|296| <<xen_blkif_disconnect>> BUG_ON(!RB_EMPTY_ROOT(&ring->persistent_gnts));
+	 */
 	rb_insert_color(&(persistent_gnt->node), &ring->persistent_gnts);
 	ring->persistent_gnt_c++;
 	atomic_inc(&ring->persistent_gnt_in_use);
@@ -283,6 +317,14 @@ static void put_persistent_gnt(struct xen_blkif_ring *ring,
 	atomic_dec(&ring->persistent_gnt_in_use);
 }
 
+/*
+ * called by only:
+ *   - drivers/block/xen-blkback/blkback.c|734| <<xen_blkbk_free_caches>> free_persistent_gnts(ring, &ring->persistent_gnts,
+ *
+ * 因为植被xen_blkbk_free_caches()调用, 进来的时候:
+ *   root是&ring->persistent_gnts
+ *   num是ring->persistent_gnt_c
+ */
 static void free_persistent_gnts(struct xen_blkif_ring *ring, struct rb_root *root,
                                  unsigned int num)
 {
@@ -300,6 +342,9 @@ static void free_persistent_gnts(struct xen_blkif_ring *ring, struct rb_root *ro
 	foreach_grant_safe(persistent_gnt, n, root, node) {
 		BUG_ON(persistent_gnt->handle ==
 			BLKBACK_INVALID_HANDLE);
+		/*
+		 * 这里只用handle, 不用grant ref!
+		 */
 		gnttab_set_unmap_op(&unmap[segs_to_unmap],
 			(unsigned long) pfn_to_kaddr(page_to_pfn(
 				persistent_gnt->page)),
@@ -325,6 +370,17 @@ static void free_persistent_gnts(struct xen_blkif_ring *ring, struct rb_root *ro
 	BUG_ON(num != 0);
 }
 
+/*
+ * used by:
+ *   - drivers/block/xen-blkback/xenbus.c|153| <<xen_blkif_alloc_rings>> INIT_WORK(&ring->persistent_purge_work, xen_blkbk_unmap_purged_grants);
+ *
+ * ring->persistent_purge_work在以下被使用:
+ *   - drivers/block/xen-blkback/blkback.c|368| <<xen_blkbk_unmap_purged_grants>> struct xen_blkif_ring *ring = container_of(work, typeof(*ring), persistent_purge_work);
+ *   - drivers/block/xen-blkback/blkback.c|417| <<purge_persistent_gnt>> if (work_busy(&ring->persistent_purge_work)) {
+ *   - drivers/block/xen-blkback/blkback.c|487| <<purge_persistent_gnt>> schedule_work(&ring->persistent_purge_work);
+ *   - drivers/block/xen-blkback/blkback.c|694| <<xen_blkif_schedule>> flush_work(&ring->persistent_purge_work);
+ *   - drivers/block/xen-blkback/xenbus.c|153| <<xen_blkif_alloc_rings>> INIT_WORK(&ring->persistent_purge_work, xen_blkbk_unmap_purged_grants);
+ */
 void xen_blkbk_unmap_purged_grants(struct work_struct *work)
 {
 	struct gnttab_unmap_grant_ref unmap[BLKIF_MAX_SEGMENTS_PER_REQUEST];
@@ -657,6 +713,14 @@ int xen_blkif_schedule(void *arg)
 	}
 
 	/* Drain pending purge work */
+	/*
+	 * ring->persistent_purge_work在以下使用:
+	 *   - drivers/block/xen-blkback/blkback.c|368| <<xen_blkbk_unmap_purged_grants>> struct xen_blkif_ring *ring = container_of(work, typeof(*ring), persistent_purge_work);
+	 *   - drivers/block/xen-blkback/blkback.c|417| <<purge_persistent_gnt>> if (work_busy(&ring->persistent_purge_work)) {
+	 *   - drivers/block/xen-blkback/blkback.c|487| <<purge_persistent_gnt>> schedule_work(&ring->persistent_purge_work);
+	 *   - drivers/block/xen-blkback/blkback.c|694| <<xen_blkif_schedule>> flush_work(&ring->persistent_purge_work);
+	 *   - drivers/block/xen-blkback/xenbus.c|153| <<xen_blkif_alloc_rings>> INIT_WORK(&ring->persistent_purge_work, xen_blkbk_unmap_purged_grants);
+	 */
 	flush_work(&ring->persistent_purge_work);
 
 	if (log_stats)
@@ -670,6 +734,10 @@ int xen_blkif_schedule(void *arg)
 /*
  * Remove persistent grants and empty the pool of free pages
  */
+/*
+ * 只在以下调用:
+ *   - drivers/block/xen-blkback/xenbus.c|278| <<xen_blkif_disconnect>> xen_blkbk_free_caches(ring);
+ */
 void xen_blkbk_free_caches(struct xen_blkif_ring *ring)
 {
 	/* Free all persistent grant pages */
@@ -678,6 +746,12 @@ void xen_blkbk_free_caches(struct xen_blkif_ring *ring)
 			ring->persistent_gnt_c);
 
 	BUG_ON(!RB_EMPTY_ROOT(&ring->persistent_gnts));
+	/*
+	 * 修改的地方:
+	 *   - drivers/block/xen-blkback/blkback.c|244| <<add_persistent_gnt>> ring->persistent_gnt_c++;
+	 *   - drivers/block/xen-blkback/blkback.c|449| <<purge_persistent_gnt>> ring->persistent_gnt_c -= (total - num_clean);
+	 *   - drivers/block/xen-blkback/blkback.c|681| <<xen_blkbk_free_caches>> ring->persistent_gnt_c = 0;
+	 */
 	ring->persistent_gnt_c = 0;
 
 	/* Since we are shutting down remove all pages from the buffer */
@@ -794,6 +868,11 @@ static void xen_blkbk_unmap(struct xen_blkif_ring *ring,
 	}
 }
 
+/*
+ * called by:
+ *   - drivers/block/xen-blkback/blkback.c|958| <<xen_blkbk_map_seg>> rc = xen_blkbk_map(pending_req->ring, pending_req->segments,
+ *   - drivers/block/xen-blkback/blkback.c|982| <<xen_blkbk_parse_indirect>> rc = xen_blkbk_map(ring, pages, indirect_grefs, true);
+ */
 static int xen_blkbk_map(struct xen_blkif_ring *ring,
 			 struct grant_page *pages[],
 			 int num, bool ro)
@@ -932,6 +1011,10 @@ static int xen_blkbk_map(struct xen_blkif_ring *ring,
 	return -ENOMEM;
 }
 
+/*
+ * called by only:
+ *   - drivers/block/xen-blkback/blkback.c|1364| <<dispatch_rw_block_io>> if (xen_blkbk_map_seg(pending_req))
+ */
 static int xen_blkbk_map_seg(struct pending_req *pending_req)
 {
 	int rc;
@@ -943,6 +1026,10 @@ static int xen_blkbk_map_seg(struct pending_req *pending_req)
 	return rc;
 }
 
+/*
+ * called by only:
+ *   - drivers/block/xen-blkback/blkback.c|1326| <<dispatch_rw_block_io>> if (xen_blkbk_parse_indirect(req, pending_req, seg, &preq))
+ */
 static int xen_blkbk_parse_indirect(struct blkif_request *req,
 				    struct pending_req *pending_req,
 				    struct seg_buf seg[],
@@ -1114,6 +1201,10 @@ static void end_block_io_op(struct bio *bio)
  * (which has the sectors we want, number of them, grant references, etc),
  * and transmute  it to the block API to hand it over to the proper block disk.
  */
+/*
+ * called by only:
+ *   - drivers/block/xen-blkback/blkback.c|1237| <<do_block_io_op>> more_to_do = __do_block_io_op(ring);
+ */
 static int
 __do_block_io_op(struct xen_blkif_ring *ring)
 {
@@ -1195,6 +1286,10 @@ __do_block_io_op(struct xen_blkif_ring *ring)
 	return more_to_do;
 }
 
+/*
+ * called by:
+ *   - drivers/block/xen-blkback/blkback.c|647| <<xen_blkif_schedule>> ret = do_block_io_op(ring);
+ */
 static int
 do_block_io_op(struct xen_blkif_ring *ring)
 {
@@ -1215,6 +1310,10 @@ do_block_io_op(struct xen_blkif_ring *ring)
  * Transmutation of the 'struct blkif_request' to a proper 'struct bio'
  * and call the 'submit_bio' to pass it to the underlying storage.
  */
+/*
+ * called by only:
+ *   - drivers/block/xen-blkback/blkback.c|1196| <<__do_block_io_op>> if (dispatch_rw_block_io(ring, &req, pending_req))
+ */
 static int dispatch_rw_block_io(struct xen_blkif_ring *ring,
 				struct blkif_request *req,
 				struct pending_req *pending_req)
diff --git a/drivers/block/xen-blkback/common.h b/drivers/block/xen-blkback/common.h
index ecb35fe..4073c5f 100644
--- a/drivers/block/xen-blkback/common.h
+++ b/drivers/block/xen-blkback/common.h
@@ -279,7 +279,24 @@ struct xen_blkif_ring {
 
 	/* Tree to store persistent grants. */
 	spinlock_t		pers_gnts_lock;
+	/*
+	 * used by:
+	 *   - drivers/block/xen-blkback/blkback.c|224| <<add_persistent_gnt>> new = &ring->persistent_gnts.rb_node;
+	 *   - drivers/block/xen-blkback/blkback.c|243| <<add_persistent_gnt>> rb_insert_color(&(persistent_gnt->node), &ring->persistent_gnts);
+	 *   - drivers/block/xen-blkback/blkback.c|255| <<get_persistent_gnt>> node = ring->persistent_gnts.rb_node;
+	 *   - drivers/block/xen-blkback/blkback.c|409| <<purge_persistent_gnt>> root = &ring->persistent_gnts;
+	 *   - drivers/block/xen-blkback/blkback.c|676| <<xen_blkbk_free_caches>> if (!RB_EMPTY_ROOT(&ring->persistent_gnts))
+	 *   - drivers/block/xen-blkback/blkback.c|677| <<xen_blkbk_free_caches>> free_persistent_gnts(ring, &ring->persistent_gnts,
+	 *   - drivers/block/xen-blkback/blkback.c|680| <<xen_blkbk_free_caches>> BUG_ON(!RB_EMPTY_ROOT(&ring->persistent_gnts));
+	 *   - drivers/block/xen-blkback/xenbus.c|296| <<xen_blkif_disconnect>> BUG_ON(!RB_EMPTY_ROOT(&ring->persistent_gnts));
+	 */
 	struct rb_root		persistent_gnts;
+	/*
+	 * 修改的地方:
+	 *   - drivers/block/xen-blkback/blkback.c|244| <<add_persistent_gnt>> ring->persistent_gnt_c++;
+	 *   - drivers/block/xen-blkback/blkback.c|449| <<purge_persistent_gnt>> ring->persistent_gnt_c -= (total - num_clean);
+	 *   - drivers/block/xen-blkback/blkback.c|681| <<xen_blkbk_free_caches>> ring->persistent_gnt_c = 0;
+	 */
 	unsigned int		persistent_gnt_c;
 	atomic_t		persistent_gnt_in_use;
 	unsigned long           next_lru;
@@ -296,6 +313,14 @@ struct xen_blkif_ring {
 
 	/* Used by the kworker that offload work from the persistent purge. */
 	struct list_head	persistent_purge_list;
+	/*
+	 * used by:
+	 *   - drivers/block/xen-blkback/blkback.c|368| <<xen_blkbk_unmap_purged_grants>> struct xen_blkif_ring *ring = container_of(work, typeof(*ring), persistent_purge_work);
+	 *   - drivers/block/xen-blkback/blkback.c|417| <<purge_persistent_gnt>> if (work_busy(&ring->persistent_purge_work)) {
+	 *   - drivers/block/xen-blkback/blkback.c|487| <<purge_persistent_gnt>> schedule_work(&ring->persistent_purge_work);
+	 *   - drivers/block/xen-blkback/blkback.c|694| <<xen_blkif_schedule>> flush_work(&ring->persistent_purge_work);
+	 *   - drivers/block/xen-blkback/xenbus.c|153| <<xen_blkif_alloc_rings>> INIT_WORK(&ring->persistent_purge_work, xen_blkbk_unmap_purged_grants);
+	 */
 	struct work_struct	persistent_purge_work;
 
 	/* Buffer of free pages to map grant refs. */
diff --git a/drivers/block/xen-blkfront.c b/drivers/block/xen-blkfront.c
index c08ee8c..a462c8c 100644
--- a/drivers/block/xen-blkfront.c
+++ b/drivers/block/xen-blkfront.c
@@ -1172,6 +1172,13 @@ static int xlvbd_alloc_gendisk(blkif_sector_t capacity,
 	return err;
 }
 
+/*
+ * called by:
+ *   - drivers/block/xen-blkfront.c|2185| <<blkfront_closing>> xlvbd_release_gendisk(info);
+ *   - drivers/block/xen-blkfront.c|2566| <<blkfront_remove>> xlvbd_release_gendisk(info);
+ *   - drivers/block/xen-blkfront.c|2640| <<blkif_release>> xlvbd_release_gendisk(info);
+ *   - drivers/block/xen-blkfront.c|2649| <<blkif_release>> xlvbd_release_gendisk(info);
+ */
 static void xlvbd_release_gendisk(struct blkfront_info *info)
 {
 	unsigned int minor, nr_minors, i;
@@ -2153,6 +2160,18 @@ static int blkfront_resume(struct xenbus_device *dev)
 	return err;
 }
 
+/*
+ * callstack的一个例子:
+ * 先xl block-attach 3 file:/home/zhang/img/ubuntu/test.img xvdb rw
+ * 再xl block-detach 3 51728
+ * [0] blkfront_closing
+ * [0] blkback_changed
+ * [0] xenbus_otherend_changed
+ * [0] backend_changed
+ * [0] xenwatch_thread
+ * [0] kthread
+ * [0] ret_from_fork
+ */
 static void blkfront_closing(struct blkfront_info *info)
 {
 	struct xenbus_device *xbdev = info->xbdev;
@@ -2464,6 +2483,12 @@ static void blkfront_connect(struct blkfront_info *info)
 /**
  * Callback received when the backend's state changes.
  */
+/*
+ * called by only:
+ *   - drivers/xen/xenbus/xenbus_probe.c|208| <<xenbus_otherend_changed>> drv->otherend_changed(dev, state);
+ *
+ * struct xenbus_driver blkfront_driver.otherend_changed = blkback_changed()
+ */
 static void blkback_changed(struct xenbus_device *dev,
 			    enum xenbus_state backend_state)
 {
@@ -2516,6 +2541,28 @@ static void blkback_changed(struct xenbus_device *dev,
 	}
 }
 
+/*
+ * callstack的一个例子:
+ * 先xl block-attach 3 file:/home/zhang/img/ubuntu/test.img xvdb rw
+ * 再xl block-detach 3 51728
+ * [0] blkfront_remove
+ * [0] xenbus_dev_remove
+ * [0] __device_release_driver
+ * [0] device_release_driver
+ * [0] bus_remove_device
+ * [0] device_del
+ * [0] device_unregister
+ * [0] xenbus_dev_changed
+ * [0] frontend_changed
+ * [0] xenwatch_thread
+ * [0] kthread
+ * [0] ret_from_fork
+ *
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe.c|273| <<xenbus_dev_remove>> drv->remove(dev);
+ *
+ * struct xenbus_driver blkfront_driver.remove = blkfront_remove()
+ */
 static int blkfront_remove(struct xenbus_device *xbdev)
 {
 	struct blkfront_info *info = dev_get_drvdata(&xbdev->dev);
@@ -2603,6 +2650,19 @@ static int blkif_open(struct block_device *bdev, fmode_t mode)
 	return err;
 }
 
+/*
+ * callstack的一个例子:
+ * [0] blkif_release
+ * [0] __blkdev_put
+ * [0] blkdev_put
+ * [0] blkdev_close
+ * [0] __fput
+ * [0] ____fput
+ * [0] task_work_run
+ * [0] exit_to_usermode_loop
+ * [0] do_syscall_64
+ * [0] entry_SYSCALL_64_after_swapgs
+ */
 static void blkif_release(struct gendisk *disk, fmode_t mode)
 {
 	struct blkfront_info *info = disk->private_data;
diff --git a/drivers/xen/xenbus/xenbus_probe.c b/drivers/xen/xenbus/xenbus_probe.c
index c2d4476..e210a92 100644
--- a/drivers/xen/xenbus/xenbus_probe.c
+++ b/drivers/xen/xenbus/xenbus_probe.c
@@ -169,6 +169,11 @@ int xenbus_read_otherend_details(struct xenbus_device *xendev,
 }
 EXPORT_SYMBOL_GPL(xenbus_read_otherend_details);
 
+/*
+ * called by:
+ *   - drivers/xen/xenbus/xenbus_probe_backend.c|187| <<frontend_changed>> xenbus_otherend_changed(watch, vec, len, 0);
+ *   - drivers/xen/xenbus/xenbus_probe_frontend.c|92| <<backend_changed>> xenbus_otherend_changed(watch, vec, len, 1);
+ */
 void xenbus_otherend_changed(struct xenbus_watch *watch,
 			     const char **vec, unsigned int len,
 			     int ignore_on_shutdown)
@@ -255,6 +260,12 @@ int xenbus_dev_probe(struct device *_dev)
 }
 EXPORT_SYMBOL_GPL(xenbus_dev_probe);
 
+/*
+ * drivers/xen/xenbus/xenbus_probe_backend.c
+ *   struct xen_bus_type xenbus_backend.bus.remove = xenbus_dev_remove()
+ * drivers/xen/xenbus/xenbus_probe_frontend.c
+ *   struct xen_bus_type xenbus_frontend.bus.remove = xenbus_dev_remove()
+ */
 int xenbus_dev_remove(struct device *_dev)
 {
 	struct xenbus_device *dev = to_xenbus_device(_dev);
@@ -274,6 +285,12 @@ int xenbus_dev_remove(struct device *_dev)
 }
 EXPORT_SYMBOL_GPL(xenbus_dev_remove);
 
+/*
+ * drivers/xen/xenbus/xenbus_probe_backend.c
+ *   struct xen_bus_type xenbus_backend.bus.shutdown = xenbus_dev_shutdown()
+ * drivers/xen/xenbus/xenbus_probe_frontend.c
+ *   struct xen_bus_type xenbus_frontend.bus.shutdown = xenbus_dev_shutdown()
+ */
 void xenbus_dev_shutdown(struct device *_dev)
 {
 	struct xenbus_device *dev = to_xenbus_device(_dev);
-- 
2.7.4

