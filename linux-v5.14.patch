From 3d5de51632e688b7b794f24b9f0d97b9a71d37bc Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Wed, 15 Sep 2021 15:33:45 -0700
Subject: [PATCH 1/1] linux v5.14

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/kvm/x86.c                            | 23 ++++++
 include/linux/kvm_host.h                      | 44 +++++++++++
 include/uapi/linux/kvm.h                      |  7 ++
 .../selftests/kvm/kvm_binary_stats_test.c     | 39 +++++++++
 tools/testing/selftests/kvm/lib/kvm_util.c    | 27 +++++++
 virt/kvm/binary_stats.c                       | 10 +++
 virt/kvm/kvm_main.c                           | 79 +++++++++++++++++++
 7 files changed, 229 insertions(+)

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index e5d5c5ed7dd4..e2de12f9f056 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -240,6 +240,15 @@ const struct _kvm_stats_desc kvm_vm_stats_desc[] = {
 static_assert(ARRAY_SIZE(kvm_vm_stats_desc) ==
 		sizeof(struct kvm_vm_stat) / sizeof(u64));
 
+/*
+ * x86在以下使用kvm_vm_stats_header:
+ *   - virt/kvm/kvm_main.c|878| <<kvm_destroy_vm_debugfs>> int kvm_debugfs_num_entries = kvm_vm_stats_header.num_desc +
+ *   - virt/kvm/kvm_main.c|901| <<kvm_create_vm_debugfs>> int kvm_debugfs_num_entries = kvm_vm_stats_header.num_desc +
+ *   - virt/kvm/kvm_main.c|928| <<kvm_create_vm_debugfs>> for (i = 0; i < kvm_vm_stats_header.num_desc; ++i) {
+ *   - virt/kvm/kvm_main.c|952| <<kvm_create_vm_debugfs>> kvm->debugfs_stat_data[i + kvm_vm_stats_header.num_desc] = stat_data;
+ *   - virt/kvm/kvm_main.c|4216| <<kvm_vm_stats_read>> return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+ *   - virt/kvm/kvm_main.c|5283| <<kvm_init_debug>> for (i = 0; i < kvm_vm_stats_header.num_desc; ++i) {
+ */
 const struct kvm_stats_header kvm_vm_stats_header = {
 	.name_size = KVM_STATS_NAME_SIZE,
 	.num_desc = ARRAY_SIZE(kvm_vm_stats_desc),
@@ -249,6 +258,20 @@ const struct kvm_stats_header kvm_vm_stats_header = {
 		       sizeof(kvm_vm_stats_desc),
 };
 
+/*
+ * x86和arm在以下使用kvm_vcpu_stats_desc[]:
+ *   - arch/arm64/kvm/guest.c|46| <<global>> const struct _kvm_stats_desc kvm_vcpu_stats_desc[] = {
+ *   - arch/arm64/kvm/guest.c|55| <<global>> static_assert(ARRAY_SIZE(kvm_vcpu_stats_desc) == 
+ *   - arch/arm64/kvm/guest.c|60| <<global>> .num_desc = ARRAY_SIZE(kvm_vcpu_stats_desc),
+ *   - arch/arm64/kvm/guest.c|64| <<global>> sizeof(kvm_vcpu_stats_desc),
+ *   - arch/x86/kvm/x86.c|252| <<global>> const struct _kvm_stats_desc kvm_vcpu_stats_desc[] = {
+ *   - arch/x86/kvm/x86.c|281| <<global>> static_assert(ARRAY_SIZE(kvm_vcpu_stats_desc) ==
+ *   - arch/x86/kvm/x86.c|286| <<global>> .num_desc = ARRAY_SIZE(kvm_vcpu_stats_desc),
+ *   - arch/x86/kvm/x86.c|290| <<global>> sizeof(kvm_vcpu_stats_desc),
+ *   - virt/kvm/kvm_main.c|944| <<kvm_create_vm_debugfs>> pdesc = &kvm_vcpu_stats_desc[i];
+ *   - virt/kvm/kvm_main.c|3574| <<kvm_vcpu_stats_read>> &kvm_vcpu_stats_desc[0], &vcpu->stat,
+ *   - virt/kvm/kvm_main.c|5254| <<kvm_init_debug>> pdesc = &kvm_vcpu_stats_desc[i];
+ */
 const struct _kvm_stats_desc kvm_vcpu_stats_desc[] = {
 	KVM_GENERIC_VCPU_STATS(),
 	STATS_DESC_COUNTER(VCPU, pf_fixed),
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index ae7735b490b4..db7449cdf328 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -342,6 +342,15 @@ struct kvm_vcpu {
 	bool ready;
 	struct kvm_vcpu_arch arch;
 	struct kvm_vcpu_stat stat;
+	/*
+	 * 在以下使用kvm->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|4216| <<kvm_vm_stats_read>> return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+	 *   - virt/kvm/kvm_main.c|4539| <<kvm_dev_ioctl_create_vm>> snprintf(kvm->stats_id, sizeof(kvm->stats_id), "kvm-%d", task_pid_nr(current));
+	 * 在以下使用kvm_vcpu->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|3516| <<kvm_vm_ioctl_create_vcpu>> snprintf(vcpu->stats_id, sizeof(vcpu->stats_id), "kvm-%d/vcpu-%d",
+	 *   - virt/kvm/kvm_main.c|3587| <<kvm_vcpu_stats_read>> return kvm_stats_read(vcpu->stats_id, &kvm_vcpu_stats_header,
+	 *   - virt/kvm/kvm_main.c|5452| <<kvm_init>> offsetofend(struct kvm_vcpu, stats_id)
+	 */
 	char stats_id[KVM_STATS_NAME_SIZE];
 	struct kvm_dirty_ring dirty_ring;
 };
@@ -600,6 +609,15 @@ struct kvm {
 #ifdef CONFIG_HAVE_KVM_PM_NOTIFIER
 	struct notifier_block pm_notifier;
 #endif
+	/*
+	 * 在以下使用kvm->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|4216| <<kvm_vm_stats_read>> return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+	 *   - virt/kvm/kvm_main.c|4539| <<kvm_dev_ioctl_create_vm>> snprintf(kvm->stats_id, sizeof(kvm->stats_id), "kvm-%d", task_pid_nr(current));
+	 * 在以下使用kvm_vcpu->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|3516| <<kvm_vm_ioctl_create_vcpu>> snprintf(vcpu->stats_id, sizeof(vcpu->stats_id), "kvm-%d/vcpu-%d",
+	 *   - virt/kvm/kvm_main.c|3587| <<kvm_vcpu_stats_read>> return kvm_stats_read(vcpu->stats_id, &kvm_vcpu_stats_header,
+	 *   - virt/kvm/kvm_main.c|5452| <<kvm_init>> offsetofend(struct kvm_vcpu, stats_id)
+	 */
 	char stats_id[KVM_STATS_NAME_SIZE];
 };
 
@@ -1314,6 +1332,12 @@ struct _kvm_stats_desc {
 		.name = #stat,						       \
 	}
 /* SCOPE: VM, VM_GENERIC, VCPU, VCPU_GENERIC */
+/*
+ * called by:
+ *   - include/linux/kvm_host.h|1321| <<STATS_DESC_CUMULATIVE>> STATS_DESC(SCOPE, name, KVM_STATS_TYPE_CUMULATIVE, unit, base, exponent)
+ *   - include/linux/kvm_host.h|1323| <<STATS_DESC_INSTANT>> STATS_DESC(SCOPE, name, KVM_STATS_TYPE_INSTANT, unit, base, exponent)
+ *   - include/linux/kvm_host.h|1325| <<STATS_DESC_PEAK>> STATS_DESC(SCOPE, name, KVM_STATS_TYPE_PEAK, unit, base, exponent)
+ */
 #define STATS_DESC(SCOPE, stat, type, unit, base, exp)			       \
 	SCOPE##_STATS_DESC(stat, type, unit, base, exp)
 
@@ -1328,6 +1352,17 @@ struct _kvm_stats_desc {
 #define STATS_DESC_COUNTER(SCOPE, name)					       \
 	STATS_DESC_CUMULATIVE(SCOPE, name, KVM_STATS_UNIT_NONE,		       \
 		KVM_STATS_BASE_POW10, 0)
+/*
+ * called by:
+ *   - arch/powerpc/kvm/book3s.c|44| <<global>> STATS_DESC_ICOUNTER(VM, num_2M_pages),
+ *   - arch/powerpc/kvm/book3s.c|44| <<global>> STATS_DESC_ICOUNTER(VM, num_1G_pages)
+ *   - arch/powerpc/kvm/booke.c|41| <<global>> STATS_DESC_ICOUNTER(VM, num_2M_pages),
+ *   - arch/powerpc/kvm/booke.c|42| <<global>> STATS_DESC_ICOUNTER(VM, num_1G_pages)
+ *   - arch/x86/kvm/x86.c|235| <<global>> STATS_DESC_ICOUNTER(VM, mmu_unsync),
+ *   - arch/x86/kvm/x86.c|236| <<global>> STATS_DESC_ICOUNTER(VM, lpages),
+ *   - arch/x86/kvm/x86.c|237| <<global>> STATS_DESC_ICOUNTER(VM, nx_lpage_splits),
+ *   - arch/x86/kvm/x86.c|279| <<global>> STATS_DESC_ICOUNTER(VCPU, guest_mode)
+ */
 /* Instantaneous counter, read only */
 #define STATS_DESC_ICOUNTER(SCOPE, name)				       \
 	STATS_DESC_INSTANT(SCOPE, name, KVM_STATS_UNIT_NONE,		       \
@@ -1345,6 +1380,15 @@ struct _kvm_stats_desc {
 #define KVM_GENERIC_VM_STATS()						       \
 	STATS_DESC_COUNTER(VM_GENERIC, remote_tlb_flush)
 
+/*
+ * called by:
+ *   - arch/arm64/kvm/guest.c|47| <<global>> KVM_GENERIC_VCPU_STATS(),
+ *   - arch/mips/kvm/mips.c|57| <<global>> KVM_GENERIC_VCPU_STATS(),
+ *   - arch/powerpc/kvm/book3s.c|59| <<global>> KVM_GENERIC_VCPU_STATS(),
+ *   - arch/powerpc/kvm/booke.c|57| <<global>> KVM_GENERIC_VCPU_STATS(),
+ *   - arch/s390/kvm/kvm-s390.c|82| <<global>> KVM_GENERIC_VCPU_STATS(),
+ *   - arch/x86/kvm/x86.c|253| <<global>> KVM_GENERIC_VCPU_STATS(),
+ */
 #define KVM_GENERIC_VCPU_STATS()					       \
 	STATS_DESC_COUNTER(VCPU_GENERIC, halt_successful_poll),		       \
 	STATS_DESC_COUNTER(VCPU_GENERIC, halt_attempted_poll),		       \
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index d9e4aabcb31a..770ded00900a 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -1109,6 +1109,13 @@ struct kvm_ppc_resize_hpt {
 #define KVM_CAP_SREGS2 200
 #define KVM_CAP_EXIT_HYPERCALL 201
 #define KVM_CAP_PPC_RPT_INVALIDATE 202
+/*
+ * 在以下使用KVM_CAP_BINARY_STATS_FD:
+ *   - include/uapi/linux/kvm.h|1112| <<global>> #define KVM_CAP_BINARY_STATS_FD 203
+ *   - tools/include/uapi/linux/kvm.h|1112| <<global>> #define KVM_CAP_BINARY_STATS_FD 203
+ *   - tools/testing/selftests/kvm/kvm_binary_stats_test.c|211| <<main>> if (kvm_check_cap(KVM_CAP_BINARY_STATS_FD) <= 0) {
+ *   - virt/kvm/kvm_main.c|4065| <<kvm_vm_ioctl_check_extension_generic>> case KVM_CAP_BINARY_STATS_FD:
+ */
 #define KVM_CAP_BINARY_STATS_FD 203
 #define KVM_CAP_EXIT_ON_EMULATION_FAILURE 204
 #define KVM_CAP_ARM_MTE 205
diff --git a/tools/testing/selftests/kvm/kvm_binary_stats_test.c b/tools/testing/selftests/kvm/kvm_binary_stats_test.c
index 5906bbc08483..647f98b5efbc 100644
--- a/tools/testing/selftests/kvm/kvm_binary_stats_test.c
+++ b/tools/testing/selftests/kvm/kvm_binary_stats_test.c
@@ -36,8 +36,28 @@ static void stats_test(int stats_fd)
 	header = malloc(sizeof(*header));
 	TEST_ASSERT(header, "Allocate memory for stats header");
 
+	/*
+	 * struct kvm_stats_header {
+	 *     __u32 flags;
+	 *     __u32 name_size;
+	 *     __u32 num_desc;
+	 *     __u32 id_offset;
+	 *     __u32 desc_offset;
+	 *     __u32 data_offset;
+	 * };
+	 */
 	ret = read(stats_fd, header, sizeof(*header));
 	TEST_ASSERT(ret == sizeof(*header), "Read stats header");
+	/*
+	 * struct kvm_stats_desc {
+	 *     __u32 flags;
+	 *     __s16 exponent;
+	 *     __u16 size;
+	 *     __u32 offset;
+	 *     __u32 unused;
+	 *     char name[];
+	 * };
+	 */
 	size_desc = sizeof(*stats_desc) + header->name_size;
 
 	/* Read kvm stats id string */
@@ -136,6 +156,9 @@ static void stats_test(int stats_fd)
 	size_data = 0;
 	for (i = 0; i < header->num_desc; ++i) {
 		pdesc = (void *)stats_desc + i * size_desc;
+		/*
+		 * stats_data = malloc(size_data);
+		 */
 		ret = pread(stats_fd, stats_data,
 				pdesc->size * sizeof(*stats_data),
 				header->data_offset + size_data);
@@ -156,6 +179,12 @@ static void vm_stats_test(struct kvm_vm *vm)
 	int stats_fd;
 
 	/* Get fd for VM stats */
+	/*
+	 * int vm_get_stats_fd(struct kvm_vm *vm)
+	 * {
+	 *     return ioctl(vm->fd, KVM_GET_STATS_FD, NULL);
+	 * }
+	 */
 	stats_fd = vm_get_stats_fd(vm);
 	TEST_ASSERT(stats_fd >= 0, "Get VM stats fd");
 
@@ -208,12 +237,22 @@ int main(int argc, char *argv[])
 	}
 
 	/* Check the extension for binary stats */
+	/*
+	 * 在以下使用KVM_CAP_BINARY_STATS_FD:
+	 *   - include/uapi/linux/kvm.h|1112| <<global>> #define KVM_CAP_BINARY_STATS_FD 203
+	 *   - tools/include/uapi/linux/kvm.h|1112| <<global>> #define KVM_CAP_BINARY_STATS_FD 203
+	 *   - tools/testing/selftests/kvm/kvm_binary_stats_test.c|211| <<main>> if (kvm_check_cap(KVM_CAP_BINARY_STATS_FD) <= 0)
+	 *   - virt/kvm/kvm_main.c|4065| <<kvm_vm_ioctl_check_extension_generic>> case KVM_CAP_BINARY_STATS_FD:
+	 */
 	if (kvm_check_cap(KVM_CAP_BINARY_STATS_FD) <= 0) {
 		print_skip("Binary form statistics interface is not supported");
 		exit(KSFT_SKIP);
 	}
 
 	/* Create VMs and VCPUs */
+	/*
+	 * struct kvm_vm **vms;
+	 */
 	vms = malloc(sizeof(vms[0]) * max_vm);
 	TEST_ASSERT(vms, "Allocate memory for storing VM pointers");
 	for (i = 0; i < max_vm; ++i) {
diff --git a/tools/testing/selftests/kvm/lib/kvm_util.c b/tools/testing/selftests/kvm/lib/kvm_util.c
index 10a8ed691c66..cfbec6f5fee5 100644
--- a/tools/testing/selftests/kvm/lib/kvm_util.c
+++ b/tools/testing/selftests/kvm/lib/kvm_util.c
@@ -219,6 +219,19 @@ _Static_assert(sizeof(vm_guest_mode_params)/sizeof(struct vm_guest_mode_params)
  * descriptor to control the created VM is created with the permissions
  * given by perm (e.g. O_RDWR).
  */
+/*
+ * called by:
+ *   - tools/testing/selftests/kvm/aarch64/get-reg-list.c|414| <<run_test>> vm = vm_create(VM_MODE_DEFAULT, DEFAULT_GUEST_PHY_PAGES, O_RDWR);
+ *   - tools/testing/selftests/kvm/dirty_log_test.c|682| <<create_vm>> vm = vm_create(mode, DEFAULT_GUEST_PHY_PAGES + extra_pg_pages, O_RDWR);
+ *   - tools/testing/selftests/kvm/hardware_disable_test.c|107| <<run_test>> vm = vm_create(VM_MODE_DEFAULT, DEFAULT_GUEST_PHY_PAGES, O_RDWR);
+ *   - tools/testing/selftests/kvm/kvm_binary_stats_test.c|220| <<main>> vms[i] = vm_create(VM_MODE_DEFAULT,
+ *   - tools/testing/selftests/kvm/kvm_create_max_vcpus.c|30| <<test_vcpu_creation>> vm = vm_create(VM_MODE_DEFAULT, DEFAULT_GUEST_PHY_PAGES, O_RDWR);
+ *   - tools/testing/selftests/kvm/lib/kvm_util.c|371| <<vm_create_with_vcpus>> vm = vm_create(mode, pages, O_RDWR);
+ *   - tools/testing/selftests/kvm/set_memory_region_test.c|317| <<test_zero_memory_regions>> vm = vm_create(VM_MODE_DEFAULT, 0, O_RDWR);
+ *   - tools/testing/selftests/kvm/set_memory_region_test.c|373| <<test_add_max_memory_regions>> vm = vm_create(VM_MODE_DEFAULT, 0, O_RDWR);
+ *   - tools/testing/selftests/kvm/x86_64/set_boot_cpu_id.c|91| <<create_vm>> vm = vm_create(VM_MODE_DEFAULT, pages, O_RDWR);
+ *   - tools/testing/selftests/kvm/x86_64/set_sregs_test.c|98| <<main>> vm = vm_create(VM_MODE_DEFAULT, DEFAULT_GUEST_PHY_PAGES, O_RDWR);
+ */
 struct kvm_vm *vm_create(enum vm_guest_mode mode, uint64_t phy_pages, int perm)
 {
 	struct kvm_vm *vm;
@@ -1112,6 +1125,20 @@ static int vcpu_mmap_sz(void)
  * Adds a virtual CPU to the VM specified by vm with the ID given by vcpuid.
  * No additional VCPU setup is done.
  */
+/*
+ * called by:
+ *   - tools/testing/selftests/kvm/kvm_binary_stats_test.c|223| <<main>> vm_vcpu_add(vms[i], j);
+ *   - tools/testing/selftests/kvm/kvm_create_max_vcpus.c|34| <<test_vcpu_creation>> vm_vcpu_add(vm, i);
+ *   - tools/testing/selftests/kvm/lib/aarch64/processor.c|302| <<aarch64_vcpu_add_default>> vm_vcpu_add(vm, vcpuid);
+ *   - tools/testing/selftests/kvm/lib/s390x/processor.c|172| <<vm_vcpu_add_default>> vm_vcpu_add(vm, vcpuid);
+ *   - tools/testing/selftests/kvm/lib/x86_64/processor.c|662| <<vm_vcpu_add_default>> vm_vcpu_add(vm, vcpuid);
+ *   - tools/testing/selftests/kvm/set_memory_region_test.c|318| <<test_zero_memory_regions>> vm_vcpu_add(vm, VCPU_ID);
+ *   - tools/testing/selftests/kvm/x86_64/evmcs_test.c|128| <<save_restore_vm>> vm_vcpu_add(vm, VCPU_ID);
+ *   - tools/testing/selftests/kvm/x86_64/set_sregs_test.c|99| <<main>> vm_vcpu_add(vm, VCPU_ID);
+ *   - tools/testing/selftests/kvm/x86_64/smm_test.c|211| <<main>> vm_vcpu_add(vm, VCPU_ID);
+ *   - tools/testing/selftests/kvm/x86_64/state_test.c|217| <<main>> vm_vcpu_add(vm, VCPU_ID);
+ *   - tools/testing/selftests/kvm/x86_64/vmx_preemption_timer_test.c|243| <<main>> vm_vcpu_add(vm, VCPU_ID);
+ */
 void vm_vcpu_add(struct kvm_vm *vm, uint32_t vcpuid)
 {
 	struct vcpu *vcpu;
diff --git a/virt/kvm/binary_stats.c b/virt/kvm/binary_stats.c
index e609d428811a..757347af056b 100644
--- a/virt/kvm/binary_stats.c
+++ b/virt/kvm/binary_stats.c
@@ -49,6 +49,16 @@
  *
  * Return: the number of bytes that has been successfully read
  */
+/*
+ * called by:
+ *   - virt/kvm/kvm_main.c|3573| <<kvm_vcpu_stats_read>> return kvm_stats_read(vcpu->stats_id, &kvm_vcpu_stats_header,
+ *   - virt/kvm/kvm_main.c|4175| <<kvm_vm_stats_read>> return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+ *
+ * 例子
+ * 4199         return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+ * 4200                                 &kvm_vm_stats_desc[0], &kvm->stat,
+ * 4201                                 sizeof(kvm->stat), user_buffer, size, offset);
+ */
 ssize_t kvm_stats_read(char *id, const struct kvm_stats_header *header,
 		       const struct _kvm_stats_desc *desc,
 		       void *stats, size_t size_stats,
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index b50dbe269f4b..922939bf7f01 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -3513,6 +3513,15 @@ static int kvm_vm_ioctl_create_vcpu(struct kvm *kvm, u32 id)
 	BUG_ON(kvm->vcpus[vcpu->vcpu_idx]);
 
 	/* Fill the stats id string for the vcpu */
+	/*
+	 * 在以下使用kvm->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|4216| <<kvm_vm_stats_read>> return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+	 *   - virt/kvm/kvm_main.c|4539| <<kvm_dev_ioctl_create_vm>> snprintf(kvm->stats_id, sizeof(kvm->stats_id), "kvm-%d", task_pid_nr(current));
+	 * 在以下使用kvm_vcpu->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|3516| <<kvm_vm_ioctl_create_vcpu>> snprintf(vcpu->stats_id, sizeof(vcpu->stats_id), "kvm-%d/vcpu-%d",
+	 *   - virt/kvm/kvm_main.c|3587| <<kvm_vcpu_stats_read>> return kvm_stats_read(vcpu->stats_id, &kvm_vcpu_stats_header,
+	 *   - virt/kvm/kvm_main.c|5452| <<kvm_init>> offsetofend(struct kvm_vcpu, stats_id)
+	 */
 	snprintf(vcpu->stats_id, sizeof(vcpu->stats_id), "kvm-%d/vcpu-%d",
 		 task_pid_nr(current), id);
 
@@ -3570,6 +3579,28 @@ static ssize_t kvm_vcpu_stats_read(struct file *file, char __user *user_buffer,
 {
 	struct kvm_vcpu *vcpu = file->private_data;
 
+	/*
+	 * struct kvm_vcpu *vcpu:
+	 * -> struct kvm_vcpu_stat stat;
+	 *    -> struct kvm_vcpu_stat_generic generic;
+	 *    -> u64 pf_fixed;
+	 *    -> u64 pf_guest;
+	 *    -> u64 tlb_flush;
+	 *    -> u64 invlpg;
+	 *
+	 *    -> u64 exits;
+	 *    -> u64 io_exits;
+	 *    -> u64 mmio_exits;
+	 * ... ...
+	 *
+	 * 在以下使用kvm->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|4216| <<kvm_vm_stats_read>> return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+	 *   - virt/kvm/kvm_main.c|4539| <<kvm_dev_ioctl_create_vm>> snprintf(kvm->stats_id, sizeof(kvm->stats_id), "kvm-%d", task_pid_nr(current));
+	 * 在以下使用kvm_vcpu->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|3516| <<kvm_vm_ioctl_create_vcpu>> snprintf(vcpu->stats_id, sizeof(vcpu->stats_id), "kvm-%d/vcpu-%d",
+	 *   - virt/kvm/kvm_main.c|3587| <<kvm_vcpu_stats_read>> return kvm_stats_read(vcpu->stats_id, &kvm_vcpu_stats_header,
+	 *   - virt/kvm/kvm_main.c|5452| <<kvm_init>> offsetofend(struct kvm_vcpu, stats_id)
+	 */
 	return kvm_stats_read(vcpu->stats_id, &kvm_vcpu_stats_header,
 			&kvm_vcpu_stats_desc[0], &vcpu->stat,
 			sizeof(vcpu->stat), user_buffer, size, offset);
@@ -4167,11 +4198,46 @@ static int kvm_vm_ioctl_enable_cap_generic(struct kvm *kvm,
 	}
 }
 
+/*
+ * struct file_operations kvm_vm_stats_fops.read = kvm_vm_stats_read()
+ */
 static ssize_t kvm_vm_stats_read(struct file *file, char __user *user_buffer,
 			      size_t size, loff_t *offset)
 {
 	struct kvm *kvm = file->private_data;
 
+	/*
+	 * const struct kvm_stats_header kvm_vm_stats_header = {
+	 *	   .name_size = KVM_STATS_NAME_SIZE,
+	 *	   .num_desc = ARRAY_SIZE(kvm_vm_stats_desc),
+	 *	   .id_offset = sizeof(struct kvm_stats_header),
+	 *	   .desc_offset = sizeof(struct kvm_stats_header) + KVM_STATS_NAME_SIZE,
+	 *	   .data_offset = sizeof(struct kvm_stats_header) + KVM_STATS_NAME_SIZE +
+	 *			  sizeof(kvm_vm_stats_desc),
+	 * };
+	 *
+	 * struct kvm *kvm:
+	 * -> struct kvm_vm_stat stat;
+	 *    -> struct kvm_vm_stat_generic generic;
+	 *    -> u64 mmu_shadow_zapped;
+	 *    -> u64 mmu_pte_write;
+	 *    -> u64 mmu_pde_zapped;
+	 *    -> u64 mmu_flooded;
+	 *    -> u64 mmu_recycled;
+	 *    -> u64 mmu_cache_miss;
+	 *    -> u64 mmu_unsync; 
+	 *    -> u64 lpages;
+	 *    -> u64 nx_lpage_splits;
+	 *    -> u64 max_mmu_page_hash_collisions;
+	 *
+	 * 在以下使用kvm->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|4216| <<kvm_vm_stats_read>> return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+	 *   - virt/kvm/kvm_main.c|4539| <<kvm_dev_ioctl_create_vm>> snprintf(kvm->stats_id, sizeof(kvm->stats_id), "kvm-%d", task_pid_nr(current));
+	 * 在以下使用kvm_vcpu->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|3516| <<kvm_vm_ioctl_create_vcpu>> snprintf(vcpu->stats_id, sizeof(vcpu->stats_id), "kvm-%d/vcpu-%d",
+	 *   - virt/kvm/kvm_main.c|3587| <<kvm_vcpu_stats_read>> return kvm_stats_read(vcpu->stats_id, &kvm_vcpu_stats_header,
+	 *   - virt/kvm/kvm_main.c|5452| <<kvm_init>> offsetofend(struct kvm_vcpu, stats_id)
+	 */
 	return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
 				&kvm_vm_stats_desc[0], &kvm->stat,
 				sizeof(kvm->stat), user_buffer, size, offset);
@@ -4182,6 +4248,10 @@ static const struct file_operations kvm_vm_stats_fops = {
 	.llseek = noop_llseek,
 };
 
+/*
+ * 处理KVM_GET_STATS_FD:
+ *   - virt/kvm/kvm_main.c|4430| <<kvm_vm_ioctl>> r = kvm_vm_ioctl_get_stats_fd(kvm);
+ */
 static int kvm_vm_ioctl_get_stats_fd(struct kvm *kvm)
 {
 	int fd;
@@ -4495,6 +4565,15 @@ static int kvm_dev_ioctl_create_vm(unsigned long type)
 	if (r < 0)
 		goto put_kvm;
 
+	/*
+	 * 在以下使用kvm->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|4216| <<kvm_vm_stats_read>> return kvm_stats_read(kvm->stats_id, &kvm_vm_stats_header,
+	 *   - virt/kvm/kvm_main.c|4539| <<kvm_dev_ioctl_create_vm>> snprintf(kvm->stats_id, sizeof(kvm->stats_id), "kvm-%d", task_pid_nr(current));
+	 * 在以下使用kvm_vcpu->stats_id[KVM_STATS_NAME_SIZE]:
+	 *   - virt/kvm/kvm_main.c|3516| <<kvm_vm_ioctl_create_vcpu>> snprintf(vcpu->stats_id, sizeof(vcpu->stats_id), "kvm-%d/vcpu-%d",
+	 *   - virt/kvm/kvm_main.c|3587| <<kvm_vcpu_stats_read>> return kvm_stats_read(vcpu->stats_id, &kvm_vcpu_stats_header,
+	 *   - virt/kvm/kvm_main.c|5452| <<kvm_init>> offsetofend(struct kvm_vcpu, stats_id)
+	 */
 	snprintf(kvm->stats_id, sizeof(kvm->stats_id),
 			"kvm-%d", task_pid_nr(current));
 
-- 
2.17.1

