From af4c989bc958d637b091954eac41761a41aea233 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhan0129@gmail.com>
Date: Sat, 29 May 2021 14:23:24 -0700
Subject: [PATCH 1/1] linux v5.12

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 arch/x86/kvm/irq_comm.c                | 35 ++++++++++++++++++++++++++
 drivers/scsi/virtio_scsi.c             | 12 +++++++++
 drivers/vhost/vringh.c                 |  9 +++++++
 drivers/virtio/virtio.c                | 30 ++++++++++++++++++++++
 drivers/virtio/virtio_dma_buf.c        | 17 +++++++++++++
 drivers/virtio/virtio_pci_common.c     | 12 +++++++++
 drivers/virtio/virtio_pci_modern_dev.c | 23 +++++++++++++++++
 drivers/virtio/virtio_ring.c           | 11 ++++++++
 8 files changed, 149 insertions(+)

diff --git a/arch/x86/kvm/irq_comm.c b/arch/x86/kvm/irq_comm.c
index 8a4de3f12820..fc0d631a0876 100644
--- a/arch/x86/kvm/irq_comm.c
+++ b/arch/x86/kvm/irq_comm.c
@@ -99,6 +99,41 @@ int kvm_irq_delivery_to_apic(struct kvm *kvm, struct kvm_lapic *src,
 	return r;
 }
 
+/*
+ * # sudo /usr/share/bcc/tools/trace -t -C  'kvm_set_msi_irq'
+ * TIME     CPU PID     TID     COMM            FUNC
+ * 1.409018 4   23372   23372   vhost-23357     kvm_set_msi_irq
+ * 1.430408 4   23372   23372   vhost-23357     kvm_set_msi_irq
+ * 1.557921 1   23372   23372   vhost-23357     kvm_set_msi_irq
+ * 1.594878 5   23372   23372   vhost-23357     kvm_set_msi_irq
+ * 1.624964 4   23372   23372   vhost-23357     kvm_set_msi_irq
+ *
+ * 9.586209 17  23357   23357   qemu-system-x86 kvm_set_msi_irq
+ * 9.586283 17  23357   23357   qemu-system-x86 kvm_set_msi_irq
+ * 9.586399 5   23372   23372   vhost-23357     kvm_set_msi_irq
+ * 9.586470 17  23357   23357   qemu-system-x86 kvm_set_msi_irq
+ * 9.586482 17  23357   23357   qemu-system-x86 kvm_set_msi_irq
+ *
+ * kvm_set_msi_irq
+ * irqfd_wakeup
+ * __wake_up_common
+ * __wake_up_locked_key
+ * eventfd_signal
+ * vhost_signal
+ * vhost_add_used_and_signal_n
+ * handle_rx
+ * handle_rx_net
+ * vhost_worker
+ * kthread
+ * ret_from_fork
+ *
+ * called by:
+ *   - arch/x86/kvm/irq_comm.c|140| <<kvm_set_msi>> kvm_set_msi_irq(kvm, e, &irq);
+ *   - arch/x86/kvm/irq_comm.c|172| <<kvm_arch_set_irq_inatomic>> kvm_set_msi_irq(kvm, e, &irq);
+ *   - arch/x86/kvm/irq_comm.c|413| <<kvm_scan_ioapic_routes>> kvm_set_msi_irq(vcpu->kvm, entry, &irq);
+ *   - arch/x86/kvm/svm/avic.c|785| <<get_pi_vcpu_info>> kvm_set_msi_irq(kvm, e, &irq);
+ *   - arch/x86/kvm/vmx/posted_intr.c|292| <<pi_update_irte>> kvm_set_msi_irq(kvm, e, &irq);
+ */
 void kvm_set_msi_irq(struct kvm *kvm, struct kvm_kernel_irq_routing_entry *e,
 		     struct kvm_lapic_irq *irq)
 {
diff --git a/drivers/scsi/virtio_scsi.c b/drivers/scsi/virtio_scsi.c
index b9c86a7e3b97..4c5925883598 100644
--- a/drivers/scsi/virtio_scsi.c
+++ b/drivers/scsi/virtio_scsi.c
@@ -600,6 +600,11 @@ static int virtscsi_queuecommand(struct Scsi_Host *shost,
 	return 0;
 }
 
+/*
+ * called by:
+ *   - drivers/scsi/virtio_scsi.c|655| <<virtscsi_device_reset>> return virtscsi_tmf(vscsi, cmd);
+ *   - drivers/scsi/virtio_scsi.c|713| <<virtscsi_abort>> return virtscsi_tmf(vscsi, cmd);
+ */
 static int virtscsi_tmf(struct virtio_scsi *vscsi, struct virtio_scsi_cmd *cmd)
 {
 	DECLARE_COMPLETION_ONSTACK(comp);
@@ -632,6 +637,9 @@ static int virtscsi_tmf(struct virtio_scsi *vscsi, struct virtio_scsi_cmd *cmd)
 	return ret;
 }
 
+/*
+ * struct scsi_host_template virtscsi_host_template.eh_device_reset_handler = virtscsi_device_reset()
+ */
 static int virtscsi_device_reset(struct scsi_cmnd *sc)
 {
 	struct virtio_scsi *vscsi = shost_priv(sc->device->host);
@@ -690,6 +698,10 @@ static int virtscsi_change_queue_depth(struct scsi_device *sdev, int qdepth)
 	return scsi_change_queue_depth(sdev, min(max_depth, qdepth));
 }
 
+/*
+ * called by:
+ *   - struct scsi_host_template virtscsi_host_template.eh_abort_handler = virtscsi_abort()
+ */
 static int virtscsi_abort(struct scsi_cmnd *sc)
 {
 	struct virtio_scsi *vscsi = shost_priv(sc->device->host);
diff --git a/drivers/vhost/vringh.c b/drivers/vhost/vringh.c
index 85d85faba058..8ce073e903db 100644
--- a/drivers/vhost/vringh.c
+++ b/drivers/vhost/vringh.c
@@ -1404,6 +1404,10 @@ EXPORT_SYMBOL(vringh_notify_enable_iotlb);
  * This is our normal running state: we disable and then only enable when
  * we're going to sleep.
  */
+/*
+ * called by:
+ *   - drivers/vhost/vringh.c|1407| <<vringh_notify_disable_iotlb>> void vringh_notify_disable_iotlb(struct vringh *vrh)
+ */
 void vringh_notify_disable_iotlb(struct vringh *vrh)
 {
 	__vringh_notify_disable(vrh, putu16_iotlb);
@@ -1416,6 +1420,11 @@ EXPORT_SYMBOL(vringh_notify_disable_iotlb);
  *
  * Returns -errno or 0 if we don't need to tell the other side, 1 if we do.
  */
+/*
+ * called by:
+ *   - drivers/vdpa/vdpa_sim/vdpa_sim_net.c|95| <<vdpasim_net_work>> if (vringh_need_notify_iotlb(&txq->vring) > 0)
+ *   - drivers/vdpa/vdpa_sim/vdpa_sim_net.c|97| <<vdpasim_net_work>> if (vringh_need_notify_iotlb(&rxq->vring) > 0)
+ */
 int vringh_need_notify_iotlb(struct vringh *vrh)
 {
 	return __vringh_need_notify(vrh, getu16_iotlb);
diff --git a/drivers/virtio/virtio.c b/drivers/virtio/virtio.c
index 4b15c00c0a0a..80ce2e9a95a2 100644
--- a/drivers/virtio/virtio.c
+++ b/drivers/virtio/virtio.c
@@ -69,6 +69,10 @@ static struct attribute *virtio_dev_attrs[] = {
 };
 ATTRIBUTE_GROUPS(virtio_dev);
 
+/*
+ * called by:
+ *   - drivers/virtio/virtio.c|91| <<virtio_dev_match>> if (virtio_id_match(dev, &ids[i]))
+ */
 static inline int virtio_id_match(const struct virtio_device *dev,
 				  const struct virtio_device_id *id)
 {
@@ -80,6 +84,9 @@ static inline int virtio_id_match(const struct virtio_device *dev,
 
 /* This looks through all the IDs a driver claims to support.  If any of them
  * match, we return 1 and the kernel will call virtio_dev_probe(). */
+/*
+ * struct bus_type virtio_bus.match = virtio_dev_match()
+ */
 static int virtio_dev_match(struct device *_dv, struct device_driver *_dr)
 {
 	unsigned int i;
@@ -93,6 +100,9 @@ static int virtio_dev_match(struct device *_dv, struct device_driver *_dr)
 	return 0;
 }
 
+/*
+ * struct bus_type virtio_bus.uevent = virtio_uevent()
+ */
 static int virtio_uevent(struct device *_dv, struct kobj_uevent_env *env)
 {
 	struct virtio_device *dev = dev_to_virtio(_dv);
@@ -101,6 +111,10 @@ static int virtio_uevent(struct device *_dv, struct kobj_uevent_env *env)
 			      dev->id.device, dev->id.vendor);
 }
 
+/*
+ * called by:
+ *   - include/linux/virtio_config.h|168| <<virtio_has_feature>> virtio_check_driver_offered_feature(vdev, fbit);
+ */
 void virtio_check_driver_offered_feature(const struct virtio_device *vdev,
 					 unsigned int fbit)
 {
@@ -203,6 +217,9 @@ int virtio_finalize_features(struct virtio_device *dev)
 }
 EXPORT_SYMBOL_GPL(virtio_finalize_features);
 
+/*
+ * struct bus_type virtio_bus.probe = virtio_dev_probe()
+ */
 static int virtio_dev_probe(struct device *_d)
 {
 	int err, i;
@@ -278,6 +295,9 @@ static int virtio_dev_probe(struct device *_d)
 
 }
 
+/*
+ * struct bus_type virtio_bus.remove = virtio_dev_remove()
+ */
 static int virtio_dev_remove(struct device *_d)
 {
 	struct virtio_device *dev = dev_to_virtio(_d);
@@ -328,6 +348,16 @@ EXPORT_SYMBOL_GPL(unregister_virtio_driver);
  *
  * Returns: 0 on suceess, -error on failure
  */
+/*
+ * called by:
+ *   - arch/um/drivers/virtio_uml.c|1141| <<virtio_uml_probe>> rc = register_virtio_device(&vu_dev->vdev);
+ *   - drivers/platform/mellanox/mlxbf-tmfifo.c|1086| <<mlxbf_tmfifo_create_vdev>> ret = register_virtio_device(&tm_vdev->vdev);
+ *   - drivers/remoteproc/remoteproc_virtio.c|416| <<rproc_add_virtio_dev>> ret = register_virtio_device(vdev);
+ *   - drivers/s390/virtio/virtio_ccw.c|1321| <<virtio_ccw_online>> ret = register_virtio_device(&vcdev->vdev);
+ *   - drivers/virtio/virtio_mmio.c|626| <<virtio_mmio_probe>> rc = register_virtio_device(&vm_dev->vdev);
+ *   - drivers/virtio/virtio_pci_common.c|552| <<virtio_pci_probe>> rc = register_virtio_device(&vp_dev->vdev);
+ *   - drivers/virtio/virtio_vdpa.c|355| <<virtio_vdpa_probe>> ret = register_virtio_device(&vd_dev->vdev);
+ */
 int register_virtio_device(struct virtio_device *dev)
 {
 	int err;
diff --git a/drivers/virtio/virtio_dma_buf.c b/drivers/virtio/virtio_dma_buf.c
index 5127a2f0c986..12ee0ddf80af 100644
--- a/drivers/virtio/virtio_dma_buf.c
+++ b/drivers/virtio/virtio_dma_buf.c
@@ -17,6 +17,10 @@
  * for an virtio exported object that can be queried by other virtio drivers
  * for the object's UUID.
  */
+/*
+ * called by:
+ *   - drivers/gpu/drm/virtio/virtgpu_prime.c|109| <<virtgpu_gem_prime_export>> buf = virtio_dma_buf_export(&exp_info);
+ */
 struct dma_buf *virtio_dma_buf_export
 	(const struct dma_buf_export_info *exp_info)
 {
@@ -37,6 +41,12 @@ EXPORT_SYMBOL(virtio_dma_buf_export);
 /**
  * virtio_dma_buf_attach - mandatory attach callback for virtio dma-bufs
  */
+/*
+ * 在以下使用virtio_dma_buf_attach():
+ *   - drivers/gpu/drm/virtio/virtgpu_prime.c|49| <<global>> .attach = virtio_dma_buf_attach,
+ *   - drivers/virtio/virtio_dma_buf.c|28| <<global>> exp_info->ops->attach != &virtio_dma_buf_attach ||
+ *   - drivers/virtio/virtio_dma_buf.c|63| <<is_virtio_dma_buf>> return dma_buf->ops->attach == &virtio_dma_buf_attach;
+ */
 int virtio_dma_buf_attach(struct dma_buf *dma_buf,
 			  struct dma_buf_attachment *attach)
 {
@@ -58,6 +68,10 @@ EXPORT_SYMBOL(virtio_dma_buf_attach);
  * is_virtio_dma_buf - returns true if the given dma-buf is a virtio dma-buf
  * @dma_buf: buffer to query
  */
+/*
+ * called by:
+ *   - drivers/virtio/virtio_dma_buf.c|81| <<virtio_dma_buf_get_uuid>> if (!is_virtio_dma_buf(dma_buf))
+ */
 bool is_virtio_dma_buf(struct dma_buf *dma_buf)
 {
 	return dma_buf->ops->attach == &virtio_dma_buf_attach;
@@ -71,6 +85,9 @@ EXPORT_SYMBOL(is_virtio_dma_buf);
  *
  * Returns: 0 on success, negative on failure.
  */
+/*
+ * 没人调用
+ */
 int virtio_dma_buf_get_uuid(struct dma_buf *dma_buf,
 			    uuid_t *uuid)
 {
diff --git a/drivers/virtio/virtio_pci_common.c b/drivers/virtio/virtio_pci_common.c
index 222d630c41fc..3be1f8b9a48b 100644
--- a/drivers/virtio/virtio_pci_common.c
+++ b/drivers/virtio/virtio_pci_common.c
@@ -491,6 +491,9 @@ static const struct dev_pm_ops virtio_pci_pm_ops = {
 
 
 /* Qumranet donated their vendor ID for devices 0x1000 thru 0x10FF. */
+/*
+ * struct pci_driver virtio_pci_driver.id_table = virtio_pci_id_table
+ */
 static const struct pci_device_id virtio_pci_id_table[] = {
 	{ PCI_DEVICE(PCI_VENDOR_ID_REDHAT_QUMRANET, PCI_ANY_ID) },
 	{ 0 }
@@ -509,6 +512,9 @@ static void virtio_pci_release_dev(struct device *_d)
 	kfree(vp_dev);
 }
 
+/*
+ * struct pci_driver virtio_pci_driver.probe = virtio_pci_probe()
+ */
 static int virtio_pci_probe(struct pci_dev *pci_dev,
 			    const struct pci_device_id *id)
 {
@@ -571,6 +577,9 @@ static int virtio_pci_probe(struct pci_dev *pci_dev,
 	return rc;
 }
 
+/*
+ * struct pci_driver virtio_pci_driver.remove = virtio_pci_remove()
+ */
 static void virtio_pci_remove(struct pci_dev *pci_dev)
 {
 	struct virtio_pci_device *vp_dev = pci_get_drvdata(pci_dev);
@@ -589,6 +598,9 @@ static void virtio_pci_remove(struct pci_dev *pci_dev)
 	put_device(dev);
 }
 
+/*
+ * struct pci_driver virtio_pci_driver.sriov_configure = virtio_pci_sriov_configure()
+ */
 static int virtio_pci_sriov_configure(struct pci_dev *pci_dev, int num_vfs)
 {
 	struct virtio_pci_device *vp_dev = pci_get_drvdata(pci_dev);
diff --git a/drivers/virtio/virtio_pci_modern_dev.c b/drivers/virtio/virtio_pci_modern_dev.c
index cbd667496bb1..5320088d5fa0 100644
--- a/drivers/virtio/virtio_pci_modern_dev.c
+++ b/drivers/virtio/virtio_pci_modern_dev.c
@@ -16,6 +16,14 @@
  *
  * Returns the io address of for the part of the capability
  */
+/*
+ * called by:
+ *   - drivers/virtio/virtio_pci_modern.c|245| <<setup_vq>> vq->priv = (void __force *)vp_modern_map_capability(mdev,
+ *   - drivers/virtio/virtio_pci_modern_dev.c|275| <<vp_modern_probe>> mdev->common = vp_modern_map_capability(mdev, common,
+ *   - drivers/virtio/virtio_pci_modern_dev.c|281| <<vp_modern_probe>> mdev->isr = vp_modern_map_capability(mdev, isr, sizeof(u8), 1,
+ *   - drivers/virtio/virtio_pci_modern_dev.c|308| <<vp_modern_probe>> mdev->notify_base = vp_modern_map_capability(mdev, notify,
+ *   - drivers/virtio/virtio_pci_modern_dev.c|322| <<vp_modern_probe>> mdev->device = vp_modern_map_capability(mdev, device, 0, 4,
+ */
 void __iomem *vp_modern_map_capability(struct virtio_pci_modern_device *mdev, int off,
 				       size_t minlen,
 				       u32 align,
@@ -101,6 +109,13 @@ EXPORT_SYMBOL_GPL(vp_modern_map_capability);
  *
  * Returns offset of the capability, or 0.
  */
+/*
+ * called by:
+ *   - drivers/virtio/virtio_pci_modern_dev.c|232| <<vp_modern_probe>> common = virtio_pci_find_capability(pci_dev, VIRTIO_PCI_CAP_COMMON_CFG,
+ *   - drivers/virtio/virtio_pci_modern_dev.c|242| <<vp_modern_probe>> isr = virtio_pci_find_capability(pci_dev, VIRTIO_PCI_CAP_ISR_CFG,
+ *   - drivers/virtio/virtio_pci_modern_dev.c|245| <<vp_modern_probe>> notify = virtio_pci_find_capability(pci_dev, VIRTIO_PCI_CAP_NOTIFY_CFG,
+ *   - drivers/virtio/virtio_pci_modern_dev.c|265| <<vp_modern_probe>> device = virtio_pci_find_capability(pci_dev, VIRTIO_PCI_CAP_DEVICE_CFG,
+ */
 static inline int virtio_pci_find_capability(struct pci_dev *dev, u8 cfg_type,
 					     u32 ioresource_types, int *bars)
 {
@@ -202,6 +217,10 @@ static inline void check_offsets(void)
  *
  * Return 0 on succeed otherwise fail
  */
+/*
+ * called by:
+ *   - drivers/virtio/virtio_pci_modern.c|448| <<virtio_pci_modern_probe>> err = vp_modern_probe(mdev);
+ */
 int vp_modern_probe(struct virtio_pci_modern_device *mdev)
 {
 	struct pci_dev *pci_dev = mdev->pci_dev;
@@ -344,6 +363,10 @@ EXPORT_SYMBOL_GPL(vp_modern_probe);
  * vp_modern_probe: remove and cleanup the modern virtio pci device
  * @mdev: the modern virtio-pci device
  */
+/*
+ * called by:
+ *   - drivers/virtio/virtio_pci_modern.c|470| <<virtio_pci_modern_remove>> vp_modern_remove(mdev);
+ */
 void vp_modern_remove(struct virtio_pci_modern_device *mdev)
 {
 	struct pci_dev *pci_dev = mdev->pci_dev;
diff --git a/drivers/virtio/virtio_ring.c b/drivers/virtio/virtio_ring.c
index 71e16b53e9c1..a2daa2590524 100644
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -1122,6 +1122,12 @@ static inline int virtqueue_add_packed(struct virtqueue *_vq,
 		return virtqueue_add_indirect_packed(vq, sgs, total_sg,
 				out_sgs, in_sgs, data, gfp);
 
+	/*
+	 * struct vring_virtqueue *vq:
+	 * -> struct {
+	 *    -> u16 next_avail_idx;
+	 *    } packed;
+	 */
 	head = vq->packed.next_avail_idx;
 	avail_used_flags = vq->packed.avail_used_flags;
 
@@ -1956,6 +1962,11 @@ EXPORT_SYMBOL_GPL(virtqueue_enable_cb_prepare);
  *
  * This does not need to be serialized.
  */
+/*
+ * called by:
+ *   - drivers/net/virtio_net.c|335| <<virtqueue_napi_complete>> if (unlikely(virtqueue_poll(vq, opaque)))
+ *   - drivers/virtio/virtio_ring.c|1993| <<virtqueue_enable_cb>> return !virtqueue_poll(_vq, last_used_idx);
+ */
 bool virtqueue_poll(struct virtqueue *_vq, unsigned last_used_idx)
 {
 	struct vring_virtqueue *vq = to_vvq(_vq);
-- 
2.17.1

