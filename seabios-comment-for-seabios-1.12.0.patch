From d33d2cbd0391cc7cbfc4862f0ca2996e6dd88b45 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang@oracle.com>
Date: Wed, 12 Dec 2018 13:30:04 +0800
Subject: [PATCH 1/1] seabios: comment for seabios-1.12.0

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 src/fw/pciinit.c   | 147 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/hw/pci.c       |  17 +++++++
 src/hw/pci.h       |   5 ++
 src/hw/pcidevice.c |   5 ++
 4 files changed, 174 insertions(+)

diff --git a/src/fw/pciinit.c b/src/fw/pciinit.c
index c0634bc..c27ce2a 100644
--- a/src/fw/pciinit.c
+++ b/src/fw/pciinit.c
@@ -73,6 +73,9 @@ struct pci_bus {
     struct pci_device *bus_dev;
 };
 
+/*
+ * 返回存储region_num这个bar在config space中的offset
+ */
 static u32 pci_bar(struct pci_device *pci, int region_num)
 {
     if (region_num != PCI_ROM_SLOT) {
@@ -84,9 +87,52 @@ static u32 pci_bar(struct pci_device *pci, int region_num)
     return type == PCI_HEADER_TYPE_BRIDGE ? PCI_ROM_ADDRESS1 : PCI_ROM_ADDRESS;
 }
 
+/*
+ * called by:
+ *   - src/fw/pciinit.c|221| <<storage_ide_setup>> pci_set_io_region_addr(pci, 0, PORT_ATA1_CMD_BASE, 0);
+ *   - src/fw/pciinit.c|222| <<storage_ide_setup>> pci_set_io_region_addr(pci, 1, PORT_ATA1_CTRL_BASE, 0);
+ *   - src/fw/pciinit.c|223| <<storage_ide_setup>> pci_set_io_region_addr(pci, 2, PORT_ATA2_CMD_BASE, 0);
+ *   - src/fw/pciinit.c|224| <<storage_ide_setup>> pci_set_io_region_addr(pci, 3, PORT_ATA2_CTRL_BASE, 0);
+ *   - src/fw/pciinit.c|238| <<pic_ibm_setup>> pci_set_io_region_addr(pci, 0, 0x80800000 + 0x00040000, 0);
+ *   - src/fw/pciinit.c|244| <<apple_macio_setup>> pci_set_io_region_addr(pci, 0, 0x80800000, 0);
+ *   - src/fw/pciinit.c|1059| <<pci_region_map_one_entry>> pci_set_io_region_addr(entry->dev, entry->bar, addr, entry->is64);
+ *
+ * 更新pci config space中某个bar的地址
+ *
+ * 更新的时候在qemu中会执行以下代码, 如果修改了某个bar的地址, 会调用pci_update_mappings()!
+ * 1679 void pci_default_write_config(PCIDevice *d, uint32_t addr, uint32_t val_in, int l)
+ * 1680 {
+ * 1681     int i, was_irq_disabled = pci_irq_disabled(d);
+ * 1682     uint32_t val = val_in;
+ * 1683     
+ * 1684     for (i = 0; i < l; val >>= 8, ++i) {
+ * 1685         uint8_t wmask = d->wmask[addr + i]; 
+ * 1686         uint8_t w1cmask = d->w1cmask[addr + i];
+ * 1687         assert(!(wmask & w1cmask));
+ * 1688         d->config[addr + i] = (d->config[addr + i] & ~wmask) | (val & wmask);
+ * 1689         d->config[addr + i] &= ~(val & w1cmask); // W1C: Write 1 to Clear
+ * 1690     }
+ * 1691     if (ranges_overlap(addr, l, PCI_BASE_ADDRESS_0, 24) ||
+ * 1692         ranges_overlap(addr, l, PCI_ROM_ADDRESS, 4) ||
+ * 1693         ranges_overlap(addr, l, PCI_ROM_ADDRESS1, 4) ||
+ * 1694         range_covers_byte(addr, l, PCI_COMMAND))
+ * 1695         pci_update_mappings(d);
+ * 1696             
+ * 1697     if (range_covers_byte(addr, l, PCI_COMMAND)) {
+ * 1698         pci_update_irq_disabled(d, was_irq_disabled);
+ * 1699         memory_region_set_enabled(&d->bus_master_enable_region,
+ * 1700                                   pci_get_word(d->config + PCI_COMMAND)
+ * 1701                                     & PCI_COMMAND_MASTER);
+ * 1702     }
+ * 1703     
+ * 1704     msi_write_config(d, addr, val_in, l);
+ * 1705     msix_write_config(d, addr, val_in, l);
+ * 1706 }
+ */
 static void
 pci_set_io_region_addr(struct pci_device *pci, int bar, u64 addr, int is64)
 {
+    /* 返回存储bar在config space中的offset */
     u32 ofs = pci_bar(pci, bar);
     pci_config_writel(pci->bdf, ofs, addr);
     if (is64)
@@ -515,6 +561,10 @@ static const struct pci_device_id pci_platform_tbl[] = {
     PCI_DEVICE_END
 };
 
+/*
+ * called only by:
+ *   - src/fw/pciinit.c|1233| <<pci_setup>> pci_bios_init_platform();
+ */
 static void pci_bios_init_platform(void)
 {
     struct pci_device *pci;
@@ -563,12 +613,24 @@ static u8 pci_find_resource_reserve_capability(u16 bdf)
  * Bus initialization
  ****************************************************************/
 
+/*
+ * called by:
+ *   - src/fw/pciinit.c|614| <<pci_bios_init_bus_rec>> pci_bios_init_bus_rec(secbus, pci_bus);
+ *   - src/fw/pciinit.c|655| <<pci_bios_init_bus>> pci_bios_init_bus_rec(0 , &pci_bus);
+ *   - src/fw/pciinit.c|660| <<pci_bios_init_bus>> pci_bios_init_bus_rec(pci_bus, &pci_bus);
+ */
 static void
 pci_bios_init_bus_rec(int bus, u8 *pci_bus)
 {
     int bdf;
     u16 class;
 
+    /*
+     * 默认如果不添加额外的bus就能发现一个'bus = 0x0'
+     *
+     * === PCI bus & bridge init ===
+     * PCI: pci_bios_init_bus_rec bus = 0x0
+     */
     dprintf(1, "PCI: %s bus = 0x%x\n", __func__, bus);
 
     /* prevent accidental access to unintended devices */
@@ -646,6 +708,10 @@ pci_bios_init_bus_rec(int bus, u8 *pci_bus)
     }
 }
 
+/*
+ * called by only:
+ *   - src/fw/pciinit.c|1217| <<pci_setup>> pci_bios_init_bus();
+ */
 static void
 pci_bios_init_bus(void)
 {
@@ -768,6 +834,11 @@ static void pci_region_migrate_64bit_entries(struct pci_region *from,
     }
 }
 
+/*
+ * called by:
+ *   - src/fw/pciinit.c|888| <<pci_bios_check_devices>> struct pci_region_entry *entry = pci_region_create_entry(
+ *   - src/fw/pciinit.c|975| <<pci_bios_check_devices>> struct pci_region_entry *entry = pci_region_create_entry(
+ */
 static struct pci_region_entry *
 pci_region_create_entry(struct pci_bus *bus, struct pci_device *dev,
                         int bar, u64 size, u64 align, int type, int is64)
@@ -850,6 +921,10 @@ static int pci_bridge_has_region(struct pci_device *pci,
     return pci_config_readb(pci->bdf, base) != 0;
 }
 
+/*
+ * called by only:
+ *   - src/fw/pciinit.c|1250| <<pci_setup>> if (pci_bios_check_devices(busses))
+ */
 static int pci_bios_check_devices(struct pci_bus *busses)
 {
     dprintf(1, "PCI: check devices\n");
@@ -1013,6 +1088,11 @@ static int pci_bios_init_root_regions_io(struct pci_bus *bus)
     return 0;
 }
 
+/*
+ * called by:
+ *   - src/fw/pciinit.c|1140| <<pci_bios_map_devices>> if (pci_bios_init_root_regions_mem(busses)) {
+ *   - src/fw/pciinit.c|1149| <<pci_bios_map_devices>> if (pci_bios_init_root_regions_mem(busses))
+ */
 static int pci_bios_init_root_regions_mem(struct pci_bus *bus)
 {
     struct pci_region *r_end = &bus->r[PCI_REGION_TYPE_PREFMEM];
@@ -1041,6 +1121,10 @@ static int pci_bios_init_root_regions_mem(struct pci_bus *bus)
 #define PCI_MEMORY_SHIFT        16
 #define PCI_PREF_MEMORY_SHIFT   16
 
+/*
+ * called by:
+ *   - src/fw/pciinit.c|1093| <<pci_region_map_entries>> pci_region_map_one_entry(entry, addr);
+ */
 static void
 pci_region_map_one_entry(struct pci_region_entry *entry, u64 addr)
 {
@@ -1074,6 +1158,51 @@ pci_region_map_one_entry(struct pci_region_entry *entry, u64 addr)
     }
 }
 
+/*
+ * called by:
+ *   - src/fw/pciinit.c|1154| <<pci_bios_map_devices>> pci_region_map_entries(busses, &r64_mem);
+ *   - src/fw/pciinit.c|1155| <<pci_bios_map_devices>> pci_region_map_entries(busses, &r64_pref);
+ *   - src/fw/pciinit.c|1165| <<pci_bios_map_devices>> pci_region_map_entries(busses, &busses[bus].r[type]);
+ *
+ * === PCI new allocation pass #2 ===
+ * PCI: IO: c000 - c07f
+ * PCI: 32: 00000000c0000000 - 00000000fec00000
+ * PCI: map device bdf=00:1f.3  bar 4, addr 0000c000, size 00000040 [io]
+ * PCI: map device bdf=00:02.0  bar 2, addr 0000c040, size 00000020 [io]
+ * PCI: map device bdf=00:1f.2  bar 4, addr 0000c060, size 00000020 [io]
+ * PCI: map device bdf=00:02.0  bar 6, addr fea00000, size 00040000 [mem]
+ * PCI: map device bdf=00:02.0  bar 0, addr fea40000, size 00020000 [mem]
+ * PCI: map device bdf=00:02.0  bar 1, addr fea60000, size 00020000 [mem]
+ * PCI: map device bdf=00:01.0  bar 6, addr fea80000, size 00010000 [mem]
+ * PCI: map device bdf=00:02.0  bar 3, addr fea90000, size 00004000 [mem]
+ * PCI: map device bdf=00:03.0  bar 0, addr fea94000, size 00002000 [mem]
+ * PCI: map device bdf=00:01.0  bar 2, addr fea96000, size 00001000 [mem]
+ * PCI: map device bdf=00:03.0  bar 4, addr fea97000, size 00001000 [mem]
+ * PCI: map device bdf=00:04.0  bar 0, addr fea98000, size 00001000 [mem]
+ * PCI: map device bdf=00:1f.2  bar 5, addr fea99000, size 00001000 [mem]
+ * PCI: map device bdf=00:01.0  bar 0, addr fd000000, size 01000000 [prefmem]
+ *
+ * c0000000-febfffff : PCI Bus 0000:00
+ *   fd000000-fdffffff : 0000:00:01.0
+ *   fe000000-fe1fffff : PCI Bus 0000:01
+ *   fe800000-fe9fffff : PCI Bus 0000:01
+ *   fea00000-fea3ffff : 0000:00:02.0
+ *   fea40000-fea5ffff : 0000:00:02.0
+ *     fea40000-fea5ffff : e1000e
+ *   fea60000-fea7ffff : 0000:00:02.0
+ *     fea60000-fea7ffff : e1000e
+ *   fea90000-fea93fff : 0000:00:02.0
+ *     fea90000-fea93fff : e1000e
+ *   fea94000-fea95fff : 0000:00:03.0
+ *     fea94000-fea95fff : nvme
+ *   fea96000-fea96fff : 0000:00:01.0
+ *   fea97000-fea97fff : 0000:00:03.0
+ *     fea97000-fea97fff : nvme
+ *   fea98000-fea98fff : 0000:00:04.0
+ *   fea99000-fea99fff : 0000:00:1f.2
+ *     fea99000-fea99fff : ahci
+ * 100000000-8ffffffff : PCI Bus 0000:00
+ */
 static void pci_region_map_entries(struct pci_bus *busses, struct pci_region *r)
 {
     struct hlist_node *n;
@@ -1090,6 +1219,10 @@ static void pci_region_map_entries(struct pci_bus *busses, struct pci_region *r)
     }
 }
 
+/*
+ * called by:
+ *   - src/fw/pciinit.c|1209| <<pci_setup>> pci_bios_map_devices(busses);
+ */
 static void pci_bios_map_devices(struct pci_bus *busses)
 {
     if (pci_bios_init_root_regions_io(busses))
@@ -1146,6 +1279,10 @@ static void pci_bios_map_devices(struct pci_bus *busses)
  * Main setup code
  ****************************************************************/
 
+/*
+ * 只被以下调用:
+ *   - src/fw/paravirt.c|165| <<qemu_platform_setup>> pci_setup();
+ */
 void
 pci_setup(void)
 {
@@ -1158,12 +1295,22 @@ pci_setup(void)
     if (pci_probe_host() != 0) {
         return;
     }
+    /* 发现所有的bus */
     pci_bios_init_bus();
 
+    /* 发现所有的device */
     dprintf(1, "=== PCI device probing ===\n");
+    /*
+     * 遍历每个bus上的每一个存在的bdf(可以是设置也可以是另外一个bus)
+     * 分配和初始化struct pci_device, 挂载到&PCIDevices.first
+     */
     pci_probe_devices();
 
     pcimem_start = RamSize;
+    /*
+     * q35会触发调用pci_platform_tbl中的hook mch_mem_addr_setup()
+     * 测试的时候只针对root bus (bdf=0)调用
+     */
     pci_bios_init_platform();
 
     dprintf(1, "=== PCI new allocation pass #1 ===\n");
diff --git a/src/hw/pci.c b/src/hw/pci.c
index 9855bad..2c467fa 100644
--- a/src/hw/pci.c
+++ b/src/hw/pci.c
@@ -11,7 +11,13 @@
 #include "util.h" // udelay
 #include "x86.h" // outl
 
+/*
+ * pci用io port写的时候,先往addr寄存器写地址, 再往data寄存器写数据
+ */
+
+/* 在qemu中是MCH_HOST_BRIDGE_CONFIG_ADDR */
 #define PORT_PCI_CMD           0x0cf8
+/* 在qemu中是MCH_HOST_BRIDGE_CONFIG_DATA */
 #define PORT_PCI_DATA          0x0cfc
 
 void pci_config_writel(u16 bdf, u32 addr, u32 val)
@@ -83,6 +89,9 @@ u8 pci_find_capability(u16 bdf, u8 cap_id, u8 cap)
 }
 
 // Helper function for foreachbdf() macro - return next device
+/*
+ * 不停的增加bdf, 直到找到一个在bus上存在的bdf
+ */
 int
 pci_next(int bdf, int bus)
 {
@@ -114,6 +123,14 @@ pci_next(int bdf, int bus)
 int
 pci_probe_host(void)
 {
+    /*
+     * q35应该调用的qemu的pci_host_config_write()
+     *
+     * PCI规范使用从0CF8H~0CFFH 这8个I/O地址来访问所有设备的PCI配置空间.
+     * 这8个字节实际上构成了两个32位寄存器:0CF8H寄存器叫做"配置地址寄存器";
+     * 0CFCH叫做"配置数据寄存器".
+     * 当要访问配置空间的寄存器时,先向地址寄存器写上目标地址,然后就可以从数据寄存器中读写数据了.
+     */
     outl(0x80000000, PORT_PCI_CMD);
     if (inl(PORT_PCI_CMD) != 0x80000000) {
         dprintf(1, "Detected non-PCI system\n");
diff --git a/src/hw/pci.h b/src/hw/pci.h
index 2e30e28..fbf5f83 100644
--- a/src/hw/pci.h
+++ b/src/hw/pci.h
@@ -23,10 +23,15 @@ static inline u8 pci_bdf_to_fn(u16 bdf) {
 static inline u16 pci_to_bdf(int bus, int dev, int fn) {
     return (bus<<8) | (dev<<3) | fn;
 }
+/* 给定bus和devfn, 转换成bdf */
 static inline u16 pci_bus_devfn_to_bdf(int bus, u16 devfn) {
     return (bus << 8) | devfn;
 }
 
+/*
+ * pci_next(): 不停的增加bdf, 直到找到一个在bus上存在的bdf
+ * pci_bus_devfn_to_bdf(): 给定bus和devfn, 转换成bdf
+ */
 #define foreachbdf(BDF, BUS)                                    \
     for (BDF=pci_next(pci_bus_devfn_to_bdf((BUS), 0)-1, (BUS))  \
          ; BDF >= 0                                             \
diff --git a/src/hw/pcidevice.c b/src/hw/pcidevice.c
index 8853cf7..0ecd38d 100644
--- a/src/hw/pcidevice.c
+++ b/src/hw/pcidevice.c
@@ -17,6 +17,10 @@ struct hlist_head PCIDevices VARVERIFY32INIT;
 int MaxPCIBus VARFSEG;
 
 // Find all PCI devices and populate PCIDevices linked list.
+/*
+ * 遍历每个bus上的每一个存在的bdf
+ * 分配和初始化struct pci_device, 挂载到&PCIDevices.first
+ */
 void
 pci_probe_devices(void)
 {
@@ -37,6 +41,7 @@ pci_probe_devices(void)
                 return;
             }
             memset(dev, 0, sizeof(*dev));
+	    /* pprev一开始是&PCIDevices.first */
             hlist_add(&dev->node, pprev);
             pprev = &dev->node.next;
             count++;
-- 
2.7.4

