From 8991d0cfba7f7be393cc35c5f3a2c12fa499cab3 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Tue, 28 Apr 2020 21:06:46 -0700
Subject: [PATCH 1/1] qemu for 2.10.0

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 hw/core/hotplug.c    |  4 ++
 hw/core/machine.c    |  4 ++
 hw/i386/pc.c         | 88 ++++++++++++++++++++++++++++++++++++++++++++
 include/hw/hotplug.h |  7 ++++
 4 files changed, 103 insertions(+)

diff --git a/hw/core/hotplug.c b/hw/core/hotplug.c
index 17ac9866..b5fa9677 100644
--- a/hw/core/hotplug.c
+++ b/hw/core/hotplug.c
@@ -13,6 +13,10 @@
 #include "hw/hotplug.h"
 #include "qemu/module.h"
 
+/*
+ * called by:
+ *   - hw/core/qdev.c|907| <<device_set_realized>> hotplug_handler_pre_plug(hotplug_ctrl, dev, &local_err);
+ */
 void hotplug_handler_pre_plug(HotplugHandler *plug_handler,
                               DeviceState *plugged_dev,
                               Error **errp)
diff --git a/hw/core/machine.c b/hw/core/machine.c
index 41b53a17..019640bb 100644
--- a/hw/core/machine.c
+++ b/hw/core/machine.c
@@ -360,6 +360,10 @@ static void machine_init_notify(Notifier *notifier, void *data)
     foreach_dynamic_sysbus_device(error_on_sysbus_device, NULL);
 }
 
+/*
+ * called by:
+ *   - monitor.c|4195| <<qmp_query_hotpluggable_cpus>> return machine_query_hotpluggable_cpus(ms);
+ */
 HotpluggableCPUList *machine_query_hotpluggable_cpus(MachineState *machine)
 {
     int i;
diff --git a/hw/i386/pc.c b/hw/i386/pc.c
index 21081041..ac835117 100644
--- a/hw/i386/pc.c
+++ b/hw/i386/pc.c
@@ -1133,6 +1133,11 @@ void pc_hot_add_cpu(const int64_t id, Error **errp)
     }
 }
 
+/*
+ * called by:
+ *   - hw/i386/pc_piix.c|151| <<pc_init1>> pc_cpus_init(pcms);
+ *   - hw/i386/pc_q35.c|122| <<pc_q35_init>> pc_cpus_init(pcms);
+ */
 void pc_cpus_init(PCMachineState *pcms)
 {
     int i;
@@ -1144,6 +1149,11 @@ void pc_cpus_init(PCMachineState *pcms)
     MachineState *machine = MACHINE(pcms);
     MachineClass *mc = MACHINE_GET_CLASS(pcms);
 
+    /*
+     * 如果cmdline是-cpu, host,kvm_pv_unhalt
+     * 这里machine->cpu_model就是"host,kvm_pv_unhalt"
+     */
+
     /* init CPUs */
     if (machine->cpu_model == NULL) {
 #ifdef TARGET_X86_64
@@ -1900,6 +1910,63 @@ static void pc_cpu_unplug_cb(HotplugHandler *hotplug_dev,
     error_propagate(errp, local_err);
 }
 
+/*
+ * (gdb) bt
+ * #0  pc_cpu_pre_plug (hotplug_dev=0x5555567ceda0, dev=0x55555681bd70, errp=0x7fffffffdb90) at /home/zhang/kvm/qemu-2.10.0/hw/i386/pc.c:1930
+ * #1  0x0000555555837bad in pc_machine_device_pre_plug_cb (hotplug_dev=0x5555567ceda0, dev=0x55555681bd70, errp=0x7fffffffdb90) at /home/zhang/kvm/qemu-2.10.0/hw/i386/pc.c:2041
+ * #2  0x000055555597693c in hotplug_handler_pre_plug (plug_handler=0x5555567ceda0, plugged_dev=0x55555681bd70, errp=0x7fffffffdb90) at hw/core/hotplug.c:23
+ * #3  0x0000555555972087 in device_set_realized (obj=0x55555681bd70, value=true, errp=0x7fffffffdd48) at hw/core/qdev.c:907
+ * #4  0x0000555555b2dc53 in property_set_bool (obj=0x55555681bd70, v=0x555556834290, name=0x555555c82470 "realized", opaque=0x5555567eda50, errp=0x7fffffffdd48) at qom/object.c:1886
+ * #5  0x0000555555b2bfe5 in object_property_set (obj=0x55555681bd70, v=0x555556834290, name=0x555555c82470 "realized", errp=0x7fffffffdd48) at qom/object.c:1093
+ * #6  0x0000555555b2efc0 in object_property_set_qobject (obj=0x55555681bd70, value=0x555556838190, name=0x555555c82470 "realized", errp=0x7fffffffdd48) at qom/qom-qobject.c:27
+ * #7  0x0000555555b2c26d in object_property_set_bool (obj=0x55555681bd70, value=true, name=0x555555c82470 "realized", errp=0x7fffffffdd48) at qom/object.c:1162
+ * #8  0x0000555555834b34 in pc_new_cpu (typename=0x555556722840 "host-x86_64-cpu", apic_id=0, errp=0x55555670dbd8 <error_fatal>) at /home/zhang/kvm/qemu-2.10.0/hw/i386/pc.c:1102
+ * #9  0x000055555583503b in pc_cpus_init (pcms=0x5555567ceda0) at /home/zhang/kvm/qemu-2.10.0/hw/i386/pc.c:1207
+ * #10 0x0000555555839367 in pc_init1 (machine=0x5555567ceda0, host_type=0x555555c83778 "i440FX-pcihost", pci_type=0x555555c83771 "i440FX") at /home/zhang/kvm/qemu-2.10.0/hw/i386/pc_piix.c:151
+ * #11 0x0000555555839f8f in pc_init_v2_10 (machine=0x5555567ceda0) at /home/zhang/kvm/qemu-2.10.0/hw/i386/pc_piix.c:446
+ * #12 0x0000555555979b45 in machine_run_board_init (machine=0x5555567ceda0) at hw/core/machine.c:760
+ * #13 0x00005555558f1d89 in main (argc=14, argv=0x7fffffffe388, envp=0x7fffffffe400) at vl.c:4633
+ *
+ * (gdb) bt
+ * #0  pc_cpu_pre_plug (hotplug_dev=0x5561d941ada0, dev=0x5561da8ce080, errp=0x7ffe334584d0) at /home/zhang/kvm/qemu-2.10.0/hw/i386/pc.c:1930
+ * #1  0x00005561d7de3bad in pc_machine_device_pre_plug_cb (hotplug_dev=0x5561d941ada0, dev=0x5561da8ce080, errp=0x7ffe334584d0)
+ *     at /home/zhang/kvm/qemu-2.10.0/hw/i386/pc.c:2041
+ * #2  0x00005561d7f2293c in hotplug_handler_pre_plug (plug_handler=0x5561d941ada0, plugged_dev=0x5561da8ce080, errp=0x7ffe334584d0)
+ *     at hw/core/hotplug.c:23
+ * #3  0x00005561d7f1e087 in device_set_realized (obj=0x5561da8ce080, value=true, errp=0x7ffe33458690) at hw/core/qdev.c:907
+ * #4  0x00005561d80d9c53 in property_set_bool (obj=0x5561da8ce080, v=0x5561da54ad20, name=0x5561d82403af "realized", opaque=0x5561da651270,
+ *     errp=0x7ffe33458690) at qom/object.c:1886
+ * #5  0x00005561d80d7fe5 in object_property_set (obj=0x5561da8ce080, v=0x5561da54ad20, name=0x5561d82403af "realized", errp=0x7ffe33458690)
+ *     at qom/object.c:1093
+ * #6  0x00005561d80dafc0 in object_property_set_qobject (obj=0x5561da8ce080, value=0x5561da54ad00, name=0x5561d82403af "realized",
+ *     errp=0x7ffe33458690) at qom/qom-qobject.c:27
+ * #7  0x00005561d80d826d in object_property_set_bool (obj=0x5561da8ce080, value=true, name=0x5561d82403af "realized", errp=0x7ffe33458690)
+ *     at qom/object.c:1162
+ * #8  0x00005561d7e903e3 in qdev_device_add (opts=0x5561da61c790, errp=0x7ffe33458700) at qdev-monitor.c:630
+ * #9  0x00005561d7e90bbf in qmp_device_add (qdict=0x5561da88b800, ret_data=0x0, errp=0x7ffe33458740) at qdev-monitor.c:807
+ * #10 0x00005561d7eb9571 in hmp_device_add (mon=0x5561d9433da0, qdict=0x5561da88b800) at hmp.c:1925
+ * #11 0x00005561d7d4c697 in handle_hmp_command (mon=0x5561d9433da0,
+ *     cmdline=0x5561d94646fb "SandyBridge-x86_64-cpu,socket-id=2,core-id=0,thread-id=0,id=cpu2") at /home/zhang/kvm/qemu-2.10.0/monitor.c:3119
+ * #12 0x00005561d7d4e83a in monitor_command_cb (opaque=0x5561d9433da0,
+ *     cmdline=0x5561d94646f0 "device_add SandyBridge-x86_64-cpu,socket-id=2,core-id=0,thread-id=0,id=cpu2", readline_opaque=0x0)
+ *     at /home/zhang/kvm/qemu-2.10.0/monitor.c:3922
+ * #13 0x00005561d820088d in readline_handle_byte (rs=0x5561d94646f0, ch=10) at util/readline.c:393
+ * #14 0x00005561d7d4e794 in monitor_read (opaque=0x5561d9433da0, buf=0x7ffe334588e0 "\n", size=1) at /home/zhang/kvm/qemu-2.10.0/monitor.c:3905
+ * #15 0x00005561d816ec35 in qemu_chr_be_write_impl (s=0x5561d9428430, buf=0x7ffe334588e0 "\n", len=1) at chardev/char.c:167
+ * #16 0x00005561d816ec9d in qemu_chr_be_write (s=0x5561d9428430, buf=0x7ffe334588e0 "\n", len=1) at chardev/char.c:179
+ * #17 0x00005561d8177433 in tcp_chr_read (chan=0x5561da891800, cond=G_IO_IN, opaque=0x5561d9428430) at chardev/char-socket.c:441
+ * #18 0x00005561d818f68a in qio_channel_fd_source_dispatch (source=0x5561d9428ac0, callback=0x5561d8177290 <tcp_chr_read>,
+ *     user_data=0x5561d9428430) at io/channel-watch.c:84
+ * #19 0x00007f310364c099 in g_main_context_dispatch () from /lib64/libglib-2.0.so.0
+ * #20 0x00005561d81e45fc in glib_pollfds_poll () at util/main-loop.c:213
+ * #21 0x00005561d81e46fa in os_host_main_loop_wait (timeout=1000000000) at util/main-loop.c:261
+ * #22 0x00005561d81e47b6 in main_loop_wait (nonblocking=0) at util/main-loop.c:515
+ * #23 0x00005561d7e9643e in main_loop () at vl.c:1917
+ * #24 0x00005561d7e9e10b in main (argc=14, argv=0x7ffe33459e78, envp=0x7ffe33459ef0) at vl.c:4791
+ *
+ * called by:
+ *   - hw/i386/pc.c|2004| <<pc_machine_device_pre_plug_cb>> pc_cpu_pre_plug(hotplug_dev, dev, errp);
+ */
 static void pc_cpu_pre_plug(HotplugHandler *hotplug_dev,
                             DeviceState *dev, Error **errp)
 {
@@ -1910,6 +1977,10 @@ static void pc_cpu_pre_plug(HotplugHandler *hotplug_dev,
     X86CPU *cpu = X86_CPU(dev);
     PCMachineState *pcms = PC_MACHINE(hotplug_dev);
 
+    /*
+     * 如果cpu的类型是host, 这里pcms->parent_obj.cpu_model="host"
+     */
+
     /* if APIC ID is not set, set it based on socket/core/thread properties */
     if (cpu->apic_id == UNASSIGNED_APIC_ID) {
         int max_socket = (max_cpus - 1) / smp_threads / smp_cores;
@@ -1997,6 +2068,16 @@ static void pc_cpu_pre_plug(HotplugHandler *hotplug_dev,
     numa_cpu_pre_plug(cpu_slot, dev, errp);
 }
 
+/*
+ * 使用pre_plug的地方:
+ *   - hw/core/hotplug.c|22| <<hotplug_handler_pre_plug>> if (hdc->pre_plug) {
+ *   - hw/core/hotplug.c|23| <<hotplug_handler_pre_plug>> hdc->pre_plug(plug_handler, plugged_dev, errp);
+ *   - hw/i386/pc.c|2358| <<pc_machine_class_init>> hc->pre_plug = pc_machine_device_pre_plug_cb;
+ *   - hw/ppc/spapr.c|3462| <<spapr_machine_class_init>> hc->pre_plug = spapr_machine_device_pre_plug;
+ *
+ * 在以下使用pc_machine_device_pre_plug_cb():
+ *   - hw/i386/pc.c|2358| <<pc_machine_class_init>> hc->pre_plug = pc_machine_device_pre_plug_cb;
+ */
 static void pc_machine_device_pre_plug_cb(HotplugHandler *hotplug_dev,
                                           DeviceState *dev, Error **errp)
 {
@@ -2355,6 +2436,13 @@ static void pc_machine_class_init(ObjectClass *oc, void *data)
     mc->block_default_type = IF_IDE;
     mc->max_cpus = 255;
     mc->reset = pc_machine_reset;
+    /*
+     * 使用pre_plug的地方:
+     *   - hw/core/hotplug.c|22| <<hotplug_handler_pre_plug>> if (hdc->pre_plug) {
+     *   - hw/core/hotplug.c|23| <<hotplug_handler_pre_plug>> hdc->pre_plug(plug_handler, plugged_dev, errp);
+     *   - hw/i386/pc.c|2358| <<pc_machine_class_init>> hc->pre_plug = pc_machine_device_pre_plug_cb;
+     *   - hw/ppc/spapr.c|3462| <<spapr_machine_class_init>> hc->pre_plug = spapr_machine_device_pre_plug;
+     */
     hc->pre_plug = pc_machine_device_pre_plug_cb;
     hc->plug = pc_machine_device_plug_cb;
     hc->unplug_request = pc_machine_device_unplug_request_cb;
diff --git a/include/hw/hotplug.h b/include/hw/hotplug.h
index 1a0516a4..aa8a0c59 100644
--- a/include/hw/hotplug.h
+++ b/include/hw/hotplug.h
@@ -59,6 +59,13 @@ typedef struct HotplugHandlerClass {
     InterfaceClass parent;
 
     /* <public> */
+    /*
+     * 使用pre_plug的地方:
+     *   - hw/core/hotplug.c|22| <<hotplug_handler_pre_plug>> if (hdc->pre_plug) {
+     *   - hw/core/hotplug.c|23| <<hotplug_handler_pre_plug>> hdc->pre_plug(plug_handler, plugged_dev, errp);
+     *   - hw/i386/pc.c|2358| <<pc_machine_class_init>> hc->pre_plug = pc_machine_device_pre_plug_cb;
+     *   - hw/ppc/spapr.c|3462| <<spapr_machine_class_init>> hc->pre_plug = spapr_machine_device_pre_plug;
+     */
     hotplug_fn pre_plug;
     hotplug_fn plug;
     hotplug_fn unplug_request;
-- 
2.17.1

