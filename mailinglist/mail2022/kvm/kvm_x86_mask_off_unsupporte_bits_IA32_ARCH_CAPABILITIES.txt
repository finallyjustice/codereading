[PATCH] KVM: x86: Mask off unsupported and unknown bits of IA32_ARCH_CAPABILITIES

... from Jim Mattson <jmattson@google.com> ...

https://lore.kernel.org/all/20220826224755.1330512-1-jmattson@google.com/


The KVM may support the virtualization of many features. The KVM may claim the
supports bits via IA32_ARCH_CAPABILITIES (e.g., the 'arch_capabilities' in
lscpu).

However, KVM should not claim to virtualize unknown IA32_ARCH_CAPABILITIES
bits. When kvm_get_arch_capabilities() was originally written, there were only
a few bits defined in this MSR, and KVM could virtualize all of them. However,
over the years, several bits have been defined that KVM cannot just blindly
pass through to the guest without additional work (such as virtualizing an MSR
promised by the IA32_ARCH_CAPABILITES feature bit).

E.g., the KVM obtains MSR_IA32_ARCH_CAPABILITIES to data at line 1565, and
return almost unconditionally at line 1616 (except line 1614).

1562 static u64 kvm_get_arch_capabilities(void)
1561 {
1562         u64 data = 0;
1563
1564         if (boot_cpu_has(X86_FEATURE_ARCH_CAPABILITIES))
1565                 rdmsrl(MSR_IA32_ARCH_CAPABILITIES, data);
1566
1567         /*
1568          * If nx_huge_pages is enabled, KVM's shadow paging will ensure that
1569          * the nested hypervisor runs with NX huge pages.  If it is not,
1570          * L1 is anyway vulnerable to ITLB_MULTIHIT exploits from other
1571          * L1 guests, so it need not worry about its own (L2) guests.
1572          */
1573         data |= ARCH_CAP_PSCHANGE_MC_NO;
1574
1575         /*
1576          * If we're doing cache flushes (either "always" or "cond")
1577          * we will do one whenever the guest does a vmlaunch/vmresume.
1578          * If an outer hypervisor is doing the cache flush for us
1579          * (VMENTER_L1D_FLUSH_NESTED_VM), we can safely pass that
1580          * capability to the guest too, and if EPT is disabled we're not
1581          * vulnerable.  Overall, only VMENTER_L1D_FLUSH_NEVER will
1582          * require a nested hypervisor to do a flush of its own.
1583          */
1584         if (l1tf_vmx_mitigation != VMENTER_L1D_FLUSH_NEVER)
1585                 data |= ARCH_CAP_SKIP_VMENTRY_L1DFLUSH;
... ...
1613         /* Guests don't need to know "Fill buffer clear control" exists */
1614         data &= ~ARCH_CAP_FB_CLEAR_CTRL;
1615 
1616         return data;
1617 }


This patch defines a mask of supported IA32_ARCH_CAPABILITIES bits, and mask
off any other bits that are set in the hardware MSR. The bits are in
KVM_SUPPORTED_ARCH_CAP.

 static u64 kvm_get_arch_capabilities(void)
 {
 	u64 data = 0;
 
-	if (boot_cpu_has(X86_FEATURE_ARCH_CAPABILITIES))
+	if (boot_cpu_has(X86_FEATURE_ARCH_CAPABILITIES)) {
 		rdmsrl(MSR_IA32_ARCH_CAPABILITIES, data);
+		data &= KVM_SUPPORTED_ARCH_CAP;
+	}
 
 	/*
