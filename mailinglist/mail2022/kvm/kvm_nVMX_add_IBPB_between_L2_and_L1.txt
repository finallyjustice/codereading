[PATCH v2 0/2] KVM: nVMX: Add IBPB between L2 and L1 to

... from Jim Mattson <jmattson@google.com> ...

https://lore.kernel.org/all/20221019213620.1953281-1-jmattson@google.com/

This is CVE-2022-2196.

The core idea is to enable IBPB which should be used together with IBRS.

According to Intel's document on Indirect Branch Restricted Speculation,
"Enabling IBRS does not prevent software from controlling the predicted targets
of indirect branches of unrelated software executed later at the same predictor
mode (for example, between two different user applications, or two different
virtual machines). Such isolation can be ensured through use of the Indirect
Branch Predictor Barrier (IBPB) command." This applies to both basic and
enhanced IBRS.

Since L1 and L2 VMs share hardware predictor modes (guest-user and
guest-kernel), hardware IBRS is not sufficient to virtualize IBRS. (The way
that basic IBRS is implemented on pre-eIBRS parts, hardware IBRS is actually
sufficient in practice, even though it isn't sufficient architecturally.)

For virtual CPUs that support IBRS, add an indirect branch prediction barrier
on emulated VM-exit, to ensure that the predicted targets of indirect branches
executed in L1 cannot be controlled by software that was executed in L2.

Since we typically don't intercept guest writes to IA32_SPEC_CTRL, perform the
IBPB at emulated VM-exit regardless of the current IA32_SPEC_CTRL.IBRS value,
even though the IBPB could technically be deferred until L1 sets
IA32_SPEC_CTRL.IBRS, if IA32_SPEC_CTRL.IBRS is clear at emulated VM-exit.


The function to use IBPB is indirect_branch_prediction_barrier().

@@ -4767,6 +4767,17 @@ void nested_vmx_vmexit(struct kvm_vcpu *vcpu, u32 vm_exit_reason,
 
 	vmx_switch_vmcs(vcpu, &vmx->vmcs01);
 
+	/*
+	 * If IBRS is advertised to the vCPU, KVM must flush the indirect
+	 * branch predictors when transitioning from L2 to L1, as L1 expects
+	 * hardware (KVM in this case) to provide separate predictor modes.
+	 * Bare metal isolates VMX root (host) from VMX non-root (guest), but
+	 * doesn't isolate different VMCSs, i.e. in this case, doesn't provide
+	 * separate modes for L2 vs L1.
+	 */
+	if (guest_cpuid_has(vcpu, X86_FEATURE_SPEC_CTRL))
+		indirect_branch_prediction_barrier();
+


Reference:

https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2018/03/07/spectre-mitigation

https://www.cnblogs.com/kvm-qemu/articles/9692967.html
