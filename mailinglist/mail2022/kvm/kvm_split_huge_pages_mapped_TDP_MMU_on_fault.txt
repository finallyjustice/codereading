[PATCH v2 0/2] KVM: Split huge pages mapped by the TDP MMU on fault

... from David Matlack <dmatlack@google.com> ...

https://lore.kernel.org/all/20221019234050.3919566-1-dmatlack@google.com/

The tdp_mmu_split_huge_page() is available to split a huge page into multiple
4-K pages.

- In the past, if the NX huge page is executed, the KVM clears the mapping and
remaps a 4KB exec page. There will be page faults if the nearby pages are
accessed later (read, write, exec).

- With tdp_mmu_split_huge_page(), the KVM explicitly replace the huge page into
mappings. No page fault will happen.

------------------------------------

[PATCH v2 1/2] KVM: selftests: Introduce a selftest to measure execution performance

This patch introduces a selftest to access memory by executing it. It is
helpful to test NX hugepage.


Introduce a new selftest, execute_perf_test, that uses the
perf_test_util framework to measure the performance of executing code
within a VM. This test is similar to the other perf_test_util-based
tests in that it spins up a variable number of vCPUs and runs them
concurrently, accessing memory.

In order to support executiong, extend perf_test_util to populate guest
memory with return instructions rather than random garbage. This way
memory can be execute simply by calling it.

Currently only x86-64 supports execution, but other architectures can be
easily added by providing their return code instruction.

------------------------------------

[PATCH v2 2/2] KVM: x86/mmu: Split huge pages mapped by the TDP MMU on fault


Now that the TDP MMU has a mechanism to split huge pages, use it in the
fault path when a huge page needs to be replaced with a mapping at a
lower level.

This change reduces the negative performance impact of NX HugePages.
Prior to this change if a vCPU executed from a huge page and NX
HugePages was enabled, the vCPU would take a fault, zap the huge page,
and mapping the faulting address at 4KiB with execute permissions
enabled. The rest of the memory would be left *unmapped* and have to be
faulted back in by the guest upon access (read, write, or execute). If
guest is backed by 1GiB, a single execute instruction can zap an entire
GiB of its physical address space.

For example, it can take a VM longer to execute from its memory than to
populate that memory in the first place:

$ ./execute_perf_test -s anonymous_hugetlb_1gb -v96

Populating memory             : 2.748378795s
Executing from memory         : 2.899670885s

With this change, such faults split the huge page instead of zapping it,
which avoids the non-present faults on the rest of the huge page:

$ ./execute_perf_test -s anonymous_hugetlb_1gb -v96

Populating memory             : 2.729544474s
Executing from memory         : 0.111965688s   <---
