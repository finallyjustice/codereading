[PATCH] virtio_net: introduce TX timeout watchdog

... from Tony Lu <tony.ly@linux.alibaba.com> ...

https://lore.kernel.org/all/20210917084004.44332-1-tonylu@linux.alibaba.com/

The tx timeout handler does not do anything, but just to print a log.

+static void virtnet_tx_timeout(struct net_device *dev, unsigned int txqueue)
+{
+	struct virtnet_info *priv = netdev_priv(dev);
+	struct send_queue *sq = &priv->sq[txqueue];
+	struct netdev_queue *txq = netdev_get_tx_queue(dev, txqueue);
+
+	u64_stats_update_begin(&sq->stats.syncp);
+	sq->stats.tx_timeouts++;
+	u64_stats_update_end(&sq->stats.syncp);
+
+	netdev_err(dev, "TX timeout on queue: %u, sq: %s, vq: 0x%x, name: %s, %u usecs ago\n",
+		   txqueue, sq->name, sq->vq->index, sq->vq->name,
+		   jiffies_to_usecs(jiffies - txq->trans_start));
+}


The e1000 may reset the device.

3490 /**
3491  * e1000_tx_timeout - Respond to a Tx Hang
3492  * @netdev: network interface device structure
3493  * @txqueue: number of the Tx queue that hung (unused)
3494  **/
3495 static void e1000_tx_timeout(struct net_device *netdev, unsigned int __always_unused txqueue)
3496 {
3497         struct e1000_adapter *adapter = netdev_priv(netdev);
3498
3499         /* Do the reset outside of interrupt context */
3500         adapter->tx_timeout_count++;
3501         schedule_work(&adapter->reset_task);
3502 }
3503
3504 static void e1000_reset_task(struct work_struct *work)
3505 {
3506         struct e1000_adapter *adapter =
3507                 container_of(work, struct e1000_adapter, reset_task);
3508
3509         e_err(drv, "Reset adapter\n");
3510         e1000_reinit_locked(adapter);
3511 }
