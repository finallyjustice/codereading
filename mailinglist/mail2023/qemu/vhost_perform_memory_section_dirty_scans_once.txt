[PATCH] vhost: Perform memory section dirty scans once per iteration

... from Joao Martins <joao.m.martins@oracle.com> ...

https://lore.kernel.org/qemu-devel/20230927111428.15982-1-joao.m.martins@oracle.com/

---------------------------

The vhost is kernel space thread. It will need to access the userspace memory.
Therefore, we may need to register the KVM VM space memory to it.

We may register the same memory space to all/multiple vhost devices.

The below are stacks to add and commit the memory space.

(gdb) bt
#0  vhost_region_add_section (dev=0x5555572db030, section=0x7fffffffdcc0) at ../hw/virtio/vhost.c:681
#1  0x0000555555b27839 in vhost_region_addnop (listener=0x5555572db038, section=0x7fffffffdcc0) at ../hw/virtio/vhost.c:794
#2  0x0000555555d9138d in address_space_update_topology_pass (as=0x555556fba100 <address_space_memory>, old_view=0x555557711610, new_view=0x55555772cf90, adding=true) at ../system/memory.c:1004
#3  0x0000555555d9168d in address_space_set_flatview (as=0x555556fba100 <address_space_memory>) at ../system/memory.c:1080
#4  0x0000555555d91846 in memory_region_transaction_commit () at ../system/memory.c:1132
#5  0x0000555555d95725 in memory_region_update_container_subregions (subregion=0x5555570a8c00) at ../system/memory.c:2630
#6  0x0000555555d957d0 in memory_region_add_subregion_common (mr=0x5555572c8400, offset=0, subregion=0x5555570a8c00) at ../system/memory.c:2645
#7  0x0000555555d9580c in memory_region_add_subregion (mr=0x5555572c8400, offset=0, subregion=0x5555570a8c00) at ../system/memory.c:2653
#8  0x0000555555c5dc59 in pc_memory_init (pcms=0x5555572bf2d0, system_memory=0x5555572c8400, rom_memory=0x5555570fc6e0, pci_hole64_size=2147483648) at ../hw/i386/pc.c:954
#9  0x0000555555c3f9e7 in pc_init1 (machine=0x5555572bf2d0, host_type=0x555556219858 "i440FX-pcihost", pci_type=0x555556219851 "i440FX") at ../hw/i386/pc_piix.c:246
#10 0x0000555555c405d7 in pc_init_v8_2 (machine=0x5555572bf2d0) at ../hw/i386/pc_piix.c:555
#11 0x00005555559243b5 in machine_run_board_init (machine=0x5555572bf2d0, mem_path=0x0, errp=0x7fffffffe120) at ../hw/core/machine.c:1509
#12 0x0000555555b75478 in qemu_init_board () at ../system/vl.c:2613
#13 0x0000555555b756fd in qmp_x_exit_preconfig (errp=0x555556fce260 <error_fatal>) at ../system/vl.c:2704
#14 0x0000555555b780dc in qemu_init (argc=23, argv=0x7fffffffe448) at ../system/vl.c:3753
#15 0x0000555555e02daf in main (argc=23, argv=0x7fffffffe448) at ../system/main.c:47

(gdb) bt
#0  vhost_region_add_section (dev=0x5555572db3d0, section=0x7ffe66dfc1d0) at ../hw/virtio/vhost.c:681
#1  0x0000555555b27839 in vhost_region_addnop (listener=0x5555572db3d8, section=0x7ffe66dfc1d0) at ../hw/virtio/vhost.c:794
#2  0x0000555555d91169 in address_space_update_topology_pass (as=0x555556fba100 <address_space_memory>, old_view=0x7fffec2ab0a0, new_view=0x7ffe5c054f00, adding=true) at ../system/memory.c:985
#3  0x0000555555d9168d in address_space_set_flatview (as=0x555556fba100 <address_space_memory>) at ../system/memory.c:1080
#4  0x0000555555d91846 in memory_region_transaction_commit () at ../system/memory.c:1132
#5  0x0000555555d959ec in memory_region_del_subregion (mr=0x55555713c800, subregion=0x55555785cce0) at ../system/memory.c:2680
#6  0x0000555555a4a8b7 in pci_update_mappings (d=0x55555785ab30) at ../hw/pci/pci.c:1539
#7  0x0000555555a4ad39 in pci_default_write_config (d=0x55555785ab30, addr=4, val_in=256, l=2) at ../hw/pci/pci.c:1607
#8  0x0000555555a4f838 in pci_host_config_write_common (pci_dev=0x55555785ab30, addr=4, limit=256, val=256, len=2) at ../hw/pci/pci_host.c:96
#9  0x0000555555a4fa5e in pci_data_write (s=0x5555573e6060, addr=2147485956, val=256, len=2) at ../hw/pci/pci_host.c:138
#10 0x0000555555a4fbf5 in pci_host_data_write (opaque=0x5555573afb10, addr=0, val=256, len=2) at ../hw/pci/pci_host.c:188
#11 0x0000555555d8f37d in memory_region_write_accessor (mr=0x5555573aff50, addr=0, value=0x7ffe66dfc5a8, size=2, shift=0, mask=65535, attrs=...) at ../system/memory.c:497
#12 0x0000555555d8f692 in access_with_adjusted_size (addr=0, value=0x7ffe66dfc5a8, size=2, access_size_min=1, access_size_max=4, access_fn=
                                   0x555555d8f287 <memory_region_write_accessor>, mr=0x5555573aff50, attrs=...) at ../system/memory.c:573
#13 0x0000555555d92776 in memory_region_dispatch_write (mr=0x5555573aff50, addr=0, data=256, op=MO_16, attrs=...) at ../system/memory.c:1521
#14 0x0000555555da00c4 in flatview_write_continue (fv=0x7fffec281390, addr=3324, attrs=..., ptr=0x7ffff42a0000, len=2, addr1=0, l=2, mr=0x5555573aff50) at ../system/physmem.c:2714
#15 0x0000555555da0227 in flatview_write (fv=0x7fffec281390, addr=3324, attrs=..., buf=0x7ffff42a0000, len=2) at ../system/physmem.c:2756
#16 0x0000555555da05d7 in address_space_write (as=0x555556fba0a0 <address_space_io>, addr=3324, attrs=..., buf=0x7ffff42a0000, len=2) at ../system/physmem.c:2863
#17 0x0000555555da0644 in address_space_rw (as=0x555556fba0a0 <address_space_io>, addr=3324, attrs=..., buf=0x7ffff42a0000, len=2, is_write=true) at ../system/physmem.c:2873
#18 0x0000555555df2d18 in kvm_handle_io (port=3324, attrs=..., data=0x7ffff42a0000, direction=1, size=2, count=1) at ../accel/kvm/kvm-all.c:2632
#19 0x0000555555df35bb in kvm_cpu_exec (cpu=0x5555573a4d30) at ../accel/kvm/kvm-all.c:2905
#20 0x0000555555df62fa in kvm_vcpu_thread_fn (arg=0x5555573a4d30) at ../accel/kvm/kvm-accel-ops.c:51
#21 0x00005555560017cc in qemu_thread_start (args=0x5555573aed40) at ../util/qemu-thread-posix.c:541
#22 0x00007ffff749f812 in start_thread () at /lib64/libc.so.6
#23 0x00007ffff743f450 in clone3 () at /lib64/libc.so.6


However, during the live migration, the QEMU will need to collect dirty bitmap
for vhost from those spaces.

As all vhost-kernel devices use the same space, it is time consuming to
re-collect for them for each device.


(gdb) bt
#0  vhost_sync_dirty_bitmap (dev=0x555557056990, section=0x7ffe42b2a5b0, first=0, last=18446744073709551615) at ../hw/virtio/vhost.c:156
#1  0x0000555555b262c8 in vhost_log_sync (listener=0x555557056998, section=0x7ffe42b2a5b0) at ../hw/virtio/vhost.c:237
#2  0x0000555555d9457b in memory_region_sync_dirty_bitmap (mr=0x0, last_stage=false) at ../system/memory.c:2279
#3  0x0000555555d96484 in memory_global_dirty_log_sync (last_stage=false) at ../system/memory.c:2885
#4  0x0000555555da947e in migration_bitmap_sync (rs=0x7ffe38002270, last_stage=false) at ../migration/ram.c:1046
#5  0x0000555555da96b6 in migration_bitmap_sync_precopy (rs=0x7ffe38002270, last_stage=false) at ../migration/ram.c:1094
#6  0x0000555555dac854 in ram_init_bitmaps (rs=0x7ffe38002270) at ../migration/ram.c:2811
#7  0x0000555555dac8f3 in ram_init_all (rsp=0x555556fba420 <ram_state>) at ../migration/ram.c:2834
#8  0x0000555555dacc28 in ram_save_setup (f=0x5555572c9a30, opaque=0x555556fba420 <ram_state>) at ../migration/ram.c:2947
#9  0x0000555555bb55e0 in qemu_savevm_state_setup (f=0x5555572c9a30) at ../migration/savevm.c:1345
#10 0x0000555555b9f3d4 in migration_thread (opaque=0x555557058db0) at ../migration/migration.c:3340
#11 0x00005555560017cc in qemu_thread_start (args=0x5555578610b0) at ../util/qemu-thread-posix.c:541
#12 0x00007ffff749f812 in start_thread () at /lib64/libc.so.6
#13 0x00007ffff743f450 in clone3 () at /lib64/libc.so.6


The core idea of the patch is to remove the below. That is, to only collect
bitmap for memory space for one vhost-kernel device (once).

@@ -141,13 +157,16 @@ static int vhost_sync_dirty_bitmap(struct vhost_dev *dev,
     start_addr = MAX(first, start_addr);
     end_addr = MIN(last, end_addr);

-    for (i = 0; i < dev->mem->nregions; ++i) {
-        struct vhost_memory_region *reg = dev->mem->regions + i;
-        vhost_dev_sync_region(dev, section, start_addr, end_addr,
-                              reg->guest_phys_addr,
-                              range_get_last(reg->guest_phys_addr,
-                                             reg->memory_size));
+    if (vhost_log_dev_enabled(dev)) {
+        for (i = 0; i < dev->mem->nregions; ++i) {
+            struct vhost_memory_region *reg = dev->mem->regions + i;
+            vhost_dev_sync_region(dev, section, start_addr, end_addr,
+                                  reg->guest_phys_addr,
+                                  range_get_last(reg->guest_phys_addr,
+                                                 reg->memory_size));
+        }
     }
+
