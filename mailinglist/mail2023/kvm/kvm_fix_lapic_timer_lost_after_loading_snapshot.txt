PATCH] KVM: x86: Fix lapic timer interrupt lost after loading a snapshot.

... from Haitao Shan <hshan@google.com> ...

https://lore.kernel.org/all/20230912161518.199484-1-hshan@google.com/

--------------------------

虽然patch关于snapshot的, 总感觉和live migration也有关系.

commit 8e6ed96cdd50 ("KVM: x86: fire timer when it is
migrated and expired, and in oneshot mode")只是让问题更容易重现.
让__start_apic_timer()更容易timeout.

timeout的时候会最终inject irq和更新PIR.

但是kvm_x86_apicv_post_state_restore()会reset PIR.
timer的中断丢失!

其实bug是967235d32032 ("KVM: vmx: clear pending interrupts on KVM_SET_LAPIC")引入的.


Sean不喜欢这个fix. 认为还是要放在kvm_x86_apicv_post_state_restore()上.

@@ -2977,14 +2977,14 @@ int kvm_apic_set_state(struct kvm_vcpu *vcpu, struct kvm_lapic_state *s)
 	apic_update_lvtt(apic);
 	apic_manage_nmi_watchdog(apic, kvm_lapic_get_reg(apic, APIC_LVT0));
 	update_divide_count(apic);
-	__start_apic_timer(apic, APIC_TMCCT);
-	kvm_lapic_set_reg(apic, APIC_TMCCT, 0);
 	kvm_apic_update_apicv(vcpu);
 	if (apic->apicv_active) {
 		static_call_cond(kvm_x86_apicv_post_state_restore)(vcpu);
 		static_call_cond(kvm_x86_hwapic_irr_update)(vcpu, apic_find_highest_irr(apic));
 		static_call_cond(kvm_x86_hwapic_isr_update)(apic_find_highest_isr(apic));
 	}
+	__start_apic_timer(apic, APIC_TMCCT);
+	kvm_lapic_set_reg(apic, APIC_TMCCT, 0);
 	kvm_make_request(KVM_REQ_EVENT, vcpu);
 	if (ioapic_in_kernel(vcpu->kvm))
 		kvm_rtc_eoi_tracking_restore_one(vcpu);


在v3的patch里, 就是把reset的函数移动到了前面.

https://lore.kernel.org/all/20230913000215.478387-1-hshan@google.com/

The fix is to move vmx_apicv_post_state_restore to the beginning of
the KVM_SET_LAPIC call and rename to vmx_apicv_pre_state_restore.
What vmx_apicv_post_state_restore does is actually clearing any
former apicv state and this behavior is more suitable to carry out
in the beginning.

