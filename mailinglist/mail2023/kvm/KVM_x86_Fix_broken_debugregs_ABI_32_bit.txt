[PATCH 0/9] Upgrade vPMU version to 5

... from Xiong Zhang <xiong.y.zhang@intel.com> ...

https://lore.kernel.org/all/20230901072809.640175-1-xiong.y.zhang@intel.com/

--------------------------

This series have 3 patches.

[PATCH 0/3] KVM: x86 - misc fixes

--------------------------

[PATCH 1/3] KVM: x86: Fix KVM_GET_MSRS stack info leak

The kvm has the feature in kvm_msr_ignored_check(). The objective is not to
return error (1) even for unsupported MSR.

As mentioned by Sean:

    The whole point of ignore_msrs was so that KVM could run _guest_ code that isn't
    aware it's running in a VM, and so attempts to access MSRs that the _guest_ thinks
    are always available.

    The feature MSRs API is used only by userspace which obviously should know that
    it's dealing with KVM.  Ignoring bad access from the host is just asinine.


However, the bad code may not initialize data.

@@ -1704,22 +1704,17 @@ static int do_get_msr_feature(struct kvm_vcpu *vcpu, unsigned index, u64 *data)
 	struct kvm_msr_entry msr;
 	int r;

+	/* Unconditionally clear the output for simplicity */
+	msr.data = 0;
 	msr.index = index;
 	r = kvm_get_msr_feature(&msr);


--------------------------

[PATCH 2/3] KVM: x86: Simplify kvm_vcpu_ioctl_x86_get_debugregs()

Later Sean had a patch to rework more.

--------------------------

[PATCH 3/3] KVM: x86: Fix broken debugregs ABI for 32 bit kernels

The below is buggy.

    -	memcpy(dbgregs->db, vcpu->arch.db, sizeof(vcpu->arch.db));

When the API is used for 32-bit, the memcpy is wrong.

struct kvm_debugregs {
    __u64 db[4];
    __u64 dr6;
    __u64 dr7;
    __u64 flags;
    __u64 reserved[9];
};


struct kvm_vcpu *vcpu:
-> struct kvm_vcpu_arch arch;
   -> unsigned long db[KVM_NR_DB_REGS]; --> 4


According to Sean:

    And this has always been broken, so if there were ever users of 32-bit KVM, they
    obviously didn't use this API :-)

    If the code weren't also a cleanup for 64-bit, I would vote to change the APIs
    to just fail for 32-bit.  But there's just no good reason to assume that the
    layouts of KVM's internal storage and "struct kvm_debugregs" are identical.

