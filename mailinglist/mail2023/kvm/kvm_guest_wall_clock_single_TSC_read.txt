[PATCH] KVM: x86: Refine calculation of guest wall clock to use a single TSC read

... David Woodhouse <dwmw2@infradead.org> ...

https://lore.kernel.org/all/ee446c823002dc92c8ea525f21d00a9f5d27de59.camel@infradead.org/

--------------------------

在kvm host那里, 返回的wallclock不是当前的时间, 而是启动VM的那个时候的wallclock.

现在获取的方式是:

wall_nsec = ktime_get_real_ns() - get_kvmclock_ns(kvm);

这个等于获取两次now, 是很不好的做法.

好的方法是同时取a pair of ns and tsc.

+uint64_t kvm_get_wall_clock_epoch(struct kvm *kvm)
+{
+	/*
+	 * The guest calculates current wall clock time by adding
+	 * system time (updated by kvm_guest_time_update below) to the
+	 * wall clock specified here.  We do the reverse here.
+	 */
+#ifdef CONFIG_X86_64
+	struct pvclock_vcpu_time_info hv_clock;
+	struct kvm_arch *ka = &kvm->arch;
+	unsigned long seq, local_tsc_khz = 0;
+	struct timespec64 ts;
+	uint64_t host_tsc;
+
+	do {
+		seq = read_seqcount_begin(&ka->pvclock_sc);
+
+		if (!ka->use_master_clock)
+			break;
+
+		/* It all has to happen on the same CPU */
+		get_cpu();
+
+		local_tsc_khz = get_cpu_tsc_khz();
+
+		if (local_tsc_khz &&
+		    !kvm_get_walltime_and_clockread(&ts, &host_tsc))
+			local_tsc_khz = 0; /* Fall back to old method */
+

"ka->master_kernel_ns + ka->kvmclock_offset"是更新masterclock的时候VM启动了的时间长度
"ka->master_cycle_now"是更新masterclock的时候VM的tsc

+		hv_clock.tsc_timestamp = ka->master_cycle_now;
+		hv_clock.system_time = ka->master_kernel_ns + ka->kvmclock_offset;
+
+		put_cpu();
+	} while (read_seqcount_retry(&ka->pvclock_sc, seq));
+
+	/*
+	 * If the conditions were right, and obtaining the wallclock+TSC was
+	 * successful, calculate the KVM clock at the corresponding time and
+	 * subtract one from the other to get the epoch in nanoseconds.
+	 */
+	if (local_tsc_khz) {
+		kvm_get_time_scale(NSEC_PER_SEC, local_tsc_khz * 1000LL,
+				   &hv_clock.tsc_shift,
+				   &hv_clock.tsc_to_system_mul);
+		return ts.tv_nsec + NSEC_PER_SEC * ts.tv_sec -
+			__pvclock_read_cycles(&hv_clock, host_tsc);
+	}
+#endif
+	return ktime_get_real_ns() - get_kvmclock_ns(kvm);
+}
