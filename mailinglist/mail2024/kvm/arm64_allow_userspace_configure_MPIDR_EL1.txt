[RFC PATCH] arm64: KVM: Allow userspace to configure guest MPIDR_EL1

... from Ashok Kumar <ashoks@broadcom.com> ...

https://lore.kernel.org/all/1461161319-38835-1-git-send-email-ashoks@broadcom.com/

--------------------------

这个patch虽然是2024年的, 但是基于的旧的code.

{ SYS_DESC(SYS_MPIDR_EL1), NULL, reset_mpidr, MPIDR_EL1 },

对应


 52 struct sys_reg_desc {
 53         /* Sysreg string for debug */
 54         const char *name;
 55
 56         enum {
 57                 AA32_DIRECT,
 58                 AA32_LO,
 59                 AA32_HI,
 60         } aarch32_map;
 61
 62         /* MRS/MSR instruction which accesses it. */
 63         u8      Op0;
 64         u8      Op1;
 65         u8      CRn;
 66         u8      CRm;
 67         u8      Op2;
 68
 69         /* Trapped access from guest, if non-NULL. */
 70         bool (*access)(struct kvm_vcpu *,
 71                        struct sys_reg_params *,
 72                        const struct sys_reg_desc *);
 73
 74         /*
 75          * Initialization for vcpu. Return initialized value, or KVM
 76          * sanitized value for ID registers.
 77          */
 78         u64 (*reset)(struct kvm_vcpu *, const struct sys_reg_desc *);
 79
 80         /* Index into sys_reg[], or 0 if we don't need to save it. */
 81         int reg;
 82
 83         /* Value (usually reset value), or write mask for idregs */
 84         u64 val;
 85
 86         /* Custom get/set_user functions, fallback to generic if NULL */
 87         int (*get_user)(struct kvm_vcpu *vcpu, const struct sys_reg_desc *rd,
 88                         u64 *val);
 89         int (*set_user)(struct kvm_vcpu *vcpu, const struct sys_reg_desc *rd,
 90                         u64 val);
 91
 92         /* Return mask of REG_* runtime visibility overrides */
 93         unsigned int (*visibility)(const struct kvm_vcpu *vcpu,
 94                                    const struct sys_reg_desc *rd);
 95 };


patch中的修改:

@@ -902,7 +910,7 @@ static const struct sys_reg_desc sys_reg_descs[] = {

 	/* MPIDR_EL1 */
 	{ Op0(0b11), Op1(0b000), CRn(0b0000), CRm(0b0000), Op2(0b101),
-	  NULL, reset_mpidr, MPIDR_EL1 },
+	  NULL, reset_mpidr, MPIDR_EL1, 0, NULL, set_mpidr },

access()还是NULL,
reset()还是reset_mpidr(),
reg还是MPIDR_EL1
val成为了0
get_user成为了NULL
set_user成为了set_mpidr.



 830 static u64 reset_mpidr(struct kvm_vcpu *vcpu, const struct sys_reg_desc *r)
 831 {
 832         u64 mpidr;
 833
 834         /*
 835          * Map the vcpu_id into the first three affinity level fields of
 836          * the MPIDR. We limit the number of VCPUs in level 0 due to a
 837          * limitation to 16 CPUs in that level in the ICC_SGIxR registers
 838          * of the GICv3 to be able to address each CPU directly when
 839          * sending IPIs.
 840          */
 841         /*
 842          * MPIDR_LEVEL_SHIFT(0) = (((1 << 0) >> 1) << 3) = 0
 843          * MPIDR_LEVEL_SHIFT(1) = (((1 << 1) >> 1) << 3) = 8
 844          * MPIDR_LEVEL_SHIFT(2) = (((1 << 2) >> 1) << 3) = 16 (0x10)
 845          *
 846          * 1. 取出vcpu_id最后4位[0:3], 当作mpidr的[0:7]
 847          * 2. 取出vcpu_id的[4:11]这8位, 当作mpidr的[8:15]
 848          * 3. 取出vcpu_id的[12:19]这8位, 当作mpidr的[16:23]
 849          * 4. mpidr[31](最高位)是1
 850          */
 851         mpidr = (vcpu->vcpu_id & 0x0f) << MPIDR_LEVEL_SHIFT(0);
 852         mpidr |= ((vcpu->vcpu_id >> 4) & 0xff) << MPIDR_LEVEL_SHIFT(1);
 853         mpidr |= ((vcpu->vcpu_id >> 12) & 0xff) << MPIDR_LEVEL_SHIFT(2);
 854         mpidr |= (1ULL << 31);
 855         vcpu_write_sys_reg(vcpu, mpidr, MPIDR_EL1);
 856
 857         return mpidr;
 858 }
