[PATCH] KVM: avoid NULL pointer dereference in kvm_dirty_ring_push

... from Paolo Bonzini ...

https://lore.kernel.org/all/20220406171923.14712-1-pbonzini@redhat.com/


When the VM is going to be released (destroyed) via fd:

kvm_vcpu_fops.release = kvm_vcpu_release()
-> kvm_put_kvm()
   -> kvm_destroy_vm()
      -> kvm_arch_destroy_vm()
         -> kvm_free_vcpus()
            -> kvm_destroy_vcpus()
               -> kvm_vcpu_destroy()
                  -> kvm_dirty_ring_free()
                     -> set ring->dirty_gfns = NULL !!!!
                  -> kvm_arch_vcpu_destroy()
                     -> static_call(kvm_x86_vcpu_free)(vcpu) = vmx_free_vcpu()
                        -> nested_vmx_free_vcpu()
                           -> vcpu_put()
                              -> kvm_arch_vcpu_put()
                                 -> kvm_steal_time_set_preempted()

                                                                                       vcpu_enter_guest()
                                                                                       -> record_steal_time()
                                                                                          -> set vcpu->arch.st.preempted to 0
                                    -> if (vcpu->arch.st.preempted) return;
                                    -> mark_page_dirty_in_slot()
                                       -> kvm_dirty_ring_push()
                                          -> access ring->dirty_gfns !!!!


As a result, there is a race that ring->dirty_gfns is accessed after it is set
to NULL.

The fix is to release the dirty page ring after kvm_arch_vcpu_destroy
has run.
