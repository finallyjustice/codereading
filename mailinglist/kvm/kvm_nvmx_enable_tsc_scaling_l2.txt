[PATCH] KVM: nVMX: Always enable TSC scaling for L2 when it was enabled for L1

... from Vitaly Kuznetsov <vkuznets@redhat.com> ...

https://lore.kernel.org/all/20220712135009.952805-1-vkuznets@redhat.com/

感觉这个问题不只和hyper-v有关.

L0应该是KVM ---> tsc scaling被enable了.

L1是windows as hyper-v. 用的tsc freq和L0不一样, 所以用了tsc scaling.

L2是window? 因为L0 KVM的bug, l0-l2的tsc scaling没用, 所以tsc freq不对.

那为什么l1 hang了呢?????

diff --git a/arch/x86/kvm/vmx/nested.c b/arch/x86/kvm/vmx/nested.c
index 778f82015f03..bfa366938c49 100644
--- a/arch/x86/kvm/vmx/nested.c
+++ b/arch/x86/kvm/vmx/nested.c
@@ -2284,7 +2284,6 @@ static void prepare_vmcs02_early(struct vcpu_vmx *vmx, struct loaded_vmcs *vmcs0
 				  SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY |
 				  SECONDARY_EXEC_APIC_REGISTER_VIRT |
 				  SECONDARY_EXEC_ENABLE_VMFUNC |
-				  SECONDARY_EXEC_TSC_SCALING |
 				  SECONDARY_EXEC_DESC);

 		if (nested_cpu_has(vmcs12,


Windows 10/11 guests with Hyper-V role (WSL2) enabled are observed to
hang upon boot or shortly after when a non-default TSC frequency was
set for L1. The issue is observed on a host where TSC scaling is
supported. The problem appears to be that Windows doesn't use TSC
frequency for its guests even when the feature is advertised and KVM
filters SECONDARY_EXEC_TSC_SCALING out when creating L2 controls from
L1's. This leads to L2 running with the default frequency (matching
host's) while L1 is running with an altered one.

Keep SECONDARY_EXEC_TSC_SCALING in secondary exec controls for L2 when
it was set for L1. TSC_MULTIPLIER is already correctly computed and
written by prepare_vmcs02().
