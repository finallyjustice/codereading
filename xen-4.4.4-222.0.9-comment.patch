From 38eab15b54452037fc7e0073f8846d9111dc344c Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang@oracle.com>
Date: Tue, 23 Jun 2020 08:58:08 -0700
Subject: [PATCH 1/1] xen-4.4.4-222.0.9-comment

xen-4.4.4-222.0.9

Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
---
 xen/arch/x86/hvm/hvm.c             |  7 ++++++
 xen/arch/x86/hvm/vmx/vmcs.c        |  5 ++++
 xen/arch/x86/hvm/vmx/vmx.c         | 26 ++++++++++++++++++++
 xen/arch/x86/mm/p2m-ept.c          | 15 ++++++++++++
 xen/drivers/passthrough/vtd/dmar.c | 38 ++++++++++++++++++++++++++++++
 5 files changed, 91 insertions(+)

diff --git a/xen/arch/x86/hvm/hvm.c b/xen/arch/x86/hvm/hvm.c
index 7e46310741..829f643557 100644
--- a/xen/arch/x86/hvm/hvm.c
+++ b/xen/arch/x86/hvm/hvm.c
@@ -1617,6 +1617,13 @@ void hvm_inject_page_fault(int errcode, unsigned long cr2)
     hvm_inject_trap(&trap);
 }
 
+/*
+ * called by:
+ *   - arch/x86/hvm/svm/svm.c|1371| <<svm_do_nested_pgfault>> ret = hvm_hap_nested_page_fault(gpa, ~0ul, npfec);
+ *   - arch/x86/hvm/vmx/vmx.c|2454| <<ept_handle_violation>> ret = hvm_hap_nested_page_fault(gpa, gla, npfec);
+ *
+ * npfec是Nested page fault exception codes.
+ */
 int hvm_hap_nested_page_fault(paddr_t gpa, unsigned long gla,
                               struct npfec npfec)
 {
diff --git a/xen/arch/x86/hvm/vmx/vmcs.c b/xen/arch/x86/hvm/vmx/vmcs.c
index ae0e3885df..5a5e7b5e28 100644
--- a/xen/arch/x86/hvm/vmx/vmcs.c
+++ b/xen/arch/x86/hvm/vmx/vmcs.c
@@ -63,6 +63,11 @@ integer_param("ple_gap", ple_gap);
 static unsigned int __read_mostly ple_window = 4096;
 integer_param("ple_window", ple_window);
 
+/*
+ * 在以下使用opt_ept_ifu_shatter:
+ *   - arch/x86/hvm/vmx/vmcs.c|79| <<parse_ept_param>> opt_ept_ifu_shatter = val;
+ *   - arch/x86/mm/p2m-ept.c|121| <<ept_p2m_type_to_flags>> if ( opt_ept_ifu_shatter && is_epte_superpage(entry) )
+ */
 int8_t opt_ept_ifu_shatter = -1;
 
 static int __init parse_ept_param(const char *s)
diff --git a/xen/arch/x86/hvm/vmx/vmx.c b/xen/arch/x86/hvm/vmx/vmx.c
index d9892791ba..d6aebda790 100644
--- a/xen/arch/x86/hvm/vmx/vmx.c
+++ b/xen/arch/x86/hvm/vmx/vmx.c
@@ -2407,6 +2407,20 @@ static void vmx_wbinvd_intercept(void)
         wbinvd();
 }
 
+/*
+ * called by:
+ *   - arch/x86/hvm/vmx/vmx.c|3147| <<vmx_vmexit_handler>> ept_handle_violation(exit_qualification, gpa);
+ *
+ * 3145     case EXIT_REASON_EPT_VIOLATION:
+ * 3146     {   
+ * 3147         paddr_t gpa;
+ * 3148     
+ * 3149         __vmread(GUEST_PHYSICAL_ADDRESS, &gpa);
+ * 3150         __vmread(EXIT_QUALIFICATION, &exit_qualification);
+ * 3151         ept_handle_violation(exit_qualification, gpa);
+ * 3152         break;
+ * 3153     }
+ */
 static void ept_handle_violation(unsigned long qualification, paddr_t gpa)
 {
     unsigned long gla, gfn = gpa >> PAGE_SHIFT;
@@ -2423,6 +2437,13 @@ static void ept_handle_violation(unsigned long qualification, paddr_t gpa)
                                        EPT_EFFECTIVE_EXEC))
     };
 
+    /*
+     * 在以下设置tb_init_done:
+     *   - common/trace.c|263| <<alloc_trace_bufs>> tb_init_done = 1;
+     *   - common/trace.c|410| <<tb_control>> tb_init_done = 1;
+     *   - common/trace.c|420| <<tb_control>> tb_init_done = 0;
+     *   - common/trace.c|459| <<bogus>> tb_init_done = 0;
+     */
     if ( tb_init_done )
     {
         struct {
@@ -2451,6 +2472,11 @@ static void ept_handle_violation(unsigned long qualification, paddr_t gpa)
     else
         gla = ~0ull;
 
+    /*
+     * called by:
+     *   - arch/x86/hvm/svm/svm.c|1371| <<svm_do_nested_pgfault>> ret = hvm_hap_nested_page_fault(gpa, ~0ul, npfec);
+     *   - arch/x86/hvm/vmx/vmx.c|2454| <<ept_handle_violation>> ret = hvm_hap_nested_page_fault(gpa, gla, npfec);
+     */
     ret = hvm_hap_nested_page_fault(gpa, gla, npfec);
     switch ( ret )
     {
diff --git a/xen/arch/x86/mm/p2m-ept.c b/xen/arch/x86/mm/p2m-ept.c
index 296a1eef8d..0e13f179bd 100644
--- a/xen/arch/x86/mm/p2m-ept.c
+++ b/xen/arch/x86/mm/p2m-ept.c
@@ -47,6 +47,13 @@ static inline bool_t is_epte_valid(ept_entry_t *e)
     return (e->epte != 0 && e->sa_p2mt != p2m_invalid);
 }
 
+/*
+ * called by:
+ *   - arch/x86/mm/p2m-ept.c|198| <<ept_split_super_page>> ept_p2m_type_to_flags(epte, epte->sa_p2mt, epte->access);
+ *   - arch/x86/mm/p2m-ept.c|376| <<ept_set_entry>> ept_p2m_type_to_flags(&new_entry, p2mt, p2ma);
+ *   - arch/x86/mm/p2m-ept.c|424| <<ept_set_entry>> ept_p2m_type_to_flags(&new_entry, p2mt, p2ma);
+ *   - arch/x86/mm/p2m-ept.c|645| <<ept_change_entry_type_page>> ept_p2m_type_to_flags(&e, nt, e.access);
+ */
 static void ept_p2m_type_to_flags(ept_entry_t *entry, p2m_type_t type, p2m_access_t access)
 {
     /* First apply type permissions */
@@ -118,6 +125,14 @@ static void ept_p2m_type_to_flags(ept_entry_t *entry, p2m_type_t type, p2m_acces
     }
     
     /* Don't create executable superpages if we need to shatter them. */
+    /*
+     * 在以下使用opt_ept_ifu_shatter:
+     *   - arch/x86/hvm/vmx/vmcs.c|79| <<parse_ept_param>> opt_ept_ifu_shatter = val;
+     *   - arch/x86/mm/p2m-ept.c|121| <<ept_p2m_type_to_flags>> if ( opt_ept_ifu_shatter && is_epte_superpage(entry) )
+     *
+     * x           :   1,  // bit 2 - Execute permission
+     * sp          :   1,  // bit 7 - Is this a superpage?
+     */
     if ( opt_ept_ifu_shatter && is_epte_superpage(entry) )
         entry->x = 0;
 }
diff --git a/xen/drivers/passthrough/vtd/dmar.c b/xen/drivers/passthrough/vtd/dmar.c
index ad2d3e6d5e..6bae025674 100644
--- a/xen/drivers/passthrough/vtd/dmar.c
+++ b/xen/drivers/passthrough/vtd/dmar.c
@@ -50,6 +50,10 @@ static struct acpi_table_header *__read_mostly dmar_table;
 static int __read_mostly dmar_flags;
 static u64 __read_mostly igd_drhd_address;
 
+/*
+ * called by:
+ *   - drivers/passthrough/vtd/dmar.c|381| <<acpi_parse_dev_scope>> dmar_scope_add_buses(scope, sec_bus, sub_bus);
+ */
 static void __init dmar_scope_add_buses(struct dmar_scope *scope, u16 sec_bus,
                                         u16 sub_bus)
 {
@@ -233,13 +237,25 @@ struct acpi_drhd_unit *acpi_find_matched_drhd_unit(const struct pci_dev *pdev)
         if ( drhd->segment != pdev->seg )
             continue;
 
+	/* devices owned by this unit:
+	 *   - drivers/passthrough/vtd/dmar.c|435| <<acpi_parse_dev_scope>> scope->devices[didx++] = PCI_BDF(bus, path->dev, path->fn);
+	 */
         for (i = 0; i < drhd->scope.devices_cnt; i++)
             if ( drhd->scope.devices[i] == PCI_BDF2(bus, devfn) )
                 return drhd;
 
+	/*
+	 * buses是buses owned by this unit, 只在以下设置:
+	 *   - drivers/passthrough/vtd/dmar.c|61| <<dmar_scope_add_buses>> set_bit(sec_bus++, scope->buses);
+	 */
         if ( test_bit(bus, drhd->scope.buses) )
             return drhd;
 
+	/*
+	 * 设置include_all的几处地方 (注释说Only allow one INCLUDE_ALL):
+	 *   -  drivers/passthrough/vtd/dmar.h|66| <<global>> u8 include_all:1;
+	 *   -  drivers/passthrough/vtd/dmar.c|481| <<acpi_parse_one_drhd>> dmaru->include_all = drhd->flags & ACPI_DMAR_INCLUDE_ALL;
+	 */
         if ( drhd->include_all )
             include_all = drhd;
     }
@@ -316,6 +332,12 @@ static int __init scope_device_count(const void *start, const void *end)
 }
 
 
+/*
+ * called by:
+ *   - drivers/passthrough/vtd/dmar.c|506| <<acpi_parse_one_drhd>> ret = acpi_parse_dev_scope(dev_scope_start, dev_scope_end,
+ *   - drivers/passthrough/vtd/dmar.c|646| <<acpi_parse_one_rmrr>> ret = acpi_parse_dev_scope(dev_scope_start, dev_scope_end,
+ *   - drivers/passthrough/vtd/dmar.c|741| <<acpi_parse_one_atsr>> ret = acpi_parse_dev_scope(dev_scope_start, dev_scope_end,
+ */
 static int __init acpi_parse_dev_scope(
     const void *start, const void *end, struct dmar_scope *scope,
     int type, u16 seg)
@@ -342,6 +364,7 @@ static int __init acpi_parse_dev_scope(
     while ( start < end )
     {
         acpi_scope = start;
+        /* path的类型是const struct acpi_dmar_pci_path */
         path = (const void *)(acpi_scope + 1);
         depth = (acpi_scope->length - sizeof(*acpi_scope)) / sizeof(*path);
         bus = acpi_scope->bus;
@@ -456,6 +479,10 @@ static int __init acpi_dmar_check_length(
     return -EINVAL;
 }
 
+/*
+ * called by:
+ *   - drivers/passthrough/vtd/dmar.c|847| <<acpi_parse_dmar>> ret = acpi_parse_one_drhd(entry_header);
+ */
 static int __init
 acpi_parse_one_drhd(struct acpi_dmar_header *header)
 {
@@ -491,6 +518,17 @@ acpi_parse_one_drhd(struct acpi_dmar_header *header)
 
     dev_scope_start = (void *)(drhd + 1);
     dev_scope_end = ((void *)drhd) + header->length;
+    /*
+     * References:
+     * - https://zhuanlan.zhihu.com/p/51110851
+     * - https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2019/08/10/iommu-driver-analysis
+     * - VT-d manual: BIOS Considerations
+     * 
+     * IOMMU最核心的是DRHD,可以用来remapping.
+     *
+     * DRHD的信息是由ACPI来表示的.最终DRHD的scope下面会有: 1. endpoint devices, 2.
+     * bridge.
+     */
     ret = acpi_parse_dev_scope(dev_scope_start, dev_scope_end,
                                &dmaru->scope, DMAR_TYPE, drhd->segment);
 
-- 
2.17.1

