From ee5169d35c43df6644631113edb6528d3112d2f8 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Mon, 22 Jan 2024 09:00:00 -0800
Subject: [PATCH 1/1] qemu for v8.2.0

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 accel/kvm/kvm-all.c   | 15 ++++++++++++
 block/block-backend.c | 30 +++++++++++++++++++++++
 block/file-posix.c    | 14 +++++++++++
 block/io.c            |  9 +++++++
 cpu-common.c          | 10 ++++++++
 monitor/hmp.c         | 21 ++++++++++++++++
 monitor/qmp.c         | 15 ++++++++++++
 qapi/qmp-dispatch.c   | 29 ++++++++++++++++++++++
 qom/qom-qmp-cmds.c    | 46 +++++++++++++++++++++++++++++++++++
 system/main.c         |  4 ++++
 system/runstate.c     |  4 ++++
 util/main-loop.c      | 56 +++++++++++++++++++++++++++++++++++++++++++
 util/qemu-timer.c     |  4 ++++
 13 files changed, 257 insertions(+)

diff --git a/accel/kvm/kvm-all.c b/accel/kvm/kvm-all.c
index e39a810a4..d30d34dc0 100644
--- a/accel/kvm/kvm-all.c
+++ b/accel/kvm/kvm-all.c
@@ -289,6 +289,12 @@ int kvm_physical_memory_addr_from_host(KVMState *s, void *ram,
     return ret;
 }
 
+/*
+ * called by:
+ *   - accel/kvm/kvm-all.c|493| <<kvm_slot_update_flags>> return kvm_set_user_memory_region(kml, mem, false);
+ *   - accel/kvm/kvm-all.c|1342| <<kvm_set_phys_mem>> err = kvm_set_user_memory_region(kml, mem, false);
+ *   - accel/kvm/kvm-all.c|1366| <<kvm_set_phys_mem>> err = kvm_set_user_memory_region(kml, mem, true);
+ */
 static int kvm_set_user_memory_region(KVMMemoryListener *kml, KVMSlot *slot, bool new)
 {
     KVMState *s = kvm_state;
@@ -1266,6 +1272,11 @@ void kvm_set_max_memslot_size(hwaddr max_slot_size)
     kvm_max_slot_size = max_slot_size;
 }
 
+/*
+ * called by:
+ *   - accel/kvm/kvm-all.c|1565| <<kvm_region_commit>> kvm_set_phys_mem(kml, &u1->section, false);
+ *   - accel/kvm/kvm-all.c|1575| <<kvm_region_commit>> kvm_set_phys_mem(kml, &u1->section, true);
+ */
 /* Called with KVMMemoryListener.slots_lock held */
 static void kvm_set_phys_mem(KVMMemoryListener *kml,
                              MemoryRegionSection *section, bool add)
@@ -2816,6 +2827,10 @@ static void kvm_eat_signals(CPUState *cpu)
     } while (sigismember(&chkset, SIG_IPI));
 }
 
+/*
+ * called by:
+ *   - accel/kvm/kvm-accel-ops.c|51| <<kvm_vcpu_thread_fn>> r = kvm_cpu_exec(cpu);
+ */
 int kvm_cpu_exec(CPUState *cpu)
 {
     struct kvm_run *run = cpu->kvm_run;
diff --git a/block/block-backend.c b/block/block-backend.c
index ec2114880..ee8897184 100644
--- a/block/block-backend.c
+++ b/block/block-backend.c
@@ -1590,6 +1590,15 @@ static void blk_aio_complete_bh(void *opaque)
     blk_aio_complete(acb);
 }
 
+/*
+ * called by:
+ *   - block/block-backend.c|1655| <<blk_aio_pwrite_zeroes>> return blk_aio_prwv(blk, offset, bytes, NULL, blk_aio_write_entry,
+ *   - block/block-backend.c|1726| <<blk_aio_preadv>> return blk_aio_prwv(blk, offset, qiov->size, qiov, blk_aio_read_entry, flags, cb, opaque);
+ *   - block/block-backend.c|1736| <<blk_aio_pwritev>> return blk_aio_prwv(blk, offset, qiov->size, qiov, blk_aio_write_entry, flags, cb, opaque);
+ *   - block/block-backend.c|1795| <<blk_aio_ioctl>> return blk_aio_prwv(blk, req, 0, buf, blk_aio_ioctl_entry, 0, cb, opaque);
+ *   - block/block-backend.c|1830| <<blk_aio_pdiscard>> return blk_aio_prwv(blk, offset, bytes, NULL, blk_aio_pdiscard_entry, 0,
+ *   - block/block-backend.c|1874| <<blk_aio_flush>> return blk_aio_prwv(blk, 0, 0, NULL, blk_aio_flush_entry, 0, cb, opaque);
+ */
 static BlockAIOCB *blk_aio_prwv(BlockBackend *blk, int64_t offset,
                                 int64_t bytes,
                                 void *iobuf, CoroutineEntry co_entry,
@@ -1727,6 +1736,27 @@ BlockAIOCB *blk_aio_preadv(BlockBackend *blk, int64_t offset,
                         blk_aio_read_entry, flags, cb, opaque);
 }
 
+/*
+ * called by:
+ *   - hw/block/dataplane/xen-block.c|398| <<xen_block_do_aio>> blk_aio_pwritev(dataplane->blk, request->start, &request->v, 0,
+ *   - hw/block/m25p80.c|562| <<flash_sync_page>> blk_aio_pwritev(s->blk, page * s->pi->page_size, iov, 0,
+ *   - hw/block/m25p80.c|578| <<flash_sync_area>> blk_aio_pwritev(s->blk, off, iov, 0, blk_sync_complete, iov);
+ *   - hw/block/virtio-blk.c|411| <<submit_requests>> blk_aio_pwritev(blk, sector_num << BDRV_SECTOR_BITS, qiov,
+ *   - hw/ide/core.c|1101| <<ide_sector_write>> s->pio_aiocb = blk_aio_pwritev(s->blk, sector_num << BDRV_SECTOR_BITS,
+ *   - hw/nvme/ctrl.c|1465| <<nvme_blk_write>> req->aiocb = blk_aio_pwritev(blk, offset, &req->sg.iov, 0, cb, req);
+ *   - hw/nvme/ctrl.c|2917| <<nvme_copy_out_cb>> iocb->aiocb = blk_aio_pwritev(ns->blkconf.blk, nvme_moff(ns, iocb->slba),
+ *   - hw/nvme/ctrl.c|3011| <<nvme_copy_in_completed_cb>> iocb->aiocb = blk_aio_pwritev(ns->blkconf.blk, nvme_l2b(ns, iocb->slba),
+ *   - hw/nvme/dif.c|530| <<nvme_dif_rw_mdata_out_cb>> req->aiocb = blk_aio_pwritev(blk, offset, &ctx->mdata.iov, 0,
+ *   - hw/nvme/dif.c|701| <<nvme_dif_rw>> req->aiocb = blk_aio_pwritev(ns->blkconf.blk, offset, &ctx->data.iov, 0,
+ *   - hw/scsi/scsi-disk.c|1846| <<scsi_write_same_complete>> r->req.aiocb = blk_aio_pwritev(s->qdev.conf.blk,
+ *   - hw/scsi/scsi-disk.c|1920| <<scsi_disk_emulate_write_same>> r->req.aiocb = blk_aio_pwritev(s->qdev.conf.blk,
+ *   - hw/scsi/scsi-disk.c|3109| <<scsi_dma_writev>> return blk_aio_pwritev(s->qdev.conf.blk, offset, iov, 0, cb, cb_opaque);
+ *   - qemu-img.c|4497| <<bench_cb>> acb = blk_aio_pwritev(b->blk, offset, b->qiov, 0, bench_cb, b);
+ *   - qemu-io-cmds.c|663| <<do_aio_writev>> blk_aio_pwritev(blk, offset, qiov, flags, aio_rw_done, &async_ret);
+ *   - qemu-io-cmds.c|1699| <<aio_write_f>> blk_aio_pwritev(blk, ctx->offset, &ctx->qiov, ctx->flags,
+ *   - system/dma-helpers.c|265| <<dma_blk_write_io_func>> return blk_aio_pwritev(blk, offset, iov, 0, cb, cb_opaque);
+ *   - tests/unit/test-replication.c|113| <<test_blk_write>> blk_aio_pwritev(blk, offset, &qiov, 0, blk_rw_done, &async_ret);
+ */
 BlockAIOCB *blk_aio_pwritev(BlockBackend *blk, int64_t offset,
                             QEMUIOVector *qiov, BdrvRequestFlags flags,
                             BlockCompletionFunc *cb, void *opaque)
diff --git a/block/file-posix.c b/block/file-posix.c
index b862406c7..cd366e4ba 100644
--- a/block/file-posix.c
+++ b/block/file-posix.c
@@ -1762,6 +1762,14 @@ static ssize_t handle_aiocb_rw_linear(RawPosixAIOData *aiocb, char *buf)
     return offset;
 }
 
+/*
+ * (gdb) bt
+ * #0  handle_aiocb_rw (opaque=0x7f25a45ea810) at ../block/file-posix.c:1767
+ * #1  0x00005579c6e1f097 in worker_thread (opaque=0x5579c95d2ec0) at ../util/thread-pool.c:111
+ * #2  0x00005579c6e027f2 in qemu_thread_start (args=0x5579c9ff0bb0) at ../util/qemu-thread-posix.c:541
+ * #3  0x00007f27bddc3ea5 in start_thread () at /lib64/libpthread.so.0
+ * #4  0x00007f27bdaec9fd in clone () at /lib64/libc.so.6
+ */
 static int handle_aiocb_rw(void *opaque)
 {
     RawPosixAIOData *aiocb = opaque;
@@ -2444,6 +2452,12 @@ static bool bdrv_qiov_is_aligned(BlockDriverState *bs, QEMUIOVector *qiov)
     return true;
 }
 
+/*
+ * called by:
+ *   - block/file-posix.c|2542| <<raw_co_preadv>> return raw_co_prw(bs, &offset, bytes, qiov, QEMU_AIO_READ);
+ *   - block/file-posix.c|2549| <<raw_co_pwritev>> return raw_co_prw(bs, &offset, bytes, qiov, QEMU_AIO_WRITE);
+ *   - block/file-posix.c|3532| <<raw_co_zone_append>> return raw_co_prw(bs, offset, len, qiov, QEMU_AIO_ZONE_APPEND);
+ */
 static int coroutine_fn raw_co_prw(BlockDriverState *bs, int64_t *offset_ptr,
                                    uint64_t bytes, QEMUIOVector *qiov, int type)
 {
diff --git a/block/io.c b/block/io.c
index 7e62fabbf..df2882c83 100644
--- a/block/io.c
+++ b/block/io.c
@@ -2239,6 +2239,15 @@ int coroutine_fn bdrv_co_pwritev(BdrvChild *child,
     return bdrv_co_pwritev_part(child, offset, bytes, qiov, 0, flags);
 }
 
+/*
+ * called by:
+ *   - block/block-backend.c|1450| <<blk_co_do_pwritev_part>> ret = bdrv_co_pwritev_part(blk->root, offset, bytes, qiov, qiov_offset,
+ *   - block/copy-on-read.c|191| <<cor_co_pwritev_part>> return bdrv_co_pwritev_part(bs->file, offset, bytes, qiov, qiov_offset,
+ *   - block/filter-compress.c|82| <<compress_co_pwritev_part>> return bdrv_co_pwritev_part(bs->file, offset, bytes, qiov, qiov_offset,
+ *   - block/io.c|2239| <<bdrv_co_pwritev>> return bdrv_co_pwritev_part(child, offset, bytes, qiov, 0, flags);
+ *   - block/preallocate.c|418| <<preallocate_co_pwritev_part>> return bdrv_co_pwritev_part(bs->file, offset, bytes, qiov, qiov_offset,
+ *   - block/qcow2.c|2623| <<qcow2_co_pwritev_task>> ret = bdrv_co_pwritev_part(s->data_file, host_offset,
+ */
 int coroutine_fn bdrv_co_pwritev_part(BdrvChild *child,
     int64_t offset, int64_t bytes, QEMUIOVector *qiov, size_t qiov_offset,
     BdrvRequestFlags flags)
diff --git a/cpu-common.c b/cpu-common.c
index c81fd72d1..204ac8fe1 100644
--- a/cpu-common.c
+++ b/cpu-common.c
@@ -130,6 +130,12 @@ struct qemu_work_item {
     bool free, exclusive, done;
 };
 
+/*
+ * called by:
+ *   - cpu-common.c|159| <<do_run_on_cpu>> queue_work_on_cpu(cpu, &wi);
+ *   - cpu-common.c|177| <<async_run_on_cpu>> queue_work_on_cpu(cpu, wi);
+ *   - cpu-common.c|331| <<async_safe_run_on_cpu>> queue_work_on_cpu(cpu, wi);
+ */
 static void queue_work_on_cpu(CPUState *cpu, struct qemu_work_item *wi)
 {
     qemu_mutex_lock(&cpu->work_mutex);
@@ -140,6 +146,10 @@ static void queue_work_on_cpu(CPUState *cpu, struct qemu_work_item *wi)
     qemu_cpu_kick(cpu);
 }
 
+/*
+ * called by:
+ *   - system/cpus.c|399| <<run_on_cpu>> do_run_on_cpu(cpu, func, data, &qemu_global_mutex);
+ */
 void do_run_on_cpu(CPUState *cpu, run_on_cpu_func func, run_on_cpu_data data,
                    QemuMutex *mutex)
 {
diff --git a/monitor/hmp.c b/monitor/hmp.c
index 69c1b7e98..a846bc4a3 100644
--- a/monitor/hmp.c
+++ b/monitor/hmp.c
@@ -1173,6 +1173,27 @@ void handle_hmp_command(MonitorHMP *mon, const char *cmdline)
     qobject_unref(qdict);
 }
 
+/*
+ * (gdb) bt
+ * #0  cmd_completion (mon=0x555556846620, name=0x5555574f6f60 "", list=0x55555609d9a2 "balloon") at ../monitor/hmp.c:1174
+ * #1  0x0000555555acd505 in monitor_find_completion_by_table (mon=0x555556846620, cmd_table=0x5555566f7740 <hmp_info_cmds>, args=0x7fffffffc9e8, nb_args=1) at ../monitor/hmp.c:1284
+ * #2  0x0000555555acd5a5 in monitor_find_completion_by_table (mon=0x555556846620, cmd_table=0x5555566f8aa0 <hmp_cmds>, args=0x7fffffffc9e0, nb_args=2) at ../monitor/hmp.c:1301
+ * #3  0x0000555555acd90d in monitor_find_completion (opaque=0x555556846620, cmdline=0x55555718d000 "info ") at ../monitor/hmp.c:1380
+ * #4  0x0000555555f1906b in readline_completion (rs=0x555556ac0f10) at ../util/readline.c:307
+ * #5  0x0000555555f19505 in readline_handle_byte (rs=0x555556ac0f10, ch=9) at ../util/readline.c:395
+ * #6  0x0000555555acd9a8 in monitor_read (opaque=0x555556846620, buf=0x7fffffffcbf0 "\t\322\377\377\377\177", size=1) at ../monitor/hmp.c:1393
+ * #7  0x0000555555e31613 in qemu_chr_be_write_impl (s=0x555556a66ab0, buf=0x7fffffffcbf0 "\t\322\377\377\377\177", len=1) at ../chardev/char.c:201
+ * #8  0x0000555555e31677 in qemu_chr_be_write (s=0x555556a66ab0, buf=0x7fffffffcbf0 "\t\322\377\377\377\177", len=1) at ../chardev/char.c:213
+ * #9  0x0000555555e340a4 in fd_chr_read (chan=0x555556a66bc0, cond=G_IO_IN, opaque=0x555556a66ab0) at ../chardev/char-fd.c:72
+ * #10 0x0000555555d335b4 in qio_channel_fd_source_dispatch (source=0x5555578075c0, callback=0x555555e33f7a <fd_chr_read>, user_data=0x555556a66ab0) at ../io/channel-watch.c:84
+ * #11 0x00007ffff6c40119 in g_main_context_dispatch () at /lib64/libglib-2.0.so.0
+ * #12 0x0000555555f12010 in glib_pollfds_poll () at ../util/main-loop.c:297
+ * #13 0x0000555555f1208a in os_host_main_loop_wait (timeout=1000000000) at ../util/main-loop.c:320
+ * #14 0x0000555555f1218f in main_loop_wait (nonblocking=0) at ../util/main-loop.c:596
+ * #15 0x0000555555a7a05e in qemu_main_loop () at ../softmmu/runstate.c:734
+ * #16 0x000055555581fe62 in qemu_main (argc=20, argv=0x7fffffffded8, envp=0x0) at ../softmmu/main.c:38
+ * #17 0x000055555581fe94 in main (argc=20, argv=0x7fffffffded8) at ../softmmu/main.c:47
+ */
 static void cmd_completion(MonitorHMP *mon, const char *name, const char *list)
 {
     const char *p, *pstart;
diff --git a/monitor/qmp.c b/monitor/qmp.c
index 6eee450fe..31817a002 100644
--- a/monitor/qmp.c
+++ b/monitor/qmp.c
@@ -378,6 +378,21 @@ void qmp_dispatcher_co_wake(void)
     }
 }
 
+/*
+ * (gdb) bt
+ * #0  handle_qmp_command (opaque=0x5555567fb9a0, req=0x7fffe0003740, err=0x0) at ../monitor/qmp.c:346
+ * #1  0x0000555555d27063 in json_message_process_token (lexer=lexer@entry=0x5555567fba60, input=0x555556777720, type=<optimized out>, x=<optimized out>, y=<optimized out>) at ../qobject/json-streamer.c:99
+ * #2  0x0000555555d57fbf in json_lexer_feed_char (lexer=lexer@entry=0x5555567fba60, ch=125 '}', flush=flush@entry=false) at ../qobject/json-lexer.c:313
+ * #3  0x0000555555d58119 in json_lexer_feed (lexer=0x5555567fba60, buffer=<optimized out>, size=<optimized out>) at ../qobject/json-lexer.c:350
+ * #4  0x0000555555c9a07e in tcp_chr_read (chan=<optimized out>, cond=<optimized out>, opaque=<optimized out>) at ../chardev/char-socket.c:508
+ * #5  0x00007ffff6c40119 in g_main_context_dispatch () at /lib64/libglib-2.0.so.0
+ * #6  0x00007ffff6c40478 in g_main_context_iterate.isra () at /lib64/libglib-2.0.so.0
+ * #7  0x00007ffff6c4074a in g_main_loop_run () at /lib64/libglib-2.0.so.0
+ * #8  0x0000555555bfb9c9 in iothread_run (opaque=opaque@entry=0x5555567fbb00) at ../iothread.c:74
+ * #9  0x0000555555d2fd09 in qemu_thread_start (args=0x7fffee5ef950) at ../util/qemu-thread-posix.c:504
+ * #10 0x00007ffff53d0ea5 in start_thread () at /lib64/libpthread.so.0
+ * #11 0x00007ffff50f99fd in clone () at /lib64/libc.so.6
+ */
 static void handle_qmp_command(void *opaque, QObject *req, Error *err)
 {
     MonitorQMP *mon = opaque;
diff --git a/qapi/qmp-dispatch.c b/qapi/qmp-dispatch.c
index 555528b6b..95b2774d2 100644
--- a/qapi/qmp-dispatch.c
+++ b/qapi/qmp-dispatch.c
@@ -130,6 +130,35 @@ static void do_qmp_dispatch_bh(void *opaque)
     aio_co_wake(data->co);
 }
 
+/*
+ * (gdb) bt
+ * #0  qmp_dispatch (cmds=0x5555565525a0 <qmp_cap_negotiation_commands>, request=0x7fffe0003740, allow_oob=false, cur_mon=0x5555567fb9a0)
+ *                   at ../qapi/qmp-dispatch.c:139
+ * #1  0x0000555555ca2414 in monitor_qmp_dispatch (mon=0x5555567fb9a0, req=<optimized out>) at ../monitor/qmp.c:144
+ * #2  0x0000555555ca2df2 in monitor_qmp_dispatcher_co (data=<optimized out>) at ../monitor/qmp.c:318
+ * #3  0x0000555555d41c2b in coroutine_trampoline (i0=<optimized out>, i1=<optimized out>) at ../util/coroutine-ucontext.c:177
+ * #4  0x00007ffff5043190 in __start_context () at /lib64/libc.so.6
+ * #5  0x00007fffffffd1b0 in  ()
+ * #6  0x0000000000000000 in  ()
+ *
+ * 在json的message换成oob的样子.
+ *
+ * (gdb) bt
+ * #0  qmp_dispatch (cmds=0x5555565525b0 <qmp_commands>, request=0x7fffe0003710, allow_oob=false, cur_mon=cur_mon@entry=0x5555567fb9a0) at ../qapi/qmp-dispatch.c:141
+ * #1  0x0000555555ca2414 in monitor_qmp_dispatch (mon=0x5555567fb9a0, req=<optimized out>) at ../monitor/qmp.c:144
+ * #2  0x0000555555ca2756 in handle_qmp_command (opaque=0x5555567fb9a0, req=0x7fffe0003710, err=<optimized out>) at ../monitor/qmp.c:371
+ * #3  0x0000555555d27103 in json_message_process_token (lexer=lexer@entry=0x5555567fba60, input=0x555556777720, type=<optimized out>, x=<optimized out>, y=<optimized out>) at ../qobject/json-streamer.c:99
+ * #4  0x0000555555d5805f in json_lexer_feed_char (lexer=lexer@entry=0x5555567fba60, ch=125 '}', flush=flush@entry=false) at ../qobject/json-lexer.c:313
+ * #5  0x0000555555d581b9 in json_lexer_feed (lexer=0x5555567fba60, buffer=<optimized out>, size=<optimized out>) at ../qobject/json-lexer.c:350
+ * #6  0x0000555555c9a07e in tcp_chr_read (chan=<optimized out>, cond=<optimized out>, opaque=<optimized out>) at ../chardev/char-socket.c:508
+ * #7  0x00007ffff6c40119 in g_main_context_dispatch () at /lib64/libglib-2.0.so.0
+ * #8  0x00007ffff6c40478 in g_main_context_iterate.isra () at /lib64/libglib-2.0.so.0
+ * #9  0x00007ffff6c4074a in g_main_loop_run () at /lib64/libglib-2.0.so.0
+ * #10 0x0000555555bfb9c9 in iothread_run (opaque=opaque@entry=0x5555567fbb00) at ../iothread.c:74
+ * #11 0x0000555555d2fda9 in qemu_thread_start (args=0x7fffee5ef950) at ../util/qemu-thread-posix.c:504
+ * #12 0x00007ffff53d0ea5 in start_thread () at /lib64/libpthread.so.0
+ * #13 0x00007ffff50f99fd in clone () at /lib64/libc.so.6
+ */
 /*
  * Runs outside of coroutine context for OOB commands, but in coroutine
  * context for everything else.
diff --git a/qom/qom-qmp-cmds.c b/qom/qom-qmp-cmds.c
index 7c087299d..3e67272b1 100644
--- a/qom/qom-qmp-cmds.c
+++ b/qom/qom-qmp-cmds.c
@@ -75,6 +75,52 @@ void qmp_qom_set(const char *path, const char *property, QObject *value,
     object_property_set_qobject(obj, property, value, errp);
 }
 
+/*
+ * 使用oob的时候
+ *
+ * { "execute": "qmp_capabilities", "arguments": { "enable": ["oob"] } }
+ * { "exec-oob": "qom-get", "arguments": { "path": "/machine/peripheral-anon/device[0]", "property": "queue-size" } }
+ *
+ * (gdb) bt
+ * #0  qmp_qom_get (path=0x7fffe0004ab0 "/machine/peripheral-anon/device[0]", property=0x7fffe00027c0 "queue-size", errp=errp@entry=0x7fffee5ee538) at ../qom/qom-qmp-cmds.c:82
+ * #1  0x0000555555cfe9cb in qmp_marshal_qom_get (args=<optimized out>, ret=0x7fffee5ee5d8, errp=0x7fffee5ee5d0) at qapi/qapi-commands-qom.c:131
+ * #2  0x0000555555d23c8c in qmp_dispatch (cmds=0x5555565525b0 <qmp_commands>, request=<optimized out>, allow_oob=<optimized out>, cur_mon=cur_mon@entry=0x5555567fb9a0) at ../qapi/qmp-dispatch.c:212
+ * #3  0x0000555555ca2414 in monitor_qmp_dispatch (mon=0x5555567fb9a0, req=<optimized out>) at ../monitor/qmp.c:145
+ * #4  0x0000555555ca2756 in handle_qmp_command (opaque=0x5555567fb9a0, req=0x7fffe00027e0, err=<optimized out>) at ../monitor/qmp.c:372
+ * #5  0x0000555555d27143 in json_message_process_token (lexer=lexer@entry=0x5555567fba60, input=0x555556777720, type=<optimized out>, x=<optimized out>, y=<optimized out>) at ../qobject/json-streamer.c:99
+ * #6  0x0000555555d5809f in json_lexer_feed_char (lexer=lexer@entry=0x5555567fba60, ch=125 '}', flush=flush@entry=false) at ../qobject/json-lexer.c:313
+ * #7  0x0000555555d581f9 in json_lexer_feed (lexer=0x5555567fba60, buffer=<optimized out>, size=<optimized out>) at ../qobject/json-lexer.c:350
+ * #8  0x0000555555c9a07e in tcp_chr_read (chan=<optimized out>, cond=<optimized out>, opaque=<optimized out>) at ../chardev/char-socket.c:508
+ * #9  0x00007ffff6c40119 in g_main_context_dispatch () at /lib64/libglib-2.0.so.0
+ * #10 0x00007ffff6c40478 in g_main_context_iterate.isra () at /lib64/libglib-2.0.so.0
+ * #11 0x00007ffff6c4074a in g_main_loop_run () at /lib64/libglib-2.0.so.0
+ * #12 0x0000555555bfb9c9 in iothread_run (opaque=opaque@entry=0x5555567fbb00) at ../iothread.c:74
+ * #13 0x0000555555d2fde9 in qemu_thread_start (args=0x7fffee5ef950) at ../util/qemu-thread-posix.c:504
+ * #14 0x00007ffff53d0ea5 in start_thread () at /lib64/libpthread.so.0
+ * #15 0x00007ffff50f99fd in clone () at /lib64/libc.so.6
+ *
+ * 不使用oob的时候
+ *
+ * { "execute": "qmp_capabilities" }
+ * { "execute": "qom-get", "arguments": { "path": "/machine/peripheral-anon/device[0]", "property": "queue-size" } }
+ *
+ * (gdb) bt
+ * #0  qmp_qom_get (path=0x555556c38880 "/machine/peripheral-anon/device[0]", property=0x555556d9e560 "queue-size", errp=errp@entry=0x7fffffffd8a8) at ../qom/qom-qmp-cmds.c:82
+ * #1  0x0000555555cfe9cb in qmp_marshal_qom_get (args=<optimized out>, ret=0x7ffff7fcbea8, errp=0x7ffff7fcbea0) at qapi/qapi-commands-qom.c:131
+ * #2  0x0000555555d23379 in do_qmp_dispatch_bh (opaque=0x7ffff7fcbeb0) at ../qapi/qmp-dispatch.c:130
+ * #3  0x0000555555d3ff84 in aio_bh_call (bh=0x555556c74520) at ../util/async.c:178
+ * #4  aio_bh_poll (ctx=ctx@entry=0x5555565cac30) at ../util/async.c:178
+ * #5  0x0000555555d2cc1e in aio_dispatch (ctx=0x5555565cac30) at ../util/aio-posix.c:421
+ * #6  0x0000555555d3fbee in aio_ctx_dispatch (source=<optimized out>, callback=<optimized out>, user_data=<optimized out>) at ../util/async.c:320
+ * #7  0x00007ffff6c40119 in g_main_context_dispatch () at /lib64/libglib-2.0.so.0
+ * #8  0x0000555555d4bea0 in glib_pollfds_poll () at ../util/main-loop.c:297
+ * #9  os_host_main_loop_wait (timeout=0) at ../util/main-loop.c:320
+ * #10 main_loop_wait (nonblocking=nonblocking@entry=0) at ../util/main-loop.c:596
+ * #11 0x00005555559d1181 in qemu_main_loop () at ../softmmu/runstate.c:734
+ * #12 0x0000555555825f5c in qemu_main (argc=<optimized out>, argv=<optimized out>, envp=<optimized out>) at ../softmmu/main.c:38
+ * #13 0x00007ffff501d555 in __libc_start_main () at /lib64/libc.so.6
+ * #14 0x0000555555825e8a in _start () at ../softmmu/main.c:47
+ */
 QObject *qmp_qom_get(const char *path, const char *property, Error **errp)
 {
     Object *obj;
diff --git a/system/main.c b/system/main.c
index 9b91d21ea..193770869 100644
--- a/system/main.c
+++ b/system/main.c
@@ -30,6 +30,10 @@
 #include <SDL.h>
 #endif
 
+/*
+ * 在以下使用qemu_default_main():
+ *   - system/main.c|43| <<global>> int (*qemu_main)(void ) = qemu_default_main;
+ */
 int qemu_default_main(void)
 {
     int status;
diff --git a/system/runstate.c b/system/runstate.c
index ea9d6c2a3..f1323a687 100644
--- a/system/runstate.c
+++ b/system/runstate.c
@@ -774,6 +774,10 @@ static bool main_loop_should_exit(int *status)
     return false;
 }
 
+/*
+ * called by:
+ *   - system/main.c|37| <<qemu_default_main>> status = qemu_main_loop();
+ */
 int qemu_main_loop(void)
 {
     int status = EXIT_SUCCESS;
diff --git a/util/main-loop.c b/util/main-loop.c
index 797b640c4..8fad8e3d8 100644
--- a/util/main-loop.c
+++ b/util/main-loop.c
@@ -293,6 +293,10 @@ static void glib_pollfds_poll(void)
 
 #define MAX_MAIN_LOOP_SPIN (1000)
 
+/*
+ * called by:
+ *   - util/main-loop.c|596| <<main_loop_wait>> ret = os_host_main_loop_wait(timeout_ns);
+ */
 static int os_host_main_loop_wait(int64_t timeout)
 {
     GMainContext *context = g_main_context_default();
@@ -305,6 +309,9 @@ static int os_host_main_loop_wait(int64_t timeout)
     qemu_mutex_unlock_iothread();
     replay_mutex_unlock();
 
+    /*
+     * 这里就是等
+     */
     ret = qemu_poll_ns((GPollFD *)gpollfds->data, gpollfds->len, timeout);
 
     replay_mutex_lock();
@@ -547,6 +554,14 @@ static int os_host_main_loop_wait(int64_t timeout)
 }
 #endif
 
+/*
+ * 在以下使用main_loop_poll_notifiers:
+ *   - util/main-loop.c|550| <<global>> static NotifierList main_loop_poll_notifiers = NOTIFIER_LIST_INITIALIZER(main_loop_poll_notifiers);
+ *   - util/main-loop.c|551| <<global>> NOTIFIER_LIST_INITIALIZER(main_loop_poll_notifiers);
+ *   - util/main-loop.c|555| <<main_loop_poll_add_notifier>> notifier_list_add(&main_loop_poll_notifiers, notify);
+ *   - util/main-loop.c|580| <<main_loop_wait>> notifier_list_notify(&main_loop_poll_notifiers, &mlpoll);
+ *   - util/main-loop.c|594| <<main_loop_wait>> notifier_list_notify(&main_loop_poll_notifiers, &mlpoll);
+ */
 static NotifierList main_loop_poll_notifiers =
     NOTIFIER_LIST_INITIALIZER(main_loop_poll_notifiers);
 
@@ -560,6 +575,31 @@ void main_loop_poll_remove_notifier(Notifier *notify)
     notifier_remove(notify);
 }
 
+/*
+ * called by:
+ *   - qemu-img.c|2148| <<convert_do_copy>> main_loop_wait(false);
+ *   - qemu-img.c|4743| <<img_bench>> main_loop_wait(false);
+ *   - qemu-io-cmds.c|651| <<do_aio_readv>> main_loop_wait(false);
+ *   - qemu-io-cmds.c|665| <<do_aio_writev>> main_loop_wait(false);
+ *   - qemu-io-cmds.c|1884| <<do_aio_zone_append>> main_loop_wait(false);
+ *   - qemu-io-cmds.c|2632| <<sleep_f>> main_loop_wait(false);
+ *   - qemu-io.c|453| <<command_loop>> main_loop_wait(false);
+ *   - qemu-nbd.c|1209| <<main>> main_loop_wait(false);
+ *   - scsi/qemu-pr-helper.c|1069| <<main>> main_loop_wait(false);
+ *   - storage-daemon/qemu-storage-daemon.c|434| <<main>> main_loop_wait(false);
+ *   - system/runstate.c|782| <<qemu_main_loop>> main_loop_wait(false);
+ *   - tests/qtest/fuzz/fuzz.c|50| <<flush_events>> main_loop_wait(false);
+ *   - tests/qtest/fuzz/fuzz.c|57| <<fuzz_reset>> main_loop_wait(true);
+ *   - tests/unit/test-char.c|34| <<main_loop>> main_loop_wait(false);
+ *   - tests/unit/test-char.c|837| <<char_socket_server_test>> main_loop_wait(false);
+ *   - tests/unit/test-char.c|860| <<char_socket_server_test>> main_loop_wait(false);
+ *   - tests/unit/test-char.c|1044| <<char_socket_client_test>> main_loop_wait(false);
+ *   - tests/unit/test-char.c|1067| <<char_socket_client_test>> main_loop_wait(false);
+ *   - tests/unit/test-replication.c|78| <<test_blk_read>> main_loop_wait(false);
+ *   - tests/unit/test-replication.c|115| <<test_blk_write>> main_loop_wait(false);
+ *   - tests/unit/test-util-filemonitor.c|85| <<qemu_file_monitor_test_event_loop>> main_loop_wait(true);
+ *   - ui/gtk-clipboard.c|55| <<gd_clipboard_get_data>> main_loop_wait(false);
+ */
 void main_loop_wait(int nonblocking)
 {
     MainLoopPoll mlpoll = {
@@ -576,6 +616,14 @@ void main_loop_wait(int nonblocking)
 
     /* poll any events */
     g_array_set_size(gpollfds, 0); /* reset for new iteration */
+    /*
+     * 在以下使用main_loop_poll_notifiers:
+     *   - util/main-loop.c|550| <<global>> static NotifierList main_loop_poll_notifiers = NOTIFIER_LIST_INITIALIZER(main_loop_poll_notifiers);
+     *   - util/main-loop.c|551| <<global>> NOTIFIER_LIST_INITIALIZER(main_loop_poll_notifiers);
+     *   - util/main-loop.c|555| <<main_loop_poll_add_notifier>> notifier_list_add(&main_loop_poll_notifiers, notify);
+     *   - util/main-loop.c|580| <<main_loop_wait>> notifier_list_notify(&main_loop_poll_notifiers, &mlpoll);
+     *   - util/main-loop.c|594| <<main_loop_wait>> notifier_list_notify(&main_loop_poll_notifiers, &mlpoll);
+     */
     /* XXX: separate device handlers from system ones */
     notifier_list_notify(&main_loop_poll_notifiers, &mlpoll);
 
@@ -591,6 +639,14 @@ void main_loop_wait(int nonblocking)
 
     ret = os_host_main_loop_wait(timeout_ns);
     mlpoll.state = ret < 0 ? MAIN_LOOP_POLL_ERR : MAIN_LOOP_POLL_OK;
+    /*
+     * 在以下使用main_loop_poll_notifiers:
+     *   - util/main-loop.c|550| <<global>> static NotifierList main_loop_poll_notifiers = NOTIFIER_LIST_INITIALIZER(main_loop_poll_notifiers);
+     *   - util/main-loop.c|551| <<global>> NOTIFIER_LIST_INITIALIZER(main_loop_poll_notifiers);
+     *   - util/main-loop.c|555| <<main_loop_poll_add_notifier>> notifier_list_add(&main_loop_poll_notifiers, notify);
+     *   - util/main-loop.c|580| <<main_loop_wait>> notifier_list_notify(&main_loop_poll_notifiers, &mlpoll);
+     *   - util/main-loop.c|594| <<main_loop_wait>> notifier_list_notify(&main_loop_poll_notifiers, &mlpoll);
+     */
     notifier_list_notify(&main_loop_poll_notifiers, &mlpoll);
 
     if (icount_enabled()) {
diff --git a/util/qemu-timer.c b/util/qemu-timer.c
index 6a0de33dd..7f9497b57 100644
--- a/util/qemu-timer.c
+++ b/util/qemu-timer.c
@@ -662,6 +662,10 @@ uint64_t timer_expire_time_ns(QEMUTimer *ts)
     return timer_pending(ts) ? ts->expire_time : -1;
 }
 
+/*
+ * called by:
+ *   - util/main-loop.c|603| <<main_loop_wait>> qemu_clock_run_all_timers();
+ */
 bool qemu_clock_run_all_timers(void)
 {
     bool progress = false;
-- 
2.34.1

