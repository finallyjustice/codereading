From 45840fc638e02ca60d2d5ada8ab2cf833c7e09f0 Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Mon, 18 Nov 2019 01:35:53 +0800
Subject: [PATCH 1/1] qemu for 4.2.0-rc1

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 hw/block/nvme.c       |  5 ++++
 hw/pci-host/i440fx.c  | 40 +++++++++++++++++++++++++++++
 hw/pci/msix.c         | 18 ++++++++++++++
 hw/pci/pci.c          | 55 ++++++++++++++++++++++++++++++++++++++++
 hw/pci/pci_host.c     |  9 +++++++
 include/hw/pci/pci.h  | 14 +++++++++++
 include/qemu/module.h |  4 +++
 memory.c              | 69 +++++++++++++++++++++++++++++++++++++++++++++++++++
 qom/object.c          |  3 +++
 util/module.c         | 68 ++++++++++++++++++++++++++++++++++++++++++++++++++
 10 files changed, 285 insertions(+)

diff --git a/hw/block/nvme.c b/hw/block/nvme.c
index 12d8254..fd8c6a2 100644
--- a/hw/block/nvme.c
+++ b/hw/block/nvme.c
@@ -1502,7 +1502,12 @@ static const TypeInfo nvme_info = {
 
 static void nvme_register_types(void)
 {
+    /* 如果hashtable中不存在, 就根据TypeInfo转换成TypeImpl然后插入hashtable */
     type_register_static(&nvme_info);
 }
 
+/*
+ * 该函数调用module_init(function, MODULE_INIT_QOM)
+ * 根据fn初始化一个ModuleEntry插入到对应的init_type_list[MODULE_INIT_QOM]
+ */
 type_init(nvme_register_types)
diff --git a/hw/pci-host/i440fx.c b/hw/pci-host/i440fx.c
index f271311..86d0db8 100644
--- a/hw/pci-host/i440fx.c
+++ b/hw/pci-host/i440fx.c
@@ -222,8 +222,20 @@ static void i440fx_pcihost_initfn(Object *obj)
 {
     PCIHostState *s = PCI_HOST_BRIDGE(obj);
 
+    /*
+     * i440fx的s->conf_mem使用的地方:
+     *   - hw/pci-host/i440fx.c|225| <<i440fx_pcihost_initfn>> memory_region_init_io(&s->conf_mem, obj, &pci_host_conf_le_ops, s,
+     *   - hw/pci-host/i440fx.c|252| <<i440fx_pcihost_realize>> sysbus_add_io(sbd, 0xcf8, &s->conf_mem);
+     *   - hw/pci-host/i440fx.c|260| <<i440fx_pcihost_realize>> memory_region_add_coalescing(&s->conf_mem, 0, 4);
+     */
     memory_region_init_io(&s->conf_mem, obj, &pci_host_conf_le_ops, s,
                           "pci-conf-idx", 4);
+    /*
+     * i440fx的s->data_mem使用的地方:
+     *   - hw/pci-host/i440fx.c|233| <<i440fx_pcihost_initfn>> memory_region_init_io(&s->data_mem, obj, &pci_host_data_le_ops, s,
+     *   - hw/pci-host/i440fx.c|267| <<i440fx_pcihost_realize>> sysbus_add_io(sbd, 0xcfc, &s->data_mem);
+     *   - hw/pci-host/i440fx.c|271| <<i440fx_pcihost_realize>> memory_region_set_flush_coalesced(&s->data_mem);
+     */
     memory_region_init_io(&s->data_mem, obj, &pci_host_data_le_ops, s,
                           "pci-conf-data", 4);
 
@@ -249,14 +261,38 @@ static void i440fx_pcihost_realize(DeviceState *dev, Error **errp)
     PCIHostState *s = PCI_HOST_BRIDGE(dev);
     SysBusDevice *sbd = SYS_BUS_DEVICE(dev);
 
+    /*
+     * i440fx的s->conf_mem使用的地方:
+     *   - hw/pci-host/i440fx.c|225| <<i440fx_pcihost_initfn>> memory_region_init_io(&s->conf_mem, obj, &pci_host_conf_le_ops, s,
+     *   - hw/pci-host/i440fx.c|252| <<i440fx_pcihost_realize>> sysbus_add_io(sbd, 0xcf8, &s->conf_mem);
+     *   - hw/pci-host/i440fx.c|260| <<i440fx_pcihost_realize>> memory_region_add_coalescing(&s->conf_mem, 0, 4);
+     */
     sysbus_add_io(sbd, 0xcf8, &s->conf_mem);
     sysbus_init_ioports(sbd, 0xcf8, 4);
 
+    /*
+     * i440fx的s->data_mem使用的地方:
+     *   - hw/pci-host/i440fx.c|233| <<i440fx_pcihost_initfn>> memory_region_init_io(&s->data_mem, obj, &pci_host_data_le_ops, s,
+     *   - hw/pci-host/i440fx.c|267| <<i440fx_pcihost_realize>> sysbus_add_io(sbd, 0xcfc, &s->data_mem);
+     *   - hw/pci-host/i440fx.c|271| <<i440fx_pcihost_realize>> memory_region_set_flush_coalesced(&s->data_mem);
+     */
     sysbus_add_io(sbd, 0xcfc, &s->data_mem);
     sysbus_init_ioports(sbd, 0xcfc, 4);
 
     /* register i440fx 0xcf8 port as coalesced pio */
+    /*
+     * i440fx的s->data_mem使用的地方:
+     *   - hw/pci-host/i440fx.c|233| <<i440fx_pcihost_initfn>> memory_region_init_io(&s->data_mem, obj, &pci_host_data_le_ops, s,
+     *   - hw/pci-host/i440fx.c|267| <<i440fx_pcihost_realize>> sysbus_add_io(sbd, 0xcfc, &s->data_mem);
+     *   - hw/pci-host/i440fx.c|271| <<i440fx_pcihost_realize>> memory_region_set_flush_coalesced(&s->data_mem);
+     */
     memory_region_set_flush_coalesced(&s->data_mem);
+    /*
+     * i440fx的s->conf_mem使用的地方:
+     *   - hw/pci-host/i440fx.c|225| <<i440fx_pcihost_initfn>> memory_region_init_io(&s->conf_mem, obj, &pci_host_conf_le_ops, s,
+     *   - hw/pci-host/i440fx.c|252| <<i440fx_pcihost_realize>> sysbus_add_io(sbd, 0xcf8, &s->conf_mem);
+     *   - hw/pci-host/i440fx.c|260| <<i440fx_pcihost_realize>> memory_region_add_coalescing(&s->conf_mem, 0, 4);
+     */
     memory_region_add_coalescing(&s->conf_mem, 0, 4);
 }
 
@@ -269,6 +305,10 @@ static void i440fx_realize(PCIDevice *dev, Error **errp)
     }
 }
 
+/*
+ * called by:
+ *   - hw/i386/pc_piix.c|197| <<pc_init1>> pci_bus = i440fx_init(host_type,
+ */
 PCIBus *i440fx_init(const char *host_type, const char *pci_type,
                     PCII440FXState **pi440fx_state,
                     MemoryRegion *address_space_mem,
diff --git a/hw/pci/msix.c b/hw/pci/msix.c
index 2918789..85ead81 100644
--- a/hw/pci/msix.c
+++ b/hw/pci/msix.c
@@ -265,6 +265,17 @@ static void msix_mask_all(struct PCIDevice *dev, unsigned nentries)
  * also means a programming error, except device assignment, which can check
  * if a real HW is broken.
  */
+/*
+ * called by:
+ *   - hw/net/e1000e.c|296| <<e1000e_init_msix>> int res = msix_init(PCI_DEVICE(s), E1000E_MSIX_VEC_NUM,
+ *   - hw/net/rocker/rocker.c|1247| <<rocker_msix_init>> err = msix_init(dev, ROCKER_MSIX_VEC_COUNT(r->fp_ports),
+ *   - hw/net/vmxnet3.c|2105| <<vmxnet3_init_msix>> int res = msix_init(d, VMXNET3_MAX_INTRS,
+ *   - hw/pci/msix.c|370| <<msix_init_exclusive_bar>> ret = msix_init(dev, nentries, &dev->msix_exclusive_bar, bar_nr,
+ *   - hw/rdma/vmw/pvrdma_main.c|292| <<init_msix>> rc = msix_init(pdev, RDMA_MAX_INTRS, &dev->msix, RDMA_MSIX_BAR_IDX,
+ *   - hw/scsi/megasas.c|2354| <<megasas_scsi_realize>> msix_init(dev, 15, &s->mmio_io, b->mmio_bar, 0x2000,
+ *   - hw/usb/hcd-xhci.c|3462| <<usb_xhci_realize>> msix_init(dev, xhci->numintrs,
+ *   - hw/vfio/pci.c|1512| <<vfio_msix_setup>> ret = msix_init(&vdev->pdev, vdev->msix->entries,
+ */
 int msix_init(struct PCIDevice *dev, unsigned short nentries,
               MemoryRegion *table_bar, uint8_t table_bar_nr,
               unsigned table_offset, MemoryRegion *pba_bar,
@@ -337,6 +348,13 @@ int msix_init(struct PCIDevice *dev, unsigned short nentries,
     return 0;
 }
 
+/*
+ * called by:
+ *   - hw/block/nvme.c|1360| <<nvme_realize>> msix_init_exclusive_bar(pci_dev, n->num_queues, 4, NULL);
+ *   - hw/misc/ivshmem.c|767| <<ivshmem_setup_interrupts>> if (msix_init_exclusive_bar(PCI_DEVICE(s), s->vectors, 1, errp)) {
+ *   - hw/pci-bridge/gen_pcie_root_port.c|51| <<gen_rp_interrupts_init>> rc = msix_init_exclusive_bar(d, GEN_PCIE_ROOT_PORT_MSIX_NR_VECTOR, 0, errp);
+ *   - hw/virtio/virtio-pci.c|1637| <<virtio_pci_device_plugged>> int err = msix_init_exclusive_bar(&proxy->pci_dev, proxy->nvectors,
+ */
 int msix_init_exclusive_bar(PCIDevice *dev, unsigned short nentries,
                             uint8_t bar_nr, Error **errp)
 {
diff --git a/hw/pci/pci.c b/hw/pci/pci.c
index cbc7a32..53f0b60 100644
--- a/hw/pci/pci.c
+++ b/hw/pci/pci.c
@@ -228,6 +228,21 @@ static uint16_t pci_default_sub_device_id = PCI_SUBDEVICE_ID_QEMU;
 
 static QLIST_HEAD(, PCIHostState) pci_host_bridges;
 
+/*
+ * 部分调用的例子:
+ *   - hw/pci/pci.c|317| <<pci_do_device_reset>> pci_set_quad(dev->config + pci_bar(dev, r), region->type);
+ *   - hw/pci/pci.c|319| <<pci_do_device_reset>> pci_set_long(dev->config + pci_bar(dev, r), region->type);
+ *   - hw/pci/pci.c|1182| <<pci_register_bar>> addr = pci_bar(pci_dev, region_num);
+ *   - hw/pci/pci.c|1265| <<pci_bar_address>> int bar = pci_bar(d, reg);
+ *   - hw/ppc/spapr_pci.c|921| <<populate_resource_props>> reg->phys_hi = cpu_to_be32(dev_id | b_rrrrrrrr(pci_bar(d, i)));
+ *   - hw/vfio/pci.c|1590| <<vfio_bar_prepare>> uint32_t pci_bar;
+ *   - hw/vfio/pci.c|1599| <<vfio_bar_prepare>> ret = pread(vdev->vbasedev.fd, &pci_bar, sizeof(pci_bar),
+ *   - hw/vfio/pci.c|1601| <<vfio_bar_prepare>> if (ret != sizeof(pci_bar)) {
+ *   - hw/vfio/pci.c|1606| <<vfio_bar_prepare>> pci_bar = le32_to_cpu(pci_bar);
+ *   - hw/vfio/pci.c|1607| <<vfio_bar_prepare>> bar->ioport = (pci_bar & PCI_BASE_ADDRESS_SPACE_IO);
+ *   - hw/vfio/pci.c|1608| <<vfio_bar_prepare>> bar->mem64 = bar->ioport ? 0 : (pci_bar & PCI_BASE_ADDRESS_MEM_TYPE_64);
+ *   - hw/vfio/pci.c|1609| <<vfio_bar_prepare>> bar->type = pci_bar & (bar->ioport ? ~PCI_BASE_ADDRESS_IO_MASK :
+ */
 int pci_bar(PCIDevice *d, int reg)
 {
     uint8_t type;
@@ -427,6 +442,11 @@ bool pci_bus_is_express(PCIBus *bus)
     return object_dynamic_cast(OBJECT(bus), TYPE_PCIE_BUS);
 }
 
+/*
+ * called by:
+ *   - hw/pci-host/prep.c|293| <<raven_pcihost_initfn>> pci_root_bus_new_inplace(&s->pci_bus, sizeof(s->pci_bus), DEVICE(obj), NULL,
+ *   - hw/pci-host/versatile.c|405| <<pci_vpb_realize>> pci_root_bus_new_inplace(&s->pci_bus, sizeof(s->pci_bus), dev, "pci",
+ */
 void pci_root_bus_new_inplace(PCIBus *bus, size_t bus_size, DeviceState *parent,
                               const char *name,
                               MemoryRegion *address_space_mem,
@@ -438,6 +458,14 @@ void pci_root_bus_new_inplace(PCIBus *bus, size_t bus_size, DeviceState *parent,
                       devfn_min);
 }
 
+/*
+ * called by:
+ *   - hw/pci-bridge/pci_expander_bridge.c|236| <<pxb_dev_realize_common>> bus = pci_root_bus_new(ds, dev_name, NULL, NULL, 0, TYPE_PXB_PCIE_BUS);
+ *   - hw/pci-bridge/pci_expander_bridge.c|238| <<pxb_dev_realize_common>> bus = pci_root_bus_new(ds, "pxb-internal", NULL, NULL, 0, TYPE_PXB_BUS);
+ *   - hw/pci-host/i440fx.c|292| <<i440fx_init>> b = pci_root_bus_new(dev, NULL, pci_address_space,
+ *   - hw/pci-host/q35.c|61| <<q35_host_realize>> pci->bus = pci_root_bus_new(DEVICE(s), "pcie.0",
+ *   - hw/pci/pci.c|490| <<pci_register_root_bus>> bus = pci_root_bus_new(parent, name, address_space_mem,
+ */
 PCIBus *pci_root_bus_new(DeviceState *parent, const char *name,
                          MemoryRegion *address_space_mem,
                          MemoryRegion *address_space_io,
@@ -1245,6 +1273,11 @@ pcibus_t pci_get_bar_addr(PCIDevice *pci_dev, int region_num)
     return pci_dev->io_regions[region_num].addr;
 }
 
+/*
+ * called by:
+ *   - hw/pci/pci.c|1346| <<pci_update_mappings>> new_addr = pci_bar_address(d, i, r->type, r->size);
+ *   - hw/pci/pci.c|2771| <<pci_dev_get_w64>> lob = pci_bar_address(dev, i, r->type, r->size);
+ */
 static pcibus_t pci_bar_address(PCIDevice *d,
                                 int reg, uint8_t type, pcibus_t size)
 {
@@ -2381,6 +2414,28 @@ static void pci_del_option_rom(PCIDevice *pdev)
  * On failure, it sets an error and returns a negative error
  * code.
  */
+/*
+ * 部分调用的例子:
+ *   - hw/i386/amd_iommu.c|1553| <<amdvi_realize>> ret = pci_add_capability(&s->pci.dev, AMDVI_CAPAB_ID_SEC, 0,
+ *   - hw/i386/amd_iommu.c|1560| <<amdvi_realize>> ret = pci_add_capability(&s->pci.dev, PCI_CAP_ID_MSI, 0,
+ *   - hw/i386/amd_iommu.c|1565| <<amdvi_realize>> ret = pci_add_capability(&s->pci.dev, PCI_CAP_ID_HT, 0,
+ *   - hw/net/e1000e.c|382| <<e1000e_add_pm_capability>> int ret = pci_add_capability(pdev, PCI_CAP_ID_PM, offset,
+ *   - hw/net/eepro100.c|552| <<e100_pci_reset>> int r = pci_add_capability(&s->dev, PCI_CAP_ID_PM,
+ *   - hw/pci-bridge/pcie_pci_bridge.c|55| <<pcie_pci_bridge_realize>> pos = pci_add_capability(d, PCI_CAP_ID_PM, 0, PCI_PM_SIZEOF, errp);
+ *   - hw/pci/msi.c|219| <<msi_init>> config_offset = pci_add_capability(dev, PCI_CAP_ID_MSI, offset,
+ *   - hw/pci/msix.c|303| <<msix_init>> cap = pci_add_capability(dev, PCI_CAP_ID_MSIX,
+ *   - hw/pci/pci_bridge.c|50| <<pci_bridge_ssvid_init>> pos = pci_add_capability(dev, PCI_CAP_ID_SSVID, offset,
+ *   - hw/pci/pci_bridge.c|457| <<pci_bridge_qemu_reserve_cap_init>> int offset = pci_add_capability(dev, PCI_CAP_ID_VNDR,
+ *   - hw/pci/pcie.c|170| <<pcie_cap_init>> pos = pci_add_capability(dev, PCI_CAP_ID_EXP, offset,
+ *   - hw/pci/pcie.c|207| <<pcie_cap_v1_init>> pos = pci_add_capability(dev, PCI_CAP_ID_EXP, offset,
+ *   - hw/vfio/pci-quirks.c|2160| <<vfio_add_nv_gpudirect_cap>> ret = pci_add_capability(pdev, PCI_CAP_ID_VNDR, pos, 8, errp);
+ *   - hw/vfio/pci.c|1878| <<vfio_setup_pcie_cap>> pos = pci_add_capability(&vdev->pdev, PCI_CAP_ID_EXP, pos, size,
+ *   - hw/vfio/pci.c|1980| <<vfio_add_std_cap>> ret = pci_add_capability(pdev, cap_id, pos, size, errp);
+ *   - hw/vfio/pci.c|1984| <<vfio_add_std_cap>> ret = pci_add_capability(pdev, cap_id, pos, size, errp);
+ *   - hw/vfio/pci.c|1987| <<vfio_add_std_cap>> ret = pci_add_capability(pdev, cap_id, pos, size, errp);
+ *   - hw/virtio/virtio-pci.c|1112| <<virtio_pci_add_mem_cap>> offset = pci_add_capability(dev, PCI_CAP_ID_VNDR, 0,
+ *   - hw/virtio/virtio-pci.c|1753| <<virtio_pci_realize>> pos = pci_add_capability(pci_dev, PCI_CAP_ID_PM, 0,
+ */
 int pci_add_capability(PCIDevice *pdev, uint8_t cap_id,
                        uint8_t offset, uint8_t size,
                        Error **errp)
diff --git a/hw/pci/pci_host.c b/hw/pci/pci_host.c
index c5f9244..31147de 100644
--- a/hw/pci/pci_host.c
+++ b/hw/pci/pci_host.c
@@ -44,6 +44,11 @@ do { printf("pci_host_data: " fmt , ## __VA_ARGS__); } while (0)
  */
 
 /* the helper function to get a PCIDevice* for a given pci address */
+/*
+ * called by:
+ *   - hw/pci/pci_host.c|111| <<pci_data_write>> PCIDevice *pci_dev = pci_dev_find_by_addr(s, addr);
+ *     3 hw/pci/pci_host.c|126| <<pci_data_read>> PCIDevice *pci_dev = pci_dev_find_by_addr(s, addr);
+ */
 static inline PCIDevice *pci_dev_find_by_addr(PCIBus *bus, uint32_t addr)
 {
     uint8_t bus_num = addr >> 16;
@@ -173,6 +178,10 @@ static void pci_host_data_write(void *opaque, hwaddr addr,
         pci_data_write(s->bus, s->config_reg | (addr & 3), val, len);
 }
 
+/*
+ * MemoryRegionOps pci_host_data_le_ops.read = pci_host_data_read()
+ * MemoryRegionOps pci_host_data_be_ops.read = pci_host_data_read()
+ */
 static uint64_t pci_host_data_read(void *opaque,
                                    hwaddr addr, unsigned len)
 {
diff --git a/include/hw/pci/pci.h b/include/hw/pci/pci.h
index db75c6d..e4a5aa6 100644
--- a/include/hw/pci/pci.h
+++ b/include/hw/pci/pci.h
@@ -291,6 +291,20 @@ struct PCIDevice {
      * meaningless. */
     PCIReqIDCache requester_id_cache;
     char name[64];
+    /*
+     * 在以下使用io_regions:
+     *   - hw/pci/pci.c|310| <<pci_do_device_reset>> PCIIORegion *region = &dev->io_regions[r];
+     *   - hw/pci/pci.c|1121| <<pci_unregister_io_regions>> r = &pci_dev->io_regions[i];
+     *   - hw/pci/pci.c|1162| <<pci_register_bar>> r = &pci_dev->io_regions[region_num];
+     *   - hw/pci/pci.c|1253| <<pci_get_bar_addr>> return pci_dev->io_regions[region_num].addr;
+     *   - hw/pci/pci.c|1335| <<pci_update_mappings>> r = &d->io_regions[i];
+     *   - hw/pci/pci.c|1684| <<qmp_query_pci_regions>> const PCIIORegion *r = &dev->io_regions[i];
+     *   - hw/pci/pci.c|2485| <<pcibus_dev_print>> r = &d->io_regions[i];
+     *   - hw/pci/pci.c|2734| <<pci_dev_get_w64>> PCIIORegion *r = &dev->io_regions[i];
+     *   - hw/vfio/pci.c|1065| <<vfio_sub_page_bar_update_mapping>> r = &pdev->io_regions[bar];
+     *   - hw/vfio/pci.c|1182| <<vfio_pci_write_config>> old_addr[bar] = pdev->io_regions[bar].addr;
+     *   - hw/vfio/pci.c|1188| <<vfio_pci_write_config>> if (old_addr[bar] != pdev->io_regions[bar].addr &&
+     */
     PCIIORegion io_regions[PCI_NUM_REGIONS];
     AddressSpace bus_master_as;
     MemoryRegion bus_master_container_region;
diff --git a/include/qemu/module.h b/include/qemu/module.h
index 65ba596..33bc041 100644
--- a/include/qemu/module.h
+++ b/include/qemu/module.h
@@ -51,6 +51,10 @@ typedef enum {
 
 #define block_init(function) module_init(function, MODULE_INIT_BLOCK)
 #define opts_init(function) module_init(function, MODULE_INIT_OPTS)
+/*
+ * 该函数调用module_init(function, MODULE_INIT_QOM)
+ * 根据fn初始化一个ModuleEntry插入到对应的init_type_list[MODULE_INIT_QOM]
+ */
 #define type_init(function) module_init(function, MODULE_INIT_QOM)
 #define trace_init(function) module_init(function, MODULE_INIT_TRACE)
 #define xen_backend_init(function) module_init(function, \
diff --git a/memory.c b/memory.c
index 06484c2..6350c69 100644
--- a/memory.c
+++ b/memory.c
@@ -1058,8 +1058,17 @@ void memory_region_transaction_commit(void)
     --memory_region_transaction_depth;
     if (!memory_region_transaction_depth) {
         if (memory_region_update_pending) {
+            /*
+	     * 核心思想是"重新"初始化全局的GHashTable flat_views,
+	     * 为address_spaces链表的每一个AddressSpace生成一份FlatView
+	     * 然后插入flat_views(GHashTable)
+	     */
             flatviews_reset();
 
+	    /*
+	     * 从前向后遍历调用memory_listeners中的每个MemoryListener,
+	     * 并调用begin方法
+	     */
             MEMORY_LISTENER_CALL_GLOBAL(begin, Forward);
 
             QTAILQ_FOREACH(as, &address_spaces, address_spaces_link) {
@@ -2384,16 +2393,76 @@ done:
     memory_region_transaction_commit();
 }
 
+/*
+ * offset应该是物理内存中的offset, 把subregion挂到这个地址?
+ *
+ * 设置subregion的container和addr (记录该region在物理内存的地址)
+ * 按照priority把subregion插入到上一层的MemoryRegion的subregions链表
+ * "上一层"的意思就是说这个region是上一层的subregion
+ * 没有好的位置就插入到最后
+ * 最后还要memory_region_transaction_commit()
+ */
 static void memory_region_add_subregion_common(MemoryRegion *mr,
                                                hwaddr offset,
                                                MemoryRegion *subregion)
 {
     assert(!subregion->container);
     subregion->container = mr;
+    /* 记录该region在物理内存的地址 */
     subregion->addr = offset;
+    /*
+     * 按照priority把subregion插入到上一层的MemoryRegion的subregions链表
+     * "上一层"的意思就是说这个region是上一层的subregion
+     * 没有好的位置就插入到最后
+     * 最后还要memory_region_transaction_commit()
+     */
     memory_region_update_container_subregions(subregion);
 }
 
+/*
+ * 部分调用的例子:
+ *   - hw/core/null-machine.c|39| <<machine_none_init>> memory_region_add_subregion(get_system_memory(), 0, ram);
+ *   - hw/core/numa.c|556| <<memory_region_allocate_system_memory>> memory_region_add_subregion(mr, addr, seg);
+ *   - hw/core/sysbus.c|151| <<sysbus_mmio_map_common>> memory_region_add_subregion(get_system_memory(),
+ *   - hw/core/sysbus.c|325| <<sysbus_add_io>> memory_region_add_subregion(get_system_io(), addr, mem);
+ *   - hw/i386/microvm.c|224| <<microvm_memory_init>> memory_region_add_subregion(system_memory, 0, ram_below_4g);
+ *   - hw/i386/microvm.c|233| <<microvm_memory_init>> memory_region_add_subregion(system_memory, 0x100000000ULL,
+ *   - hw/i386/pc.c|1159| <<pc_memory_init>> memory_region_add_subregion(system_memory, 0, ram_below_4g);
+ *   - hw/i386/pc.c|1166| <<pc_memory_init>> memory_region_add_subregion(system_memory, 0x100000000ULL,
+ *   - hw/i386/pc.c|1218| <<pc_memory_init>> memory_region_add_subregion(system_memory, machine->device_memory->base,
+ *   - hw/i386/pc.c|1390| <<pc_basic_device_init>> memory_region_add_subregion(isa_bus->address_space_io, 0x80, ioport80_io);
+ *   - hw/i386/pc.c|1393| <<pc_basic_device_init>> memory_region_add_subregion(isa_bus->address_space_io, 0xf0, ioportF0_io);
+ *   - hw/i386/x86.c|704| <<x86_bios_rom_init>> memory_region_add_subregion(rom_memory,
+ *   - hw/i386/xen/xen-hvm.c|241| <<xen_ram_init>> memory_region_add_subregion(sysmem, 0, &ram_640k);
+ *   - hw/i386/xen/xen-hvm.c|251| <<xen_ram_init>> memory_region_add_subregion(sysmem, 0xc0000, &ram_lo);
+ *   - hw/i386/xen/xen-hvm.c|256| <<xen_ram_init>> memory_region_add_subregion(sysmem, 0x100000000ULL, &ram_hi);
+ *   - hw/i386/xen/xen_platform.c|339| <<platform_fixed_ioport_init>> memory_region_add_subregion(get_system_io(), XEN_PLATFORM_IOPORT,
+ *   - hw/pci-host/i440fx.c|348| <<i440fx_init>> memory_region_add_subregion(&f->smram, 0xa0000, &f->low_smram);
+ *   - hw/pci-host/q35.c|557| <<mch_realize>> memory_region_add_subregion(&mch->smram, MCH_HOST_BRIDGE_SMRAM_C_BASE,
+ *   - hw/pci-host/q35.c|563| <<mch_realize>> memory_region_add_subregion(&mch->smram, 0xfeda0000, &mch->high_smram);
+ *   - hw/pci-host/q35.c|576| <<mch_realize>> memory_region_add_subregion(&mch->smram, mch->below_4g_mem_size,
+ *   - hw/pci/msix.c|332| <<msix_init>> memory_region_add_subregion(table_bar, table_offset, &dev->msix_table_mmio);
+ *   - hw/pci/msix.c|335| <<msix_init>> memory_region_add_subregion(pba_bar, pba_offset, &dev->msix_pba_mmio);
+ *   - hw/pci/pci.c|104| <<pci_init_bus_master>> memory_region_add_subregion(&pci_dev->bus_master_container_region, 0,
+ *   - hw/pci/pcie_host.c|108| <<pcie_host_mmcfg_map>> memory_region_add_subregion(get_system_memory(), e->base_addr, &e->mmio);
+ *   - hw/vfio/common.c|974| <<vfio_region_mmap>> memory_region_add_subregion(region->mem, region->mmaps[i].offset,
+ *   - hw/vfio/pci-quirks.c|433| <<vfio_vga_probe_ati_3c3_quirk>> memory_region_add_subregion(&vdev->vga->region[QEMU_PCI_VGA_IO_HI].mem,
+ *   - hw/vfio/pci-quirks.c|688| <<vfio_vga_probe_nvidia_3d0_quirk>> memory_region_add_subregion(&vdev->vga->region[QEMU_PCI_VGA_IO_HI].mem,
+ *   - hw/vfio/pci-quirks.c|693| <<vfio_vga_probe_nvidia_3d0_quirk>> memory_region_add_subregion(&vdev->vga->region[QEMU_PCI_VGA_IO_HI].mem,
+ *   - hw/vfio/pci.c|1638| <<vfio_bar_register>> memory_region_add_subregion(bar->mr, 0, bar->region.mem);
+ *   - hw/virtio/virtio-pci.c|1473| <<virtio_pci_modern_region_map>> memory_region_add_subregion(mr, region->offset, &region->mr);
+ *   - ioport.c|247| <<portio_list_add_1>> memory_region_add_subregion(piolist->address_space,
+ *
+ * 设置内存地址的地方
+ *
+ * offset应该是物理内存中的offset, 把subregion挂到这个地址?
+ *
+ * 设置subregion的container和addr (记录该region在物理内存的地址)
+ * 按照priority=0把subregion插入到上一层的MemoryRegion的subregions链表
+ * "上一层"的意思就是说这个region是上一层的subregion
+ * 没有好的位置就插入到最后
+ * 最后还要memory_region_transaction_commit()
+ */
 void memory_region_add_subregion(MemoryRegion *mr,
                                  hwaddr offset,
                                  MemoryRegion *subregion)
diff --git a/qom/object.c b/qom/object.c
index d51b57f..b1195dd 100644
--- a/qom/object.c
+++ b/qom/object.c
@@ -146,6 +146,9 @@ TypeImpl *type_register(const TypeInfo *info)
     return type_register_internal(info);
 }
 
+/*
+ * 如果hashtable中不存在, 就根据TypeInfo转换成TypeImpl然后插入hashtable
+ */
 TypeImpl *type_register_static(const TypeInfo *info)
 {
     return type_register(info);
diff --git a/util/module.c b/util/module.c
index e9fe3e5..00205e1 100644
--- a/util/module.c
+++ b/util/module.c
@@ -29,10 +29,29 @@ typedef struct ModuleEntry
 
 typedef QTAILQ_HEAD(, ModuleEntry) ModuleTypeList;
 
+/*
+ * 在以下使用init_type_list:
+ *   - util/module.c|46| <<init_lists>> QTAILQ_INIT(&init_type_list[i]);
+ *   - util/module.c|59| <<find_type>> return &init_type_list[type];
+ */
 static ModuleTypeList init_type_list[MODULE_INIT_MAX];
 
+/*
+ * 在以下使用dso_init_list:
+ *   - util/module.c|49| <<init_lists>> QTAILQ_INIT(&dso_init_list);
+ *   - util/module.c|86| <<register_dso_module_init>> QTAILQ_INSERT_TAIL(&dso_init_list, e, node);
+ *   - util/module.c|122| <<module_load_file>> assert(QTAILQ_EMPTY(&dso_init_list));
+ *   - util/module.c|143| <<module_load_file>> QTAILQ_FOREACH(e, &dso_init_list, node) {
+ *   - util/module.c|150| <<module_load_file>> QTAILQ_FOREACH_SAFE(e, &dso_init_list, node, next) {
+ *   - util/module.c|151| <<module_load_file>> QTAILQ_REMOVE(&dso_init_list, e, node);
+ */
 static ModuleTypeList dso_init_list;
 
+/*
+ * called by:
+ *   - util/module.c|57| <<find_type>> init_lists();
+ *   - util/module.c|80| <<register_dso_module_init>> init_lists();
+ */
 static void init_lists(void)
 {
     static int inited;
@@ -52,6 +71,14 @@ static void init_lists(void)
 }
 
 
+/*
+ * called by:
+ *   - util/module.c|90| <<register_module_init>> l = find_type(type);
+ *   - util/module.c|129| <<module_call_init>> l = find_type(type);
+ *
+ * type最多MODULE_INIT_MAX个
+ * 根据type获得对应的init_type_list[type]
+ */
 static ModuleTypeList *find_type(module_init_type type)
 {
     init_lists();
@@ -59,6 +86,15 @@ static ModuleTypeList *find_type(module_init_type type)
     return &init_type_list[type];
 }
 
+/*
+ * called by:
+ *   - include/qemu/module.h|38| <<module_init>> register_module_init(function, type); \
+ *   - util/module.c|184| <<module_load_file>> register_module_init(e->init, e->type);
+ *
+ * type最多MODULE_INIT_MAX个
+ * 根据type获得对应的init_type_list[type]
+ * 根据fn初始化一个ModuleEntry插入到init_type_list[type]
+ */
 void register_module_init(void (*fn)(void), module_init_type type)
 {
     ModuleEntry *e;
@@ -68,11 +104,23 @@ void register_module_init(void (*fn)(void), module_init_type type)
     e->init = fn;
     e->type = type;
 
+    /*
+     * type最多MODULE_INIT_MAX个
+     * 根据type获得对应的init_type_list[type]
+     */
     l = find_type(type);
 
     QTAILQ_INSERT_TAIL(l, e, node);
 }
 
+/*
+ * called by:
+ *   - include/qemu/module.h|31| <<module_init>> register_dso_module_init(function, type); \
+ *
+ * type最多MODULE_INIT_MAX个
+ *
+ * 根据fn初始化一个ModuleEntry插入到dso_init_list
+ */
 void register_dso_module_init(void (*fn)(void), module_init_type type)
 {
     ModuleEntry *e;
@@ -86,6 +134,14 @@ void register_dso_module_init(void (*fn)(void), module_init_type type)
     QTAILQ_INSERT_TAIL(&dso_init_list, e, node);
 }
 
+/*
+ * 主要调用的地方:
+ *   - block.c|5314| <<bdrv_init>> module_call_init(MODULE_INIT_BLOCK);
+ *   - hw/xen/xen-bus.c|475| <<xen_bus_realize>> module_call_init(MODULE_INIT_XEN_BACKEND);
+ *   - vl.c|2868| <<main>> module_call_init(MODULE_INIT_TRACE);
+ *   - vl.c|2878| <<main>> module_call_init(MODULE_INIT_QOM);
+ *   - vl.c|2912| <<main>> module_call_init(MODULE_INIT_OPTS);
+ */
 void module_call_init(module_init_type type)
 {
     ModuleTypeList *l;
@@ -99,6 +155,10 @@ void module_call_init(module_init_type type)
 }
 
 #ifdef CONFIG_MODULES
+/*
+ * called by:
+ *   - util/module.c|224| <<module_load_one>> ret = module_load_file(fname);
+ */
 static int module_load_file(const char *fname)
 {
     GModule *g_module;
@@ -156,6 +216,14 @@ out:
 }
 #endif
 
+/*
+ * called by:
+ *   - include/qemu/module.h|60| <<block_module_load_one>> #define block_module_load_one(lib) module_load_one("block-", lib)
+ *   - include/qemu/module.h|61| <<ui_module_load_one>> #define ui_module_load_one(lib) module_load_one("ui-", lib)
+ *   - include/qemu/module.h|62| <<audio_module_load_one>> #define audio_module_load_one(lib) module_load_one("audio-", lib)
+ *   - include/qemu/module.h|68| <<audio_module_load_one>> bool module_load_one(const char *prefix, const char *lib_name);
+ *   - qtest.c|668| <<qtest_process_command>> if (module_load_one(words[1], words[2])) {
+ */
 bool module_load_one(const char *prefix, const char *lib_name)
 {
     bool success = false;
-- 
2.7.4

